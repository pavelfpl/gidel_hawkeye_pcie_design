-- phy_g3x8.vhd

-- Generated using ACDS version 18.1 625

library IEEE;
library gidel_hawkeye_pcie_altera_xcvr_native_a10_181;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use gidel_hawkeye_pcie_altera_xcvr_native_a10_181.phy_g3x8_pkg.all;

entity phy_g3x8 is
	generic (
		device_revision                                                        : string  := "20nm3";
		duplex_mode                                                            : string  := "duplex";
		channels                                                               : integer := 8;
		enable_calibration                                                     : integer := 1;
		enable_analog_resets                                                   : integer := 1;
		enable_reset_sequence                                                  : integer := 1;
		bonded_mode                                                            : string  := "pma_pcs";
		pcs_bonding_master                                                     : integer := 3;
		plls                                                                   : integer := 2;
		number_physical_bonding_clocks                                         : integer := 1;
		cdr_refclk_cnt                                                         : integer := 1;
		enable_hip                                                             : integer := 1;
		hip_cal_en                                                             : string  := "enable";
		rcfg_enable                                                            : integer := 1;
		rcfg_shared                                                            : integer := 1;
		rcfg_jtag_enable                                                       : integer := 0;
		rcfg_separate_avmm_busy                                                : integer := 0;
		adme_prot_mode                                                         : string  := "pipe_g3";
		adme_data_rate                                                         : string  := "5000000000";
		enable_pcie_dfe_ip                                                     : boolean := false;
		sim_reduced_counters                                                   : boolean := false;
		disable_continuous_dfe                                                 : boolean := false;
		dbg_embedded_debug_enable                                              : integer := 0;
		dbg_capability_reg_enable                                              : integer := 0;
		dbg_user_identifier                                                    : integer := 0;
		dbg_stat_soft_logic_enable                                             : integer := 0;
		dbg_ctrl_soft_logic_enable                                             : integer := 0;
		dbg_prbs_soft_logic_enable                                             : integer := 0;
		dbg_odi_soft_logic_enable                                              : integer := 0;
		rcfg_emb_strm_enable                                                   : integer := 0;
		rcfg_profile_cnt                                                       : integer := 2;
		hssi_gen3_rx_pcs_block_sync                                            : string  := "enable_block_sync";
		hssi_gen3_rx_pcs_block_sync_sm                                         : string  := "enable_blk_sync_sm";
		hssi_gen3_rx_pcs_cdr_ctrl_force_unalgn                                 : string  := "enable";
		hssi_gen3_rx_pcs_lpbk_force                                            : string  := "lpbk_frce_en";
		hssi_gen3_rx_pcs_mode                                                  : string  := "gen3_func";
		hssi_gen3_rx_pcs_rate_match_fifo                                       : string  := "enable_rm_fifo_600ppm";
		hssi_gen3_rx_pcs_rate_match_fifo_latency                               : string  := "regular_latency";
		hssi_gen3_rx_pcs_reverse_lpbk                                          : string  := "rev_lpbk_en";
		hssi_gen3_rx_pcs_rx_b4gb_par_lpbk                                      : string  := "b4gb_par_lpbk_dis";
		hssi_gen3_rx_pcs_rx_force_balign                                       : string  := "en_force_balign";
		hssi_gen3_rx_pcs_rx_ins_del_one_skip                                   : string  := "ins_del_one_skip_en";
		hssi_gen3_rx_pcs_rx_num_fixed_pat                                      : integer := 8;
		hssi_gen3_rx_pcs_rx_test_out_sel                                       : string  := "rx_test_out0";
		hssi_gen3_rx_pcs_sup_mode                                              : string  := "user_mode";
		hssi_gen3_tx_pcs_mode                                                  : string  := "gen3_func";
		hssi_gen3_tx_pcs_reverse_lpbk                                          : string  := "rev_lpbk_en";
		hssi_gen3_tx_pcs_sup_mode                                              : string  := "user_mode";
		hssi_gen3_tx_pcs_tx_bitslip                                            : integer := 0;
		hssi_gen3_tx_pcs_tx_gbox_byp                                           : string  := "enable_gbox";
		hssi_krfec_rx_pcs_blksync_cor_en                                       : string  := "detect";
		hssi_krfec_rx_pcs_bypass_gb                                            : string  := "bypass_dis";
		hssi_krfec_rx_pcs_clr_ctrl                                             : string  := "both_enabled";
		hssi_krfec_rx_pcs_ctrl_bit_reverse                                     : string  := "ctrl_bit_reverse_en";
		hssi_krfec_rx_pcs_data_bit_reverse                                     : string  := "data_bit_reverse_dis";
		hssi_krfec_rx_pcs_dv_start                                             : string  := "with_blklock";
		hssi_krfec_rx_pcs_err_mark_type                                        : string  := "err_mark_10g";
		hssi_krfec_rx_pcs_error_marking_en                                     : string  := "err_mark_dis";
		hssi_krfec_rx_pcs_low_latency_en                                       : string  := "disable";
		hssi_krfec_rx_pcs_lpbk_mode                                            : string  := "lpbk_dis";
		hssi_krfec_rx_pcs_parity_invalid_enum                                  : integer := 8;
		hssi_krfec_rx_pcs_parity_valid_num                                     : integer := 4;
		hssi_krfec_rx_pcs_pipeln_blksync                                       : string  := "enable";
		hssi_krfec_rx_pcs_pipeln_descrm                                        : string  := "disable";
		hssi_krfec_rx_pcs_pipeln_errcorrect                                    : string  := "disable";
		hssi_krfec_rx_pcs_pipeln_errtrap_ind                                   : string  := "enable";
		hssi_krfec_rx_pcs_pipeln_errtrap_lfsr                                  : string  := "disable";
		hssi_krfec_rx_pcs_pipeln_errtrap_loc                                   : string  := "disable";
		hssi_krfec_rx_pcs_pipeln_errtrap_pat                                   : string  := "disable";
		hssi_krfec_rx_pcs_pipeln_gearbox                                       : string  := "enable";
		hssi_krfec_rx_pcs_pipeln_syndrm                                        : string  := "enable";
		hssi_krfec_rx_pcs_pipeln_trans_dec                                     : string  := "disable";
		hssi_krfec_rx_pcs_prot_mode                                            : string  := "disable_mode";
		hssi_krfec_rx_pcs_receive_order                                        : string  := "receive_lsb";
		hssi_krfec_rx_pcs_rx_testbus_sel                                       : string  := "overall";
		hssi_krfec_rx_pcs_signal_ok_en                                         : string  := "sig_ok_en";
		hssi_krfec_rx_pcs_sup_mode                                             : string  := "user_mode";
		hssi_krfec_tx_pcs_burst_err                                            : string  := "burst_err_dis";
		hssi_krfec_tx_pcs_burst_err_len                                        : string  := "burst_err_len1";
		hssi_krfec_tx_pcs_ctrl_bit_reverse                                     : string  := "ctrl_bit_reverse_en";
		hssi_krfec_tx_pcs_data_bit_reverse                                     : string  := "data_bit_reverse_dis";
		hssi_krfec_tx_pcs_enc_frame_query                                      : string  := "enc_query_dis";
		hssi_krfec_tx_pcs_low_latency_en                                       : string  := "disable";
		hssi_krfec_tx_pcs_pipeln_encoder                                       : string  := "enable";
		hssi_krfec_tx_pcs_pipeln_scrambler                                     : string  := "enable";
		hssi_krfec_tx_pcs_prot_mode                                            : string  := "disable_mode";
		hssi_krfec_tx_pcs_sup_mode                                             : string  := "user_mode";
		hssi_krfec_tx_pcs_transcode_err                                        : string  := "trans_err_dis";
		hssi_krfec_tx_pcs_transmit_order                                       : string  := "transmit_lsb";
		hssi_krfec_tx_pcs_tx_testbus_sel                                       : string  := "overall";
		hssi_10g_rx_pcs_align_del                                              : string  := "align_del_dis";
		hssi_10g_rx_pcs_ber_bit_err_total_cnt                                  : string  := "bit_err_total_cnt_10g";
		hssi_10g_rx_pcs_ber_clken                                              : string  := "ber_clk_dis";
		hssi_10g_rx_pcs_ber_xus_timer_window                                   : integer := 19530;
		hssi_10g_rx_pcs_bitslip_mode                                           : string  := "bitslip_dis";
		hssi_10g_rx_pcs_blksync_bitslip_type                                   : string  := "bitslip_comb";
		hssi_10g_rx_pcs_blksync_bitslip_wait_cnt                               : integer := 1;
		hssi_10g_rx_pcs_blksync_bitslip_wait_type                              : string  := "bitslip_cnt";
		hssi_10g_rx_pcs_blksync_bypass                                         : string  := "blksync_bypass_en";
		hssi_10g_rx_pcs_blksync_clken                                          : string  := "blksync_clk_dis";
		hssi_10g_rx_pcs_blksync_enum_invalid_sh_cnt                            : string  := "enum_invalid_sh_cnt_10g";
		hssi_10g_rx_pcs_blksync_knum_sh_cnt_postlock                           : string  := "knum_sh_cnt_postlock_10g";
		hssi_10g_rx_pcs_blksync_knum_sh_cnt_prelock                            : string  := "knum_sh_cnt_prelock_10g";
		hssi_10g_rx_pcs_blksync_pipeln                                         : string  := "blksync_pipeln_dis";
		hssi_10g_rx_pcs_clr_errblk_cnt_en                                      : string  := "disable";
		hssi_10g_rx_pcs_control_del                                            : string  := "control_del_none";
		hssi_10g_rx_pcs_crcchk_bypass                                          : string  := "crcchk_bypass_en";
		hssi_10g_rx_pcs_crcchk_clken                                           : string  := "crcchk_clk_dis";
		hssi_10g_rx_pcs_crcchk_inv                                             : string  := "crcchk_inv_en";
		hssi_10g_rx_pcs_crcchk_pipeln                                          : string  := "crcchk_pipeln_en";
		hssi_10g_rx_pcs_crcflag_pipeln                                         : string  := "crcflag_pipeln_en";
		hssi_10g_rx_pcs_ctrl_bit_reverse                                       : string  := "ctrl_bit_reverse_dis";
		hssi_10g_rx_pcs_data_bit_reverse                                       : string  := "data_bit_reverse_dis";
		hssi_10g_rx_pcs_dec_64b66b_rxsm_bypass                                 : string  := "dec_64b66b_rxsm_bypass_en";
		hssi_10g_rx_pcs_dec64b66b_clken                                        : string  := "dec64b66b_clk_dis";
		hssi_10g_rx_pcs_descrm_bypass                                          : string  := "descrm_bypass_en";
		hssi_10g_rx_pcs_descrm_clken                                           : string  := "descrm_clk_dis";
		hssi_10g_rx_pcs_descrm_mode                                            : string  := "async";
		hssi_10g_rx_pcs_descrm_pipeln                                          : string  := "enable";
		hssi_10g_rx_pcs_dft_clk_out_sel                                        : string  := "rx_master_clk";
		hssi_10g_rx_pcs_dis_signal_ok                                          : string  := "dis_signal_ok_en";
		hssi_10g_rx_pcs_dispchk_bypass                                         : string  := "dispchk_bypass_en";
		hssi_10g_rx_pcs_empty_flag_type                                        : string  := "empty_rd_side";
		hssi_10g_rx_pcs_fast_path                                              : string  := "fast_path_en";
		hssi_10g_rx_pcs_fec_clken                                              : string  := "fec_clk_dis";
		hssi_10g_rx_pcs_fec_enable                                             : string  := "fec_dis";
		hssi_10g_rx_pcs_fifo_double_read                                       : string  := "fifo_double_read_dis";
		hssi_10g_rx_pcs_fifo_stop_rd                                           : string  := "n_rd_empty";
		hssi_10g_rx_pcs_fifo_stop_wr                                           : string  := "n_wr_full";
		hssi_10g_rx_pcs_force_align                                            : string  := "force_align_dis";
		hssi_10g_rx_pcs_frmsync_bypass                                         : string  := "frmsync_bypass_en";
		hssi_10g_rx_pcs_frmsync_clken                                          : string  := "frmsync_clk_dis";
		hssi_10g_rx_pcs_frmsync_enum_scrm                                      : string  := "enum_scrm_default";
		hssi_10g_rx_pcs_frmsync_enum_sync                                      : string  := "enum_sync_default";
		hssi_10g_rx_pcs_frmsync_flag_type                                      : string  := "location_only";
		hssi_10g_rx_pcs_frmsync_knum_sync                                      : string  := "knum_sync_default";
		hssi_10g_rx_pcs_frmsync_mfrm_length                                    : integer := 2048;
		hssi_10g_rx_pcs_frmsync_pipeln                                         : string  := "frmsync_pipeln_en";
		hssi_10g_rx_pcs_full_flag_type                                         : string  := "full_wr_side";
		hssi_10g_rx_pcs_gb_rx_idwidth                                          : string  := "width_64";
		hssi_10g_rx_pcs_gb_rx_odwidth                                          : string  := "width_64";
		hssi_10g_rx_pcs_gbexp_clken                                            : string  := "gbexp_clk_dis";
		hssi_10g_rx_pcs_low_latency_en                                         : string  := "disable";
		hssi_10g_rx_pcs_lpbk_mode                                              : string  := "lpbk_dis";
		hssi_10g_rx_pcs_master_clk_sel                                         : string  := "master_rx_pma_clk";
		hssi_10g_rx_pcs_pempty_flag_type                                       : string  := "pempty_rd_side";
		hssi_10g_rx_pcs_pfull_flag_type                                        : string  := "pfull_wr_side";
		hssi_10g_rx_pcs_phcomp_rd_del                                          : string  := "phcomp_rd_del2";
		hssi_10g_rx_pcs_pld_if_type                                            : string  := "fifo";
		hssi_10g_rx_pcs_prot_mode                                              : string  := "disable_mode";
		hssi_10g_rx_pcs_rand_clken                                             : string  := "rand_clk_dis";
		hssi_10g_rx_pcs_rd_clk_sel                                             : string  := "rd_rx_pld_clk";
		hssi_10g_rx_pcs_rdfifo_clken                                           : string  := "rdfifo_clk_dis";
		hssi_10g_rx_pcs_rx_fifo_write_ctrl                                     : string  := "blklock_stops";
		hssi_10g_rx_pcs_rx_scrm_width                                          : string  := "bit64";
		hssi_10g_rx_pcs_rx_sh_location                                         : string  := "msb";
		hssi_10g_rx_pcs_rx_signal_ok_sel                                       : string  := "synchronized_ver";
		hssi_10g_rx_pcs_rx_sm_bypass                                           : string  := "rx_sm_bypass_en";
		hssi_10g_rx_pcs_rx_sm_hiber                                            : string  := "rx_sm_hiber_en";
		hssi_10g_rx_pcs_rx_sm_pipeln                                           : string  := "rx_sm_pipeln_en";
		hssi_10g_rx_pcs_rx_testbus_sel                                         : string  := "rx_fifo_testbus1";
		hssi_10g_rx_pcs_rx_true_b2b                                            : string  := "b2b";
		hssi_10g_rx_pcs_rxfifo_empty                                           : string  := "empty_default";
		hssi_10g_rx_pcs_rxfifo_full                                            : string  := "full_default";
		hssi_10g_rx_pcs_rxfifo_mode                                            : string  := "phase_comp";
		hssi_10g_rx_pcs_rxfifo_pempty                                          : integer := 2;
		hssi_10g_rx_pcs_rxfifo_pfull                                           : integer := 23;
		hssi_10g_rx_pcs_stretch_num_stages                                     : string  := "zero_stage";
		hssi_10g_rx_pcs_sup_mode                                               : string  := "user_mode";
		hssi_10g_rx_pcs_test_mode                                              : string  := "test_off";
		hssi_10g_rx_pcs_wrfifo_clken                                           : string  := "wrfifo_clk_dis";
		hssi_10g_rx_pcs_advanced_user_mode                                     : string  := "disable";
		hssi_10g_tx_pcs_bitslip_en                                             : string  := "bitslip_dis";
		hssi_10g_tx_pcs_bonding_dft_en                                         : string  := "dft_dis";
		hssi_10g_tx_pcs_bonding_dft_val                                        : string  := "dft_0";
		hssi_10g_tx_pcs_crcgen_bypass                                          : string  := "crcgen_bypass_en";
		hssi_10g_tx_pcs_crcgen_clken                                           : string  := "crcgen_clk_dis";
		hssi_10g_tx_pcs_crcgen_err                                             : string  := "crcgen_err_dis";
		hssi_10g_tx_pcs_crcgen_inv                                             : string  := "crcgen_inv_en";
		hssi_10g_tx_pcs_ctrl_bit_reverse                                       : string  := "ctrl_bit_reverse_dis";
		hssi_10g_tx_pcs_data_bit_reverse                                       : string  := "data_bit_reverse_dis";
		hssi_10g_tx_pcs_dft_clk_out_sel                                        : string  := "tx_master_clk";
		hssi_10g_tx_pcs_dispgen_bypass                                         : string  := "dispgen_bypass_en";
		hssi_10g_tx_pcs_dispgen_clken                                          : string  := "dispgen_clk_dis";
		hssi_10g_tx_pcs_dispgen_err                                            : string  := "dispgen_err_dis";
		hssi_10g_tx_pcs_dispgen_pipeln                                         : string  := "dispgen_pipeln_dis";
		hssi_10g_tx_pcs_empty_flag_type                                        : string  := "empty_rd_side";
		hssi_10g_tx_pcs_enc_64b66b_txsm_bypass                                 : string  := "enc_64b66b_txsm_bypass_en";
		hssi_10g_tx_pcs_enc64b66b_txsm_clken                                   : string  := "enc64b66b_txsm_clk_dis";
		hssi_10g_tx_pcs_fastpath                                               : string  := "fastpath_en";
		hssi_10g_tx_pcs_fec_clken                                              : string  := "fec_clk_dis";
		hssi_10g_tx_pcs_fec_enable                                             : string  := "fec_dis";
		hssi_10g_tx_pcs_fifo_double_write                                      : string  := "fifo_double_write_dis";
		hssi_10g_tx_pcs_fifo_reg_fast                                          : string  := "fifo_reg_fast_dis";
		hssi_10g_tx_pcs_fifo_stop_rd                                           : string  := "rd_empty";
		hssi_10g_tx_pcs_fifo_stop_wr                                           : string  := "n_wr_full";
		hssi_10g_tx_pcs_frmgen_burst                                           : string  := "frmgen_burst_dis";
		hssi_10g_tx_pcs_frmgen_bypass                                          : string  := "frmgen_bypass_en";
		hssi_10g_tx_pcs_frmgen_clken                                           : string  := "frmgen_clk_dis";
		hssi_10g_tx_pcs_frmgen_mfrm_length                                     : integer := 2048;
		hssi_10g_tx_pcs_frmgen_pipeln                                          : string  := "frmgen_pipeln_en";
		hssi_10g_tx_pcs_frmgen_pyld_ins                                        : string  := "frmgen_pyld_ins_dis";
		hssi_10g_tx_pcs_frmgen_wordslip                                        : string  := "frmgen_wordslip_dis";
		hssi_10g_tx_pcs_full_flag_type                                         : string  := "full_wr_side";
		hssi_10g_tx_pcs_gb_pipeln_bypass                                       : string  := "disable";
		hssi_10g_tx_pcs_gb_tx_idwidth                                          : string  := "width_64";
		hssi_10g_tx_pcs_gb_tx_odwidth                                          : string  := "width_64";
		hssi_10g_tx_pcs_gbred_clken                                            : string  := "gbred_clk_dis";
		hssi_10g_tx_pcs_low_latency_en                                         : string  := "disable";
		hssi_10g_tx_pcs_master_clk_sel                                         : string  := "master_tx_pma_clk";
		hssi_10g_tx_pcs_pempty_flag_type                                       : string  := "pempty_rd_side";
		hssi_10g_tx_pcs_pfull_flag_type                                        : string  := "pfull_wr_side";
		hssi_10g_tx_pcs_phcomp_rd_del                                          : string  := "phcomp_rd_del2";
		hssi_10g_tx_pcs_pld_if_type                                            : string  := "fifo";
		hssi_10g_tx_pcs_prot_mode                                              : string  := "disable_mode";
		hssi_10g_tx_pcs_pseudo_random                                          : string  := "all_0";
		hssi_10g_tx_pcs_pseudo_seed_a                                          : string  := "288230376151711743";
		hssi_10g_tx_pcs_pseudo_seed_b                                          : string  := "288230376151711743";
		hssi_10g_tx_pcs_random_disp                                            : string  := "disable";
		hssi_10g_tx_pcs_rdfifo_clken                                           : string  := "rdfifo_clk_dis";
		hssi_10g_tx_pcs_scrm_bypass                                            : string  := "scrm_bypass_en";
		hssi_10g_tx_pcs_scrm_clken                                             : string  := "scrm_clk_dis";
		hssi_10g_tx_pcs_scrm_mode                                              : string  := "async";
		hssi_10g_tx_pcs_scrm_pipeln                                            : string  := "enable";
		hssi_10g_tx_pcs_sh_err                                                 : string  := "sh_err_dis";
		hssi_10g_tx_pcs_sop_mark                                               : string  := "sop_mark_dis";
		hssi_10g_tx_pcs_stretch_num_stages                                     : string  := "zero_stage";
		hssi_10g_tx_pcs_sup_mode                                               : string  := "user_mode";
		hssi_10g_tx_pcs_test_mode                                              : string  := "test_off";
		hssi_10g_tx_pcs_tx_scrm_err                                            : string  := "scrm_err_dis";
		hssi_10g_tx_pcs_tx_scrm_width                                          : string  := "bit64";
		hssi_10g_tx_pcs_tx_sh_location                                         : string  := "msb";
		hssi_10g_tx_pcs_tx_sm_bypass                                           : string  := "tx_sm_bypass_en";
		hssi_10g_tx_pcs_tx_sm_pipeln                                           : string  := "tx_sm_pipeln_en";
		hssi_10g_tx_pcs_tx_testbus_sel                                         : string  := "tx_fifo_testbus1";
		hssi_10g_tx_pcs_txfifo_empty                                           : string  := "empty_default";
		hssi_10g_tx_pcs_txfifo_full                                            : string  := "full_default";
		hssi_10g_tx_pcs_txfifo_mode                                            : string  := "phase_comp";
		hssi_10g_tx_pcs_txfifo_pempty                                          : integer := 2;
		hssi_10g_tx_pcs_txfifo_pfull                                           : integer := 11;
		hssi_10g_tx_pcs_wr_clk_sel                                             : string  := "wr_tx_pld_clk";
		hssi_10g_tx_pcs_wrfifo_clken                                           : string  := "wrfifo_clk_dis";
		hssi_10g_tx_pcs_advanced_user_mode                                     : string  := "disable";
		hssi_8g_rx_pcs_auto_error_replacement                                  : string  := "en_err_replace";
		hssi_8g_rx_pcs_bit_reversal                                            : string  := "dis_bit_reversal";
		hssi_8g_rx_pcs_bonding_dft_en                                          : string  := "dft_dis";
		hssi_8g_rx_pcs_bonding_dft_val                                         : string  := "dft_0";
		hssi_8g_rx_pcs_bypass_pipeline_reg                                     : string  := "dis_bypass_pipeline";
		hssi_8g_rx_pcs_byte_deserializer                                       : string  := "en_bds_by_4";
		hssi_8g_rx_pcs_cdr_ctrl_rxvalid_mask                                   : string  := "en_rxvalid_mask";
		hssi_8g_rx_pcs_clkcmp_pattern_n                                        : integer := 192892;
		hssi_8g_rx_pcs_clkcmp_pattern_p                                        : integer := 855683;
		hssi_8g_rx_pcs_clock_gate_bds_dec_asn                                  : string  := "dis_bds_dec_asn_clk_gating";
		hssi_8g_rx_pcs_clock_gate_cdr_eidle                                    : string  := "dis_cdr_eidle_clk_gating";
		hssi_8g_rx_pcs_clock_gate_dw_pc_wrclk                                  : string  := "en_dw_pc_wrclk_gating";
		hssi_8g_rx_pcs_clock_gate_dw_rm_rd                                     : string  := "en_dw_rm_rdclk_gating";
		hssi_8g_rx_pcs_clock_gate_dw_rm_wr                                     : string  := "en_dw_rm_wrclk_gating";
		hssi_8g_rx_pcs_clock_gate_dw_wa                                        : string  := "en_dw_wa_clk_gating";
		hssi_8g_rx_pcs_clock_gate_pc_rdclk                                     : string  := "dis_pc_rdclk_gating";
		hssi_8g_rx_pcs_clock_gate_sw_pc_wrclk                                  : string  := "dis_sw_pc_wrclk_gating";
		hssi_8g_rx_pcs_clock_gate_sw_rm_rd                                     : string  := "dis_sw_rm_rdclk_gating";
		hssi_8g_rx_pcs_clock_gate_sw_rm_wr                                     : string  := "dis_sw_rm_wrclk_gating";
		hssi_8g_rx_pcs_clock_gate_sw_wa                                        : string  := "dis_sw_wa_clk_gating";
		hssi_8g_rx_pcs_clock_observation_in_pld_core                           : string  := "internal_sw_wa_clk";
		hssi_8g_rx_pcs_eidle_entry_eios                                        : string  := "dis_eidle_eios";
		hssi_8g_rx_pcs_eidle_entry_iei                                         : string  := "dis_eidle_iei";
		hssi_8g_rx_pcs_eidle_entry_sd                                          : string  := "en_eidle_sd";
		hssi_8g_rx_pcs_eightb_tenb_decoder                                     : string  := "en_8b10b_ibm";
		hssi_8g_rx_pcs_err_flags_sel                                           : string  := "err_flags_wa";
		hssi_8g_rx_pcs_fixed_pat_det                                           : string  := "dis_fixed_patdet";
		hssi_8g_rx_pcs_fixed_pat_num                                           : integer := 0;
		hssi_8g_rx_pcs_force_signal_detect                                     : string  := "en_force_signal_detect";
		hssi_8g_rx_pcs_gen3_clk_en                                             : string  := "enable_clk";
		hssi_8g_rx_pcs_gen3_rx_clk_sel                                         : string  := "rcvd_clk";
		hssi_8g_rx_pcs_gen3_tx_clk_sel                                         : string  := "tx_pma_clk";
		hssi_8g_rx_pcs_hip_mode                                                : string  := "en_hip";
		hssi_8g_rx_pcs_ibm_invalid_code                                        : string  := "dis_ibm_invalid_code";
		hssi_8g_rx_pcs_invalid_code_flag_only                                  : string  := "dis_invalid_code_only";
		hssi_8g_rx_pcs_pad_or_edb_error_replace                                : string  := "replace_edb_dynamic";
		hssi_8g_rx_pcs_pcs_bypass                                              : string  := "dis_pcs_bypass";
		hssi_8g_rx_pcs_phase_comp_rdptr                                        : string  := "disable_rdptr";
		hssi_8g_rx_pcs_phase_compensation_fifo                                 : string  := "register_fifo";
		hssi_8g_rx_pcs_pipe_if_enable                                          : string  := "en_pipe3_rx";
		hssi_8g_rx_pcs_pma_dw                                                  : string  := "ten_bit";
		hssi_8g_rx_pcs_polinv_8b10b_dec                                        : string  := "en_polinv_8b10b_dec";
		hssi_8g_rx_pcs_prot_mode                                               : string  := "pipe_g3";
		hssi_8g_rx_pcs_rate_match                                              : string  := "pipe_rm";
		hssi_8g_rx_pcs_rate_match_del_thres                                    : string  := "pipe_rm_del_thres";
		hssi_8g_rx_pcs_rate_match_empty_thres                                  : string  := "pipe_rm_empty_thres";
		hssi_8g_rx_pcs_rate_match_full_thres                                   : string  := "pipe_rm_full_thres";
		hssi_8g_rx_pcs_rate_match_ins_thres                                    : string  := "pipe_rm_ins_thres";
		hssi_8g_rx_pcs_rate_match_start_thres                                  : string  := "pipe_rm_start_thres";
		hssi_8g_rx_pcs_rx_clk_free_running                                     : string  := "en_rx_clk_free_run";
		hssi_8g_rx_pcs_rx_clk2                                                 : string  := "tx_pma_clock_clk2";
		hssi_8g_rx_pcs_rx_pcs_urst                                             : string  := "en_rx_pcs_urst";
		hssi_8g_rx_pcs_rx_rcvd_clk                                             : string  := "rcvd_clk_rcvd_clk";
		hssi_8g_rx_pcs_rx_rd_clk                                               : string  := "rx_clk";
		hssi_8g_rx_pcs_rx_refclk                                               : string  := "dis_refclk_sel";
		hssi_8g_rx_pcs_rx_wr_clk                                               : string  := "txfifo_rd_clk";
		hssi_8g_rx_pcs_sup_mode                                                : string  := "user_mode";
		hssi_8g_rx_pcs_symbol_swap                                             : string  := "dis_symbol_swap";
		hssi_8g_rx_pcs_sync_sm_idle_eios                                       : string  := "en_syncsm_idle";
		hssi_8g_rx_pcs_test_bus_sel                                            : string  := "tx_testbus";
		hssi_8g_rx_pcs_tx_rx_parallel_loopback                                 : string  := "dis_plpbk";
		hssi_8g_rx_pcs_wa_boundary_lock_ctrl                                   : string  := "sync_sm";
		hssi_8g_rx_pcs_wa_clk_slip_spacing                                     : integer := 16;
		hssi_8g_rx_pcs_wa_det_latency_sync_status_beh                          : string  := "dont_care_assert_sync";
		hssi_8g_rx_pcs_wa_disp_err_flag                                        : string  := "en_disp_err_flag";
		hssi_8g_rx_pcs_wa_kchar                                                : string  := "dis_kchar";
		hssi_8g_rx_pcs_wa_pd                                                   : string  := "wa_pd_10";
		hssi_8g_rx_pcs_wa_pd_data                                              : string  := "380";
		hssi_8g_rx_pcs_wa_pd_polarity                                          : string  := "dont_care_both_pol";
		hssi_8g_rx_pcs_wa_pld_controlled                                       : string  := "dis_pld_ctrl";
		hssi_8g_rx_pcs_wa_renumber_data                                        : integer := 16;
		hssi_8g_rx_pcs_wa_rgnumber_data                                        : integer := 15;
		hssi_8g_rx_pcs_wa_rknumber_data                                        : integer := 3;
		hssi_8g_rx_pcs_wa_rosnumber_data                                       : integer := 0;
		hssi_8g_rx_pcs_wa_rvnumber_data                                        : integer := 0;
		hssi_8g_rx_pcs_wa_sync_sm_ctrl                                         : string  := "pipe_sync_sm";
		hssi_8g_rx_pcs_wait_cnt                                                : integer := 0;
		hssi_8g_tx_pcs_bit_reversal                                            : string  := "dis_bit_reversal";
		hssi_8g_tx_pcs_bonding_dft_en                                          : string  := "dft_dis";
		hssi_8g_tx_pcs_bonding_dft_val                                         : string  := "dft_0";
		hssi_8g_tx_pcs_bypass_pipeline_reg                                     : string  := "dis_bypass_pipeline";
		hssi_8g_tx_pcs_byte_serializer                                         : string  := "en_bs_by_4";
		hssi_8g_tx_pcs_clock_gate_bs_enc                                       : string  := "dis_bs_enc_clk_gating";
		hssi_8g_tx_pcs_clock_gate_dw_fifowr                                    : string  := "en_dw_fifowr_clk_gating";
		hssi_8g_tx_pcs_clock_gate_fiford                                       : string  := "dis_fiford_clk_gating";
		hssi_8g_tx_pcs_clock_gate_sw_fifowr                                    : string  := "dis_sw_fifowr_clk_gating";
		hssi_8g_tx_pcs_clock_observation_in_pld_core                           : string  := "internal_refclk_b";
		hssi_8g_tx_pcs_data_selection_8b10b_encoder_input                      : string  := "normal_data_path";
		hssi_8g_tx_pcs_dynamic_clk_switch                                      : string  := "en_dyn_clk_switch";
		hssi_8g_tx_pcs_eightb_tenb_disp_ctrl                                   : string  := "en_disp_ctrl";
		hssi_8g_tx_pcs_eightb_tenb_encoder                                     : string  := "en_8b10b_ibm";
		hssi_8g_tx_pcs_force_echar                                             : string  := "dis_force_echar";
		hssi_8g_tx_pcs_force_kchar                                             : string  := "dis_force_kchar";
		hssi_8g_tx_pcs_gen3_tx_clk_sel                                         : string  := "tx_pma_clk";
		hssi_8g_tx_pcs_gen3_tx_pipe_clk_sel                                    : string  := "func_clk";
		hssi_8g_tx_pcs_hip_mode                                                : string  := "en_hip";
		hssi_8g_tx_pcs_pcs_bypass                                              : string  := "dis_pcs_bypass";
		hssi_8g_tx_pcs_phase_comp_rdptr                                        : string  := "disable_rdptr";
		hssi_8g_tx_pcs_phase_compensation_fifo                                 : string  := "register_fifo";
		hssi_8g_tx_pcs_phfifo_write_clk_sel                                    : string  := "tx_clk";
		hssi_8g_tx_pcs_pma_dw                                                  : string  := "ten_bit";
		hssi_8g_tx_pcs_prot_mode                                               : string  := "pipe_g3";
		hssi_8g_tx_pcs_refclk_b_clk_sel                                        : string  := "tx_pma_clock";
		hssi_8g_tx_pcs_revloop_back_rm                                         : string  := "en_rev_loopback_rx_rm";
		hssi_8g_tx_pcs_sup_mode                                                : string  := "user_mode";
		hssi_8g_tx_pcs_symbol_swap                                             : string  := "dis_symbol_swap";
		hssi_8g_tx_pcs_tx_bitslip                                              : string  := "dis_tx_bitslip";
		hssi_8g_tx_pcs_tx_compliance_controlled_disparity                      : string  := "en_txcompliance_pipe3p0";
		hssi_8g_tx_pcs_tx_fast_pld_reg                                         : string  := "dis_tx_fast_pld_reg";
		hssi_8g_tx_pcs_txclk_freerun                                           : string  := "en_freerun_tx";
		hssi_8g_tx_pcs_txpcs_urst                                              : string  := "en_txpcs_urst";
		hssi_tx_pld_pcs_interface_hd_chnl_hip_en                               : string  := "enable";
		hssi_tx_pld_pcs_interface_hd_chnl_hrdrstctl_en                         : string  := "enable";
		hssi_tx_pld_pcs_interface_hd_chnl_prot_mode_tx                         : string  := "pcie_g3_capable_tx";
		hssi_tx_pld_pcs_interface_hd_chnl_ctrl_plane_bonding_tx                : string  := "ctrl_master_tx";
		hssi_tx_pld_pcs_interface_hd_chnl_pma_dw_tx                            : string  := "pcie_g3_dyn_dw_tx";
		hssi_tx_pld_pcs_interface_hd_chnl_pld_fifo_mode_tx                     : string  := "reg_tx";
		hssi_tx_pld_pcs_interface_hd_chnl_shared_fifo_width_tx                 : string  := "single_tx";
		hssi_tx_pld_pcs_interface_hd_chnl_low_latency_en_tx                    : string  := "disable";
		hssi_tx_pld_pcs_interface_hd_chnl_func_mode                            : string  := "enable";
		hssi_tx_pld_pcs_interface_hd_chnl_channel_operation_mode               : string  := "tx_rx_pair_enabled";
		hssi_tx_pld_pcs_interface_hd_chnl_lpbk_en                              : string  := "disable";
		hssi_tx_pld_pcs_interface_hd_chnl_frequency_rules_en                   : string  := "enable";
		hssi_tx_pld_pcs_interface_hd_chnl_pma_tx_clk_hz                        : integer := 500000000;
		hssi_tx_pld_pcs_interface_hd_chnl_pld_tx_clk_hz                        : integer := 0;
		hssi_tx_pld_pcs_interface_hd_chnl_pld_uhsif_tx_clk_hz                  : integer := 0;
		hssi_tx_pld_pcs_interface_hd_fifo_channel_operation_mode               : string  := "tx_rx_pair_enabled";
		hssi_tx_pld_pcs_interface_hd_fifo_prot_mode_tx                         : string  := "non_teng_mode_tx";
		hssi_tx_pld_pcs_interface_hd_fifo_shared_fifo_width_tx                 : string  := "single_tx";
		hssi_tx_pld_pcs_interface_hd_10g_channel_operation_mode                : string  := "tx_rx_pair_enabled";
		hssi_tx_pld_pcs_interface_hd_10g_lpbk_en                               : string  := "disable";
		hssi_tx_pld_pcs_interface_hd_10g_advanced_user_mode_tx                 : string  := "disable";
		hssi_tx_pld_pcs_interface_hd_10g_pma_dw_tx                             : string  := "pma_64b_tx";
		hssi_tx_pld_pcs_interface_hd_10g_fifo_mode_tx                          : string  := "fifo_tx";
		hssi_tx_pld_pcs_interface_hd_10g_prot_mode_tx                          : string  := "disabled_prot_mode_tx";
		hssi_tx_pld_pcs_interface_hd_10g_low_latency_en_tx                     : string  := "disable";
		hssi_tx_pld_pcs_interface_hd_10g_shared_fifo_width_tx                  : string  := "single_tx";
		hssi_tx_pld_pcs_interface_hd_8g_channel_operation_mode                 : string  := "tx_rx_pair_enabled";
		hssi_tx_pld_pcs_interface_hd_8g_lpbk_en                                : string  := "disable";
		hssi_tx_pld_pcs_interface_hd_8g_prot_mode_tx                           : string  := "pipe_g3_tx";
		hssi_tx_pld_pcs_interface_hd_8g_hip_mode                               : string  := "enable";
		hssi_tx_pld_pcs_interface_hd_8g_pma_dw_tx                              : string  := "pma_10b_tx";
		hssi_tx_pld_pcs_interface_hd_8g_fifo_mode_tx                           : string  := "reg_tx";
		hssi_tx_pld_pcs_interface_hd_g3_prot_mode                              : string  := "pipe_g3";
		hssi_tx_pld_pcs_interface_hd_krfec_channel_operation_mode              : string  := "tx_rx_pair_enabled";
		hssi_tx_pld_pcs_interface_hd_krfec_lpbk_en                             : string  := "disable";
		hssi_tx_pld_pcs_interface_hd_krfec_prot_mode_tx                        : string  := "disabled_prot_mode_tx";
		hssi_tx_pld_pcs_interface_hd_krfec_low_latency_en_tx                   : string  := "disable";
		hssi_tx_pld_pcs_interface_hd_pmaif_lpbk_en                             : string  := "disable";
		hssi_tx_pld_pcs_interface_hd_pmaif_channel_operation_mode              : string  := "tx_rx_pair_enabled";
		hssi_tx_pld_pcs_interface_hd_pmaif_sim_mode                            : string  := "disable";
		hssi_tx_pld_pcs_interface_hd_pmaif_prot_mode_tx                        : string  := "eightg_g3_pcie_g3_hip_mode_tx";
		hssi_tx_pld_pcs_interface_hd_pmaif_pma_dw_tx                           : string  := "pcie_g3_dyn_dw_tx";
		hssi_tx_pld_pcs_interface_hd_pldif_prot_mode_tx                        : string  := "eightg_and_g3_reg_mode_hip_tx";
		hssi_tx_pld_pcs_interface_hd_pldif_hrdrstctl_en                        : string  := "enable";
		hssi_tx_pld_pcs_interface_pcs_tx_clk_source                            : string  := "eightg";
		hssi_tx_pld_pcs_interface_pcs_tx_data_source                           : string  := "hip_enable";
		hssi_tx_pld_pcs_interface_pcs_tx_delay1_clk_en                         : string  := "delay1_clk_disable";
		hssi_tx_pld_pcs_interface_pcs_tx_delay1_clk_sel                        : string  := "pcs_tx_clk";
		hssi_tx_pld_pcs_interface_pcs_tx_delay1_ctrl                           : string  := "delay1_path0";
		hssi_tx_pld_pcs_interface_pcs_tx_delay1_data_sel                       : string  := "one_ff_delay";
		hssi_tx_pld_pcs_interface_pcs_tx_delay2_clk_en                         : string  := "delay2_clk_disable";
		hssi_tx_pld_pcs_interface_pcs_tx_delay2_ctrl                           : string  := "delay2_path0";
		hssi_tx_pld_pcs_interface_pcs_tx_output_sel                            : string  := "teng_output";
		hssi_tx_pld_pcs_interface_pcs_tx_clk_out_sel                           : string  := "eightg_clk_out";
		hssi_rx_pld_pcs_interface_hd_chnl_hip_en                               : string  := "enable";
		hssi_rx_pld_pcs_interface_hd_chnl_transparent_pcs_rx                   : string  := "disable";
		hssi_rx_pld_pcs_interface_hd_chnl_hrdrstctl_en                         : string  := "enable";
		hssi_rx_pld_pcs_interface_hd_chnl_prot_mode_rx                         : string  := "pcie_g3_capable_rx";
		hssi_rx_pld_pcs_interface_hd_chnl_ctrl_plane_bonding_rx                : string  := "ctrl_master_rx";
		hssi_rx_pld_pcs_interface_hd_chnl_pma_dw_rx                            : string  := "pcie_g3_dyn_dw_rx";
		hssi_rx_pld_pcs_interface_hd_chnl_pld_fifo_mode_rx                     : string  := "reg_rx";
		hssi_rx_pld_pcs_interface_hd_chnl_shared_fifo_width_rx                 : string  := "single_rx";
		hssi_rx_pld_pcs_interface_hd_chnl_low_latency_en_rx                    : string  := "disable";
		hssi_rx_pld_pcs_interface_hd_chnl_func_mode                            : string  := "enable";
		hssi_rx_pld_pcs_interface_hd_chnl_channel_operation_mode               : string  := "tx_rx_pair_enabled";
		hssi_rx_pld_pcs_interface_hd_chnl_lpbk_en                              : string  := "disable";
		hssi_rx_pld_pcs_interface_hd_10g_advanced_user_mode_rx                 : string  := "disable";
		hssi_rx_pld_pcs_interface_hd_chnl_frequency_rules_en                   : string  := "enable";
		hssi_rx_pld_pcs_interface_hd_chnl_pma_rx_clk_hz                        : integer := 500000000;
		hssi_rx_pld_pcs_interface_hd_chnl_pld_rx_clk_hz                        : integer := 0;
		hssi_rx_pld_pcs_interface_hd_chnl_fref_clk_hz                          : integer := 100000000;
		hssi_rx_pld_pcs_interface_hd_chnl_clklow_clk_hz                        : integer := 100000000;
		hssi_rx_pld_pcs_interface_hd_fifo_channel_operation_mode               : string  := "tx_rx_pair_enabled";
		hssi_rx_pld_pcs_interface_hd_fifo_prot_mode_rx                         : string  := "non_teng_mode_rx";
		hssi_rx_pld_pcs_interface_hd_fifo_shared_fifo_width_rx                 : string  := "single_rx";
		hssi_rx_pld_pcs_interface_hd_10g_channel_operation_mode                : string  := "tx_rx_pair_enabled";
		hssi_rx_pld_pcs_interface_hd_10g_lpbk_en                               : string  := "disable";
		hssi_rx_pld_pcs_interface_hd_10g_pma_dw_rx                             : string  := "pma_64b_rx";
		hssi_rx_pld_pcs_interface_hd_10g_fifo_mode_rx                          : string  := "fifo_rx";
		hssi_rx_pld_pcs_interface_hd_10g_prot_mode_rx                          : string  := "disabled_prot_mode_rx";
		hssi_rx_pld_pcs_interface_hd_10g_low_latency_en_rx                     : string  := "disable";
		hssi_rx_pld_pcs_interface_hd_10g_shared_fifo_width_rx                  : string  := "single_rx";
		hssi_rx_pld_pcs_interface_hd_10g_test_bus_mode                         : string  := "rx";
		hssi_rx_pld_pcs_interface_hd_8g_channel_operation_mode                 : string  := "tx_rx_pair_enabled";
		hssi_rx_pld_pcs_interface_hd_8g_lpbk_en                                : string  := "disable";
		hssi_rx_pld_pcs_interface_hd_8g_prot_mode_rx                           : string  := "pipe_g3_rx";
		hssi_rx_pld_pcs_interface_hd_8g_hip_mode                               : string  := "enable";
		hssi_rx_pld_pcs_interface_hd_8g_pma_dw_rx                              : string  := "pma_10b_rx";
		hssi_rx_pld_pcs_interface_hd_8g_fifo_mode_rx                           : string  := "reg_rx";
		hssi_rx_pld_pcs_interface_hd_g3_prot_mode                              : string  := "pipe_g3";
		hssi_rx_pld_pcs_interface_hd_krfec_channel_operation_mode              : string  := "tx_rx_pair_enabled";
		hssi_rx_pld_pcs_interface_hd_krfec_lpbk_en                             : string  := "disable";
		hssi_rx_pld_pcs_interface_hd_krfec_prot_mode_rx                        : string  := "disabled_prot_mode_rx";
		hssi_rx_pld_pcs_interface_hd_krfec_low_latency_en_rx                   : string  := "disable";
		hssi_rx_pld_pcs_interface_hd_krfec_test_bus_mode                       : string  := "tx";
		hssi_rx_pld_pcs_interface_hd_pmaif_lpbk_en                             : string  := "disable";
		hssi_rx_pld_pcs_interface_hd_pmaif_channel_operation_mode              : string  := "tx_rx_pair_enabled";
		hssi_rx_pld_pcs_interface_hd_pmaif_sim_mode                            : string  := "disable";
		hssi_rx_pld_pcs_interface_hd_pmaif_prot_mode_rx                        : string  := "eightg_g3_pcie_g3_hip_mode_rx";
		hssi_rx_pld_pcs_interface_hd_pmaif_pma_dw_rx                           : string  := "pcie_g3_dyn_dw_rx";
		hssi_rx_pld_pcs_interface_hd_pldif_prot_mode_rx                        : string  := "eightg_and_g3_reg_mode_hip_rx";
		hssi_rx_pld_pcs_interface_hd_pldif_hrdrstctl_en                        : string  := "enable";
		hssi_rx_pld_pcs_interface_pcs_rx_block_sel                             : string  := "eightg";
		hssi_rx_pld_pcs_interface_pcs_rx_clk_sel                               : string  := "pcs_rx_clk";
		hssi_rx_pld_pcs_interface_pcs_rx_hip_clk_en                            : string  := "hip_rx_enable";
		hssi_rx_pld_pcs_interface_pcs_rx_output_sel                            : string  := "teng_output";
		hssi_rx_pld_pcs_interface_pcs_rx_clk_out_sel                           : string  := "eightg_clk_out";
		hssi_common_pld_pcs_interface_dft_clk_out_en                           : string  := "dft_clk_out_disable";
		hssi_common_pld_pcs_interface_dft_clk_out_sel                          : string  := "teng_rx_dft_clk";
		hssi_common_pld_pcs_interface_hrdrstctrl_en                            : string  := "hrst_en";
		hssi_common_pld_pcs_interface_pcs_testbus_block_sel                    : string  := "pma_if";
		hssi_rx_pcs_pma_interface_block_sel                                    : string  := "eight_g_pcs";
		hssi_rx_pcs_pma_interface_channel_operation_mode                       : string  := "tx_rx_pair_enabled";
		hssi_rx_pcs_pma_interface_clkslip_sel                                  : string  := "pld";
		hssi_rx_pcs_pma_interface_lpbk_en                                      : string  := "disable";
		hssi_rx_pcs_pma_interface_master_clk_sel                               : string  := "master_rx_pma_clk";
		hssi_rx_pcs_pma_interface_pldif_datawidth_mode                         : string  := "pldif_data_10bit";
		hssi_rx_pcs_pma_interface_pma_dw_rx                                    : string  := "pcie_g3_dyn_dw_rx";
		hssi_rx_pcs_pma_interface_pma_if_dft_en                                : string  := "dft_dis";
		hssi_rx_pcs_pma_interface_pma_if_dft_val                               : string  := "dft_0";
		hssi_rx_pcs_pma_interface_prbs_clken                                   : string  := "prbs_clk_dis";
		hssi_rx_pcs_pma_interface_prbs_ver                                     : string  := "prbs_off";
		hssi_rx_pcs_pma_interface_prbs9_dwidth                                 : string  := "prbs9_64b";
		hssi_rx_pcs_pma_interface_prot_mode_rx                                 : string  := "eightg_g3_pcie_g3_hip_mode_rx";
		hssi_rx_pcs_pma_interface_rx_dyn_polarity_inversion                    : string  := "rx_dyn_polinv_dis";
		hssi_rx_pcs_pma_interface_rx_lpbk_en                                   : string  := "lpbk_dis";
		hssi_rx_pcs_pma_interface_rx_prbs_force_signal_ok                      : string  := "force_sig_ok";
		hssi_rx_pcs_pma_interface_rx_prbs_mask                                 : string  := "prbsmask128";
		hssi_rx_pcs_pma_interface_rx_prbs_mode                                 : string  := "teng_mode";
		hssi_rx_pcs_pma_interface_rx_signalok_signaldet_sel                    : string  := "sel_sig_det";
		hssi_rx_pcs_pma_interface_rx_static_polarity_inversion                 : string  := "rx_stat_polinv_dis";
		hssi_rx_pcs_pma_interface_rx_uhsif_lpbk_en                             : string  := "uhsif_lpbk_dis";
		hssi_rx_pcs_pma_interface_sup_mode                                     : string  := "user_mode";
		hssi_tx_pcs_pma_interface_bypass_pma_txelecidle                        : string  := "false";
		hssi_tx_pcs_pma_interface_channel_operation_mode                       : string  := "tx_rx_pair_enabled";
		hssi_tx_pcs_pma_interface_lpbk_en                                      : string  := "disable";
		hssi_tx_pcs_pma_interface_master_clk_sel                               : string  := "master_tx_pma_clk";
		hssi_tx_pcs_pma_interface_pcie_sub_prot_mode_tx                        : string  := "pipe_g3";
		hssi_tx_pcs_pma_interface_pldif_datawidth_mode                         : string  := "pldif_data_10bit";
		hssi_tx_pcs_pma_interface_pma_dw_tx                                    : string  := "pcie_g3_dyn_dw_tx";
		hssi_tx_pcs_pma_interface_pma_if_dft_en                                : string  := "dft_dis";
		hssi_tx_pcs_pma_interface_pmagate_en                                   : string  := "pmagate_dis";
		hssi_tx_pcs_pma_interface_prbs_clken                                   : string  := "prbs_clk_dis";
		hssi_tx_pcs_pma_interface_prbs_gen_pat                                 : string  := "prbs_gen_dis";
		hssi_tx_pcs_pma_interface_prbs9_dwidth                                 : string  := "prbs9_64b";
		hssi_tx_pcs_pma_interface_prot_mode_tx                                 : string  := "eightg_g3_pcie_g3_hip_mode_tx";
		hssi_tx_pcs_pma_interface_sq_wave_num                                  : string  := "sq_wave_default";
		hssi_tx_pcs_pma_interface_sqwgen_clken                                 : string  := "sqwgen_clk_dis";
		hssi_tx_pcs_pma_interface_sup_mode                                     : string  := "user_mode";
		hssi_tx_pcs_pma_interface_tx_dyn_polarity_inversion                    : string  := "tx_dyn_polinv_dis";
		hssi_tx_pcs_pma_interface_tx_pma_data_sel                              : string  := "pcie_gen3";
		hssi_tx_pcs_pma_interface_tx_static_polarity_inversion                 : string  := "tx_stat_polinv_dis";
		hssi_tx_pcs_pma_interface_uhsif_cnt_step_filt_before_lock              : string  := "uhsif_filt_stepsz_b4lock_2";
		hssi_tx_pcs_pma_interface_uhsif_cnt_thresh_filt_after_lock_value       : integer := 0;
		hssi_tx_pcs_pma_interface_uhsif_cnt_thresh_filt_before_lock            : string  := "uhsif_filt_cntthr_b4lock_8";
		hssi_tx_pcs_pma_interface_uhsif_dcn_test_update_period                 : string  := "uhsif_dcn_test_period_4";
		hssi_tx_pcs_pma_interface_uhsif_dcn_testmode_enable                    : string  := "uhsif_dcn_test_mode_disable";
		hssi_tx_pcs_pma_interface_uhsif_dead_zone_count_thresh                 : string  := "uhsif_dzt_cnt_thr_2";
		hssi_tx_pcs_pma_interface_uhsif_dead_zone_detection_enable             : string  := "uhsif_dzt_disable";
		hssi_tx_pcs_pma_interface_uhsif_dead_zone_obser_window                 : string  := "uhsif_dzt_obr_win_16";
		hssi_tx_pcs_pma_interface_uhsif_dead_zone_skip_size                    : string  := "uhsif_dzt_skipsz_4";
		hssi_tx_pcs_pma_interface_uhsif_delay_cell_index_sel                   : string  := "uhsif_index_cram";
		hssi_tx_pcs_pma_interface_uhsif_delay_cell_margin                      : string  := "uhsif_dcn_margin_2";
		hssi_tx_pcs_pma_interface_uhsif_delay_cell_static_index_value          : integer := 0;
		hssi_tx_pcs_pma_interface_uhsif_dft_dead_zone_control                  : string  := "uhsif_dft_dz_det_val_0";
		hssi_tx_pcs_pma_interface_uhsif_dft_up_filt_control                    : string  := "uhsif_dft_up_val_0";
		hssi_tx_pcs_pma_interface_uhsif_enable                                 : string  := "uhsif_disable";
		hssi_tx_pcs_pma_interface_uhsif_lock_det_segsz_after_lock              : string  := "uhsif_lkd_segsz_aflock_512";
		hssi_tx_pcs_pma_interface_uhsif_lock_det_segsz_before_lock             : string  := "uhsif_lkd_segsz_b4lock_16";
		hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_cnt_after_lock_value   : integer := 0;
		hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_cnt_before_lock_value  : integer := 0;
		hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_diff_after_lock_value  : integer := 0;
		hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_diff_before_lock_value : integer := 0;
		hssi_common_pcs_pma_interface_asn_clk_enable                           : string  := "true";
		hssi_common_pcs_pma_interface_asn_enable                               : string  := "en_asn";
		hssi_common_pcs_pma_interface_block_sel                                : string  := "pcie_gen3";
		hssi_common_pcs_pma_interface_bypass_early_eios                        : string  := "false";
		hssi_common_pcs_pma_interface_bypass_pcie_switch                       : string  := "false";
		hssi_common_pcs_pma_interface_bypass_pma_ltr                           : string  := "false";
		hssi_common_pcs_pma_interface_bypass_pma_sw_done                       : string  := "true";
		hssi_common_pcs_pma_interface_bypass_ppm_lock                          : string  := "false";
		hssi_common_pcs_pma_interface_bypass_send_syncp_fbkp                   : string  := "true";
		hssi_common_pcs_pma_interface_bypass_txdetectrx                        : string  := "false";
		hssi_common_pcs_pma_interface_cdr_control                              : string  := "en_cdr_ctrl";
		hssi_common_pcs_pma_interface_cid_enable                               : string  := "en_cid_mode";
		hssi_common_pcs_pma_interface_data_mask_count                          : integer := 2500;
		hssi_common_pcs_pma_interface_data_mask_count_multi                    : integer := 1;
		hssi_common_pcs_pma_interface_dft_observation_clock_selection          : string  := "dft_clk_obsrv_tx0";
		hssi_common_pcs_pma_interface_early_eios_counter                       : integer := 50;
		hssi_common_pcs_pma_interface_force_freqdet                            : string  := "force_freqdet_dis";
		hssi_common_pcs_pma_interface_free_run_clk_enable                      : string  := "true";
		hssi_common_pcs_pma_interface_ignore_sigdet_g23                        : string  := "false";
		hssi_common_pcs_pma_interface_pc_en_counter                            : integer := 55;
		hssi_common_pcs_pma_interface_pc_rst_counter                           : integer := 23;
		hssi_common_pcs_pma_interface_pcie_hip_mode                            : string  := "hip_enable";
		hssi_common_pcs_pma_interface_ph_fifo_reg_mode                         : string  := "phfifo_reg_mode_en";
		hssi_common_pcs_pma_interface_phfifo_flush_wait                        : integer := 36;
		hssi_common_pcs_pma_interface_pipe_if_g3pcs                            : string  := "pipe_if_g3pcs";
		hssi_common_pcs_pma_interface_pma_done_counter                         : integer := 175000;
		hssi_common_pcs_pma_interface_pma_if_dft_en                            : string  := "dft_dis";
		hssi_common_pcs_pma_interface_pma_if_dft_val                           : string  := "dft_0";
		hssi_common_pcs_pma_interface_ppm_cnt_rst                              : string  := "ppm_cnt_rst_dis";
		hssi_common_pcs_pma_interface_ppm_deassert_early                       : string  := "deassert_early_en";
		hssi_common_pcs_pma_interface_ppm_gen1_2_cnt                           : string  := "cnt_32k";
		hssi_common_pcs_pma_interface_ppm_post_eidle_delay                     : string  := "cnt_200_cycles";
		hssi_common_pcs_pma_interface_ppmsel                                   : string  := "ppmsel_300";
		hssi_common_pcs_pma_interface_prot_mode                                : string  := "pipe_g3";
		hssi_common_pcs_pma_interface_rxvalid_mask                             : string  := "rxvalid_mask_en";
		hssi_common_pcs_pma_interface_sigdet_wait_counter                      : integer := 2500;
		hssi_common_pcs_pma_interface_sigdet_wait_counter_multi                : integer := 1;
		hssi_common_pcs_pma_interface_sim_mode                                 : string  := "disable";
		hssi_common_pcs_pma_interface_spd_chg_rst_wait_cnt_en                  : string  := "true";
		hssi_common_pcs_pma_interface_sup_mode                                 : string  := "user_mode";
		hssi_common_pcs_pma_interface_testout_sel                              : string  := "asn_test";
		hssi_common_pcs_pma_interface_wait_clk_on_off_timer                    : integer := 0;
		hssi_common_pcs_pma_interface_wait_pipe_synchronizing                  : integer := 23;
		hssi_common_pcs_pma_interface_wait_send_syncp_fbkp                     : integer := 250;
		hssi_common_pcs_pma_interface_ppm_det_buckets                          : string  := "ppm_300_bucket";
		hssi_fifo_rx_pcs_double_read_mode                                      : string  := "double_read_dis";
		hssi_fifo_rx_pcs_prot_mode                                             : string  := "non_teng_mode";
		hssi_fifo_tx_pcs_double_write_mode                                     : string  := "double_write_dis";
		hssi_fifo_tx_pcs_prot_mode                                             : string  := "non_teng_mode";
		hssi_pipe_gen3_bypass_rx_detection_enable                              : string  := "false";
		hssi_pipe_gen3_bypass_rx_preset                                        : integer := 0;
		hssi_pipe_gen3_bypass_rx_preset_enable                                 : string  := "false";
		hssi_pipe_gen3_bypass_tx_coefficent                                    : integer := 0;
		hssi_pipe_gen3_bypass_tx_coefficent_enable                             : string  := "false";
		hssi_pipe_gen3_elecidle_delay_g3                                       : integer := 6;
		hssi_pipe_gen3_ind_error_reporting                                     : string  := "dis_ind_error_reporting";
		hssi_pipe_gen3_mode                                                    : string  := "pipe_g3";
		hssi_pipe_gen3_phy_status_delay_g12                                    : integer := 5;
		hssi_pipe_gen3_phy_status_delay_g3                                     : integer := 5;
		hssi_pipe_gen3_phystatus_rst_toggle_g12                                : string  := "dis_phystatus_rst_toggle";
		hssi_pipe_gen3_phystatus_rst_toggle_g3                                 : string  := "dis_phystatus_rst_toggle_g3";
		hssi_pipe_gen3_rate_match_pad_insertion                                : string  := "dis_rm_fifo_pad_ins";
		hssi_pipe_gen3_sup_mode                                                : string  := "user_mode";
		hssi_pipe_gen3_test_out_sel                                            : string  := "disable_test_out";
		hssi_pipe_gen1_2_elec_idle_delay_val                                   : integer := 3;
		hssi_pipe_gen1_2_error_replace_pad                                     : string  := "replace_edb";
		hssi_pipe_gen1_2_hip_mode                                              : string  := "en_hip";
		hssi_pipe_gen1_2_ind_error_reporting                                   : string  := "dis_ind_error_reporting";
		hssi_pipe_gen1_2_phystatus_delay_val                                   : integer := 0;
		hssi_pipe_gen1_2_phystatus_rst_toggle                                  : string  := "dis_phystatus_rst_toggle";
		hssi_pipe_gen1_2_pipe_byte_de_serializer_en                            : string  := "dont_care_bds";
		hssi_pipe_gen1_2_prot_mode                                             : string  := "pipe_g3";
		hssi_pipe_gen1_2_rx_pipe_enable                                        : string  := "en_pipe3_rx";
		hssi_pipe_gen1_2_rxdetect_bypass                                       : string  := "dis_rxdetect_bypass";
		hssi_pipe_gen1_2_sup_mode                                              : string  := "user_mode";
		hssi_pipe_gen1_2_tx_pipe_enable                                        : string  := "en_pipe3_tx";
		hssi_pipe_gen1_2_txswing                                               : string  := "dis_txswing";
		pma_adapt_adp_1s_ctle_bypass                                           : string  := "radp_1s_ctle_bypass_0";
		pma_adapt_adp_4s_ctle_bypass                                           : string  := "radp_4s_ctle_bypass_0";
		pma_adapt_adp_ctle_en                                                  : string  := "radp_ctle_enable";
		pma_adapt_adp_dfe_fltap_bypass                                         : string  := "radp_dfe_fltap_bypass_1";
		pma_adapt_adp_dfe_fltap_en                                             : string  := "radp_dfe_fltap_disable";
		pma_adapt_adp_dfe_fxtap_bypass                                         : string  := "radp_dfe_fxtap_bypass_1";
		pma_adapt_adp_dfe_fxtap_en                                             : string  := "radp_dfe_fxtap_disable";
		pma_adapt_adp_dfe_fxtap_hold_en                                        : string  := "radp_dfe_fxtap_hold";
		pma_adapt_adp_dfe_mode                                                 : string  := "radp_dfe_mode_4";
		pma_adapt_adp_vga_bypass                                               : string  := "radp_vga_bypass_1";
		pma_adapt_adp_vga_en                                                   : string  := "radp_vga_enable";
		pma_adapt_adp_vref_bypass                                              : string  := "radp_vref_bypass_0";
		pma_adapt_adp_vref_en                                                  : string  := "radp_vref_enable";
		pma_adapt_datarate                                                     : string  := "5000000000 bps";
		pma_adapt_prot_mode                                                    : string  := "pcie_gen3_rx";
		pma_adapt_sup_mode                                                     : string  := "user_mode";
		pma_adapt_adp_ctle_adapt_cycle_window                                  : string  := "radp_ctle_adapt_cycle_window_7";
		pma_adapt_odi_dfe_spec_en                                              : string  := "rodi_dfe_spec_en_0";
		pma_adapt_adapt_mode                                                   : string  := "ctle";
		pma_adapt_adp_onetime_dfe                                              : string  := "radp_onetime_dfe_0";
		pma_adapt_adp_mode                                                     : string  := "radp_mode_8";
		pma_cdr_refclk_powerdown_mode                                          : string  := "powerup";
		pma_cdr_refclk_refclk_select                                           : string  := "ref_iqclk0";
		pma_cgb_bitslip_enable                                                 : string  := "disable_bitslip";
		pma_cgb_bonding_reset_enable                                           : string  := "disallow_bonding_reset";
		pma_cgb_datarate                                                       : string  := "5000000000 bps";
		pma_cgb_pcie_gen3_bitwidth                                             : string  := "pciegen3_wide";
		pma_cgb_prot_mode                                                      : string  := "pcie_gen3_tx";
		pma_cgb_ser_mode                                                       : string  := "ten_bit";
		pma_cgb_sup_mode                                                       : string  := "user_mode";
		pma_cgb_x1_div_m_sel                                                   : string  := "divbypass";
		pma_cgb_input_select_x1                                                : string  := "unused";
		pma_cgb_input_select_gen3                                              : string  := "unused";
		pma_cgb_input_select_xn                                                : string  := "sel_x6_dn";
		pma_cgb_tx_ucontrol_en                                                 : string  := "disable";
		pma_rx_dfe_datarate                                                    : string  := "5000000000 bps";
		pma_rx_dfe_dft_en                                                      : string  := "dft_enalbe";
		pma_rx_dfe_pdb                                                         : string  := "dfe_enable";
		pma_rx_dfe_pdb_fixedtap                                                : string  := "fixtap_dfe_enable";
		pma_rx_dfe_pdb_floattap                                                : string  := "floattap_dfe_powerdown";
		pma_rx_dfe_pdb_fxtap4t7                                                : string  := "fxtap4t7_powerdown";
		pma_rx_dfe_sup_mode                                                    : string  := "user_mode";
		pma_rx_dfe_prot_mode                                                   : string  := "pcie_gen3_rx";
		pma_rx_odi_datarate                                                    : string  := "5000000000 bps";
		pma_rx_odi_sup_mode                                                    : string  := "user_mode";
		pma_rx_odi_step_ctrl_sel                                               : string  := "dprio_mode";
		pma_rx_odi_prot_mode                                                   : string  := "pcie_gen3_rx";
		pma_rx_buf_bypass_eqz_stages_234                                       : string  := "bypass_off";
		pma_rx_buf_datarate                                                    : string  := "5000000000 bps";
		pma_rx_buf_diag_lp_en                                                  : string  := "dlp_off";
		pma_rx_buf_prot_mode                                                   : string  := "pcie_gen3_rx";
		pma_rx_buf_qpi_enable                                                  : string  := "non_qpi_mode";
		pma_rx_buf_rx_refclk_divider                                           : string  := "bypass_divider";
		pma_rx_buf_sup_mode                                                    : string  := "user_mode";
		pma_rx_buf_loopback_modes                                              : string  := "lpbk_disable";
		pma_rx_buf_refclk_en                                                   : string  := "disable";
		pma_rx_buf_pm_tx_rx_pcie_gen                                           : string  := "non_pcie";
		pma_rx_buf_pm_tx_rx_pcie_gen_bitwidth                                  : string  := "pcie_gen3_32b";
		pma_rx_buf_pm_tx_rx_cvp_mode                                           : string  := "cvp_off";
		pma_rx_buf_xrx_path_uc_cal_enable                                      : string  := "rx_cal_off";
		pma_rx_buf_xrx_path_sup_mode                                           : string  := "user_mode";
		pma_rx_buf_xrx_path_prot_mode                                          : string  := "pcie_gen3_rx";
		pma_rx_buf_xrx_path_datarate                                           : string  := "5000000000 bps";
		pma_rx_buf_xrx_path_datawidth                                          : integer := 10;
		pma_rx_buf_xrx_path_pma_rx_divclk_hz                                   : string  := "500000000";
		pma_rx_sd_prot_mode                                                    : string  := "pcie_gen3_rx";
		pma_rx_sd_sd_output_off                                                : integer := 13;
		pma_rx_sd_sd_output_on                                                 : integer := 1;
		pma_rx_sd_sd_pdb                                                       : string  := "sd_on";
		pma_rx_sd_sup_mode                                                     : string  := "user_mode";
		pma_tx_ser_ser_clk_divtx_user_sel                                      : string  := "divtx_user_off";
		pma_tx_ser_sup_mode                                                    : string  := "user_mode";
		pma_tx_ser_prot_mode                                                   : string  := "pcie_gen3_tx";
		pma_tx_buf_datarate                                                    : string  := "5000000000 bps";
		pma_tx_buf_prot_mode                                                   : string  := "pcie_gen3_tx";
		pma_tx_buf_rx_det                                                      : string  := "mode_0";
		pma_tx_buf_rx_det_output_sel                                           : string  := "rx_det_pcie_out";
		pma_tx_buf_rx_det_pdb                                                  : string  := "rx_det_on";
		pma_tx_buf_sup_mode                                                    : string  := "user_mode";
		pma_tx_buf_user_fir_coeff_ctrl_sel                                     : string  := "dynamic_ctl";
		pma_tx_buf_xtx_path_prot_mode                                          : string  := "pcie_gen3_tx";
		pma_tx_buf_xtx_path_datarate                                           : string  := "5000000000 bps";
		pma_tx_buf_xtx_path_datawidth                                          : integer := 10;
		pma_tx_buf_xtx_path_clock_divider_ratio                                : integer := 1;
		pma_tx_buf_xtx_path_pma_tx_divclk_hz                                   : string  := "500000000";
		pma_tx_buf_xtx_path_tx_pll_clk_hz                                      : string  := "2500000000";
		pma_tx_buf_xtx_path_sup_mode                                           : string  := "user_mode";
		cdr_pll_pma_width                                                      : integer := 10;
		cdr_pll_cgb_div                                                        : integer := 1;
		cdr_pll_is_cascaded_pll                                                : string  := "false";
		cdr_pll_datarate                                                       : string  := "5000000000 bps";
		cdr_pll_lpd_counter                                                    : integer := 2;
		cdr_pll_lpfd_counter                                                   : integer := 1;
		cdr_pll_n_counter_scratch                                              : integer := 1;
		cdr_pll_output_clock_frequency                                         : string  := "2500000000 Hz";
		cdr_pll_reference_clock_frequency                                      : string  := "100000000 hz";
		cdr_pll_set_cdr_vco_speed                                              : integer := 2;
		cdr_pll_set_cdr_vco_speed_fix                                          : integer := 117;
		cdr_pll_vco_freq                                                       : string  := "5000000000 Hz";
		cdr_pll_atb_select_control                                             : string  := "atb_off";
		cdr_pll_auto_reset_on                                                  : string  := "auto_reset_off";
		cdr_pll_bbpd_data_pattern_filter_select                                : string  := "bbpd_data_pat_off";
		cdr_pll_bw_sel                                                         : string  := "medium";
		cdr_pll_cdr_odi_select                                                 : string  := "sel_cdr";
		cdr_pll_cdr_phaselock_mode                                             : string  := "no_ignore_lock";
		cdr_pll_cdr_powerdown_mode                                             : string  := "power_up";
		cdr_pll_chgpmp_current_pd                                              : string  := "cp_current_pd_setting0";
		cdr_pll_chgpmp_current_pfd                                             : string  := "cp_current_pfd_setting1";
		cdr_pll_chgpmp_replicate                                               : string  := "false";
		cdr_pll_chgpmp_testmode                                                : string  := "cp_test_disable";
		cdr_pll_clklow_mux_select                                              : string  := "clklow_mux_cdr_fbclk";
		cdr_pll_diag_loopback_enable                                           : string  := "false";
		cdr_pll_disable_up_dn                                                  : string  := "true";
		cdr_pll_fref_clklow_div                                                : integer := 1;
		cdr_pll_fref_mux_select                                                : string  := "fref_mux_cdr_refclk";
		cdr_pll_gpon_lck2ref_control                                           : string  := "gpon_lck2ref_off";
		cdr_pll_initial_settings                                               : string  := "true";
		cdr_pll_lck2ref_delay_control                                          : string  := "lck2ref_delay_2";
		cdr_pll_lf_resistor_pd                                                 : string  := "lf_pd_setting3";
		cdr_pll_lf_resistor_pfd                                                : string  := "lf_pfd_setting3";
		cdr_pll_lf_ripple_cap                                                  : string  := "lf_no_ripple";
		cdr_pll_loop_filter_bias_select                                        : string  := "lpflt_bias_7";
		cdr_pll_loopback_mode                                                  : string  := "loopback_disabled";
		cdr_pll_ltd_ltr_micro_controller_select                                : string  := "ltd_ltr_pcs";
		cdr_pll_m_counter                                                      : integer := 50;
		cdr_pll_n_counter                                                      : integer := 1;
		cdr_pll_pd_fastlock_mode                                               : string  := "false";
		cdr_pll_pd_l_counter                                                   : integer := 2;
		cdr_pll_pfd_l_counter                                                  : integer := 1;
		cdr_pll_primary_use                                                    : string  := "cdr";
		cdr_pll_prot_mode                                                      : string  := "pcie_gen3_rx";
		cdr_pll_reverse_serial_loopback                                        : string  := "no_loopback";
		cdr_pll_set_cdr_v2i_enable                                             : string  := "true";
		cdr_pll_set_cdr_vco_reset                                              : string  := "false";
		cdr_pll_set_cdr_vco_speed_pciegen3                                     : string  := "cdr_vco_max_speedbin_pciegen3";
		cdr_pll_sup_mode                                                       : string  := "user_mode";
		cdr_pll_tx_pll_prot_mode                                               : string  := "txpll_unused";
		cdr_pll_txpll_hclk_driver_enable                                       : string  := "false";
		cdr_pll_vco_overrange_voltage                                          : string  := "vco_overrange_off";
		cdr_pll_vco_underrange_voltage                                         : string  := "vco_underange_off";
		cdr_pll_fb_select                                                      : string  := "direct_fb";
		cdr_pll_uc_ro_cal                                                      : string  := "uc_ro_cal_on";
		cdr_pll_iqclk_mux_sel                                                  : string  := "power_down";
		cdr_pll_pcie_gen                                                       : string  := "pcie_gen3_100mhzref";
		cdr_pll_set_cdr_input_freq_range                                       : integer := 0;
		cdr_pll_chgpmp_current_dn_trim                                         : string  := "cp_current_trimming_dn_setting0";
		cdr_pll_chgpmp_up_pd_trim_double                                       : string  := "normal_up_trim_current";
		cdr_pll_chgpmp_current_up_pd                                           : string  := "cp_current_pd_up_setting4";
		cdr_pll_chgpmp_current_up_trim                                         : string  := "cp_current_trimming_up_setting0";
		cdr_pll_chgpmp_dn_pd_trim_double                                       : string  := "normal_dn_trim_current";
		cdr_pll_cal_vco_count_length                                           : string  := "sel_8b_count";
		cdr_pll_chgpmp_current_dn_pd                                           : string  := "cp_current_pd_dn_setting4";
		pma_rx_deser_clkdiv_source                                             : string  := "vco_bypass_normal";
		pma_rx_deser_clkdivrx_user_mode                                        : string  := "clkdivrx_user_disabled";
		pma_rx_deser_datarate                                                  : string  := "5000000000 bps";
		pma_rx_deser_deser_factor                                              : integer := 10;
		pma_rx_deser_force_clkdiv_for_testing                                  : string  := "normal_clkdiv";
		pma_rx_deser_sdclk_enable                                              : string  := "true";
		pma_rx_deser_sup_mode                                                  : string  := "user_mode";
		pma_rx_deser_rst_n_adapt_odi                                           : string  := "no_rst_adapt_odi";
		pma_rx_deser_bitslip_bypass                                            : string  := "bs_bypass_yes";
		pma_rx_deser_prot_mode                                                 : string  := "pcie_gen3_rx";
		pma_rx_deser_pcie_gen                                                  : string  := "pcie_gen3_100mhzref";
		pma_rx_deser_pcie_gen_bitwidth                                         : string  := "pcie_gen3_32b"
	);
	port (
		hip_pipe_pclk         : out std_logic;                                          --         hip_pipe_pclk.hip_pipe_pclk
		hip_fixedclk          : out std_logic;                                          --          hip_fixedclk.hip_fixedclk
		ltssm_detect_quiet    : in  std_logic                       := '0';             --    ltssm_detect_quiet.ltssm_detect_quiet
		ltssm_detect_active   : in  std_logic                       := '0';             --   ltssm_detect_active.ltssm_detect_active
		ltssm_rcvr_phase_two  : in  std_logic                       := '0';             --  ltssm_rcvr_phase_two.ltssm_rcvr_phase_two
		hip_reduce_counters   : in  std_logic                       := '0';             --   hip_reduce_counters.hip_reduce_counters
		pcie_rate             : in  std_logic_vector(1 downto 0)    := (others => '0'); --             pcie_rate.pcie_rate
		pipe_rate             : in  std_logic_vector(15 downto 0)   := (others => '0'); --             pipe_rate.pipe_rate
		pipe_sw_done          : in  std_logic_vector(1 downto 0)    := (others => '0'); --          pipe_sw_done.pipe_sw_done
		pipe_sw               : out std_logic_vector(1 downto 0);                       --               pipe_sw.pipe_sw
		tx_analogreset        : in  std_logic_vector(7 downto 0)    := (others => '0'); --        tx_analogreset.tx_analogreset
		tx_digitalreset       : in  std_logic_vector(7 downto 0)    := (others => '0'); --       tx_digitalreset.tx_digitalreset
		rx_analogreset        : in  std_logic_vector(7 downto 0)    := (others => '0'); --        rx_analogreset.rx_analogreset
		rx_digitalreset       : in  std_logic_vector(7 downto 0)    := (others => '0'); --       rx_digitalreset.rx_digitalreset
		tx_cal_busy           : out std_logic_vector(7 downto 0);                       --           tx_cal_busy.tx_cal_busy
		rx_cal_busy           : out std_logic_vector(7 downto 0);                       --           rx_cal_busy.rx_cal_busy
		tx_bonding_clocks     : in  std_logic_vector(47 downto 0)   := (others => '0'); --     tx_bonding_clocks.clk
		rx_cdr_refclk0        : in  std_logic                       := '0';             --        rx_cdr_refclk0.clk
		tx_serial_data        : out std_logic_vector(7 downto 0);                       --        tx_serial_data.tx_serial_data
		rx_serial_data        : in  std_logic_vector(7 downto 0)    := (others => '0'); --        rx_serial_data.rx_serial_data
		rx_set_locktodata     : in  std_logic_vector(7 downto 0)    := (others => '0'); --     rx_set_locktodata.rx_set_locktodata
		rx_set_locktoref      : in  std_logic_vector(7 downto 0)    := (others => '0'); --      rx_set_locktoref.rx_set_locktoref
		rx_is_lockedtoref     : out std_logic_vector(7 downto 0);                       --     rx_is_lockedtoref.rx_is_lockedtoref
		rx_is_lockedtodata    : out std_logic_vector(7 downto 0);                       --    rx_is_lockedtodata.rx_is_lockedtodata
		rx_clkout             : out std_logic_vector(7 downto 0);                       --             rx_clkout.clk
		rx_parallel_data      : out std_logic_vector(1023 downto 0);                    --      rx_parallel_data.rx_parallel_data
		rx_polinv             : in  std_logic_vector(7 downto 0)    := (others => '0'); --             rx_polinv.rx_polinv
		tx_hip_data           : in  std_logic_vector(511 downto 0)  := (others => '0'); --           tx_hip_data.tx_hip_data
		rx_hip_data           : out std_logic_vector(407 downto 0);                     --           rx_hip_data.rx_hip_data
		hip_frefclk           : out std_logic_vector(7 downto 0);                       --           hip_frefclk.hip_frefclk
		hip_ctrl              : out std_logic_vector(63 downto 0);                      --              hip_ctrl.hip_ctrl
		hip_cal_done          : out std_logic_vector(7 downto 0);                       --          hip_cal_done.hip_cal_done
		pipe_hclk_in          : in  std_logic                       := '0';             --          pipe_hclk_in.clk
		pipe_g3_txdeemph      : in  std_logic_vector(143 downto 0)  := (others => '0'); --      pipe_g3_txdeemph.pipe_g3_txdeemph
		pipe_g3_rxpresethint  : in  std_logic_vector(23 downto 0)   := (others => '0'); --  pipe_g3_rxpresethint.pipe_g3_rxpresethint
		pipe_rx_eidleinfersel : in  std_logic_vector(23 downto 0)   := (others => '0'); -- pipe_rx_eidleinfersel.pipe_rx_eidleinfersel
		pipe_rx_elecidle      : out std_logic_vector(7 downto 0);                       --      pipe_rx_elecidle.pipe_rx_elecidle
		pipe_rx_polarity      : in  std_logic_vector(7 downto 0)    := (others => '0'); --      pipe_rx_polarity.pipe_rx_polarity
		reconfig_clk          : in  std_logic_vector(0 downto 0)    := (others => '0'); --          reconfig_clk.clk
		reconfig_reset        : in  std_logic_vector(0 downto 0)    := (others => '0'); --        reconfig_reset.reset
		reconfig_write        : in  std_logic_vector(0 downto 0)    := (others => '0'); --         reconfig_avmm.write
		reconfig_read         : in  std_logic_vector(0 downto 0)    := (others => '0'); --                      .read
		reconfig_address      : in  std_logic_vector(12 downto 0)   := (others => '0'); --                      .address
		reconfig_writedata    : in  std_logic_vector(31 downto 0)   := (others => '0'); --                      .writedata
		reconfig_readdata     : out std_logic_vector(31 downto 0);                      --                      .readdata
		reconfig_waitrequest  : out std_logic_vector(0 downto 0)                        --                      .waitrequest
	);
end entity phy_g3x8;

architecture rtl of phy_g3x8 is
begin

	device_revision_check : if device_revision /= "20nm3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	duplex_mode_check : if duplex_mode /= "duplex" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	channels_check : if channels /= 8 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	enable_calibration_check : if enable_calibration /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	enable_analog_resets_check : if enable_analog_resets /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	enable_reset_sequence_check : if enable_reset_sequence /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	bonded_mode_check : if bonded_mode /= "pma_pcs" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pcs_bonding_master_check : if pcs_bonding_master /= 3 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	plls_check : if plls /= 2 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	number_physical_bonding_clocks_check : if number_physical_bonding_clocks /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_refclk_cnt_check : if cdr_refclk_cnt /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	enable_hip_check : if enable_hip /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hip_cal_en_check : if hip_cal_en /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rcfg_enable_check : if rcfg_enable /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rcfg_shared_check : if rcfg_shared /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rcfg_jtag_enable_check : if rcfg_jtag_enable /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rcfg_separate_avmm_busy_check : if rcfg_separate_avmm_busy /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	adme_prot_mode_check : if adme_prot_mode /= "pipe_g3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	adme_data_rate_check : if adme_data_rate /= "5000000000" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	enable_pcie_dfe_ip_check : if enable_pcie_dfe_ip /= false generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	sim_reduced_counters_check : if sim_reduced_counters /= false generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	disable_continuous_dfe_check : if disable_continuous_dfe /= false generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	dbg_embedded_debug_enable_check : if dbg_embedded_debug_enable /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	dbg_capability_reg_enable_check : if dbg_capability_reg_enable /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	dbg_user_identifier_check : if dbg_user_identifier /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	dbg_stat_soft_logic_enable_check : if dbg_stat_soft_logic_enable /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	dbg_ctrl_soft_logic_enable_check : if dbg_ctrl_soft_logic_enable /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	dbg_prbs_soft_logic_enable_check : if dbg_prbs_soft_logic_enable /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	dbg_odi_soft_logic_enable_check : if dbg_odi_soft_logic_enable /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rcfg_emb_strm_enable_check : if rcfg_emb_strm_enable /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	rcfg_profile_cnt_check : if rcfg_profile_cnt /= 2 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_block_sync_check : if hssi_gen3_rx_pcs_block_sync /= "enable_block_sync" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_block_sync_sm_check : if hssi_gen3_rx_pcs_block_sync_sm /= "enable_blk_sync_sm" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_cdr_ctrl_force_unalgn_check : if hssi_gen3_rx_pcs_cdr_ctrl_force_unalgn /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_lpbk_force_check : if hssi_gen3_rx_pcs_lpbk_force /= "lpbk_frce_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_mode_check : if hssi_gen3_rx_pcs_mode /= "gen3_func" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_rate_match_fifo_check : if hssi_gen3_rx_pcs_rate_match_fifo /= "enable_rm_fifo_600ppm" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_rate_match_fifo_latency_check : if hssi_gen3_rx_pcs_rate_match_fifo_latency /= "regular_latency" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_reverse_lpbk_check : if hssi_gen3_rx_pcs_reverse_lpbk /= "rev_lpbk_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_rx_b4gb_par_lpbk_check : if hssi_gen3_rx_pcs_rx_b4gb_par_lpbk /= "b4gb_par_lpbk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_rx_force_balign_check : if hssi_gen3_rx_pcs_rx_force_balign /= "en_force_balign" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_rx_ins_del_one_skip_check : if hssi_gen3_rx_pcs_rx_ins_del_one_skip /= "ins_del_one_skip_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_rx_num_fixed_pat_check : if hssi_gen3_rx_pcs_rx_num_fixed_pat /= 8 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_rx_test_out_sel_check : if hssi_gen3_rx_pcs_rx_test_out_sel /= "rx_test_out0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_rx_pcs_sup_mode_check : if hssi_gen3_rx_pcs_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_tx_pcs_mode_check : if hssi_gen3_tx_pcs_mode /= "gen3_func" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_tx_pcs_reverse_lpbk_check : if hssi_gen3_tx_pcs_reverse_lpbk /= "rev_lpbk_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_tx_pcs_sup_mode_check : if hssi_gen3_tx_pcs_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_tx_pcs_tx_bitslip_check : if hssi_gen3_tx_pcs_tx_bitslip /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_gen3_tx_pcs_tx_gbox_byp_check : if hssi_gen3_tx_pcs_tx_gbox_byp /= "enable_gbox" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_blksync_cor_en_check : if hssi_krfec_rx_pcs_blksync_cor_en /= "detect" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_bypass_gb_check : if hssi_krfec_rx_pcs_bypass_gb /= "bypass_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_clr_ctrl_check : if hssi_krfec_rx_pcs_clr_ctrl /= "both_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_ctrl_bit_reverse_check : if hssi_krfec_rx_pcs_ctrl_bit_reverse /= "ctrl_bit_reverse_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_data_bit_reverse_check : if hssi_krfec_rx_pcs_data_bit_reverse /= "data_bit_reverse_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_dv_start_check : if hssi_krfec_rx_pcs_dv_start /= "with_blklock" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_err_mark_type_check : if hssi_krfec_rx_pcs_err_mark_type /= "err_mark_10g" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_error_marking_en_check : if hssi_krfec_rx_pcs_error_marking_en /= "err_mark_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_low_latency_en_check : if hssi_krfec_rx_pcs_low_latency_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_lpbk_mode_check : if hssi_krfec_rx_pcs_lpbk_mode /= "lpbk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_parity_invalid_enum_check : if hssi_krfec_rx_pcs_parity_invalid_enum /= 8 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_parity_valid_num_check : if hssi_krfec_rx_pcs_parity_valid_num /= 4 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_pipeln_blksync_check : if hssi_krfec_rx_pcs_pipeln_blksync /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_pipeln_descrm_check : if hssi_krfec_rx_pcs_pipeln_descrm /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_pipeln_errcorrect_check : if hssi_krfec_rx_pcs_pipeln_errcorrect /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_pipeln_errtrap_ind_check : if hssi_krfec_rx_pcs_pipeln_errtrap_ind /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_pipeln_errtrap_lfsr_check : if hssi_krfec_rx_pcs_pipeln_errtrap_lfsr /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_pipeln_errtrap_loc_check : if hssi_krfec_rx_pcs_pipeln_errtrap_loc /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_pipeln_errtrap_pat_check : if hssi_krfec_rx_pcs_pipeln_errtrap_pat /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_pipeln_gearbox_check : if hssi_krfec_rx_pcs_pipeln_gearbox /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_pipeln_syndrm_check : if hssi_krfec_rx_pcs_pipeln_syndrm /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_pipeln_trans_dec_check : if hssi_krfec_rx_pcs_pipeln_trans_dec /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_prot_mode_check : if hssi_krfec_rx_pcs_prot_mode /= "disable_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_receive_order_check : if hssi_krfec_rx_pcs_receive_order /= "receive_lsb" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_rx_testbus_sel_check : if hssi_krfec_rx_pcs_rx_testbus_sel /= "overall" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_signal_ok_en_check : if hssi_krfec_rx_pcs_signal_ok_en /= "sig_ok_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_rx_pcs_sup_mode_check : if hssi_krfec_rx_pcs_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_burst_err_check : if hssi_krfec_tx_pcs_burst_err /= "burst_err_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_burst_err_len_check : if hssi_krfec_tx_pcs_burst_err_len /= "burst_err_len1" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_ctrl_bit_reverse_check : if hssi_krfec_tx_pcs_ctrl_bit_reverse /= "ctrl_bit_reverse_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_data_bit_reverse_check : if hssi_krfec_tx_pcs_data_bit_reverse /= "data_bit_reverse_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_enc_frame_query_check : if hssi_krfec_tx_pcs_enc_frame_query /= "enc_query_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_low_latency_en_check : if hssi_krfec_tx_pcs_low_latency_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_pipeln_encoder_check : if hssi_krfec_tx_pcs_pipeln_encoder /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_pipeln_scrambler_check : if hssi_krfec_tx_pcs_pipeln_scrambler /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_prot_mode_check : if hssi_krfec_tx_pcs_prot_mode /= "disable_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_sup_mode_check : if hssi_krfec_tx_pcs_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_transcode_err_check : if hssi_krfec_tx_pcs_transcode_err /= "trans_err_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_transmit_order_check : if hssi_krfec_tx_pcs_transmit_order /= "transmit_lsb" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_krfec_tx_pcs_tx_testbus_sel_check : if hssi_krfec_tx_pcs_tx_testbus_sel /= "overall" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_align_del_check : if hssi_10g_rx_pcs_align_del /= "align_del_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_ber_bit_err_total_cnt_check : if hssi_10g_rx_pcs_ber_bit_err_total_cnt /= "bit_err_total_cnt_10g" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_ber_clken_check : if hssi_10g_rx_pcs_ber_clken /= "ber_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_ber_xus_timer_window_check : if hssi_10g_rx_pcs_ber_xus_timer_window /= 19530 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_bitslip_mode_check : if hssi_10g_rx_pcs_bitslip_mode /= "bitslip_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_blksync_bitslip_type_check : if hssi_10g_rx_pcs_blksync_bitslip_type /= "bitslip_comb" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_blksync_bitslip_wait_cnt_check : if hssi_10g_rx_pcs_blksync_bitslip_wait_cnt /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_blksync_bitslip_wait_type_check : if hssi_10g_rx_pcs_blksync_bitslip_wait_type /= "bitslip_cnt" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_blksync_bypass_check : if hssi_10g_rx_pcs_blksync_bypass /= "blksync_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_blksync_clken_check : if hssi_10g_rx_pcs_blksync_clken /= "blksync_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_blksync_enum_invalid_sh_cnt_check : if hssi_10g_rx_pcs_blksync_enum_invalid_sh_cnt /= "enum_invalid_sh_cnt_10g" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_blksync_knum_sh_cnt_postlock_check : if hssi_10g_rx_pcs_blksync_knum_sh_cnt_postlock /= "knum_sh_cnt_postlock_10g" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_blksync_knum_sh_cnt_prelock_check : if hssi_10g_rx_pcs_blksync_knum_sh_cnt_prelock /= "knum_sh_cnt_prelock_10g" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_blksync_pipeln_check : if hssi_10g_rx_pcs_blksync_pipeln /= "blksync_pipeln_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_clr_errblk_cnt_en_check : if hssi_10g_rx_pcs_clr_errblk_cnt_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_control_del_check : if hssi_10g_rx_pcs_control_del /= "control_del_none" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_crcchk_bypass_check : if hssi_10g_rx_pcs_crcchk_bypass /= "crcchk_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_crcchk_clken_check : if hssi_10g_rx_pcs_crcchk_clken /= "crcchk_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_crcchk_inv_check : if hssi_10g_rx_pcs_crcchk_inv /= "crcchk_inv_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_crcchk_pipeln_check : if hssi_10g_rx_pcs_crcchk_pipeln /= "crcchk_pipeln_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_crcflag_pipeln_check : if hssi_10g_rx_pcs_crcflag_pipeln /= "crcflag_pipeln_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_ctrl_bit_reverse_check : if hssi_10g_rx_pcs_ctrl_bit_reverse /= "ctrl_bit_reverse_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_data_bit_reverse_check : if hssi_10g_rx_pcs_data_bit_reverse /= "data_bit_reverse_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_dec_64b66b_rxsm_bypass_check : if hssi_10g_rx_pcs_dec_64b66b_rxsm_bypass /= "dec_64b66b_rxsm_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_dec64b66b_clken_check : if hssi_10g_rx_pcs_dec64b66b_clken /= "dec64b66b_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_descrm_bypass_check : if hssi_10g_rx_pcs_descrm_bypass /= "descrm_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_descrm_clken_check : if hssi_10g_rx_pcs_descrm_clken /= "descrm_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_descrm_mode_check : if hssi_10g_rx_pcs_descrm_mode /= "async" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_descrm_pipeln_check : if hssi_10g_rx_pcs_descrm_pipeln /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_dft_clk_out_sel_check : if hssi_10g_rx_pcs_dft_clk_out_sel /= "rx_master_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_dis_signal_ok_check : if hssi_10g_rx_pcs_dis_signal_ok /= "dis_signal_ok_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_dispchk_bypass_check : if hssi_10g_rx_pcs_dispchk_bypass /= "dispchk_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_empty_flag_type_check : if hssi_10g_rx_pcs_empty_flag_type /= "empty_rd_side" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_fast_path_check : if hssi_10g_rx_pcs_fast_path /= "fast_path_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_fec_clken_check : if hssi_10g_rx_pcs_fec_clken /= "fec_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_fec_enable_check : if hssi_10g_rx_pcs_fec_enable /= "fec_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_fifo_double_read_check : if hssi_10g_rx_pcs_fifo_double_read /= "fifo_double_read_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_fifo_stop_rd_check : if hssi_10g_rx_pcs_fifo_stop_rd /= "n_rd_empty" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_fifo_stop_wr_check : if hssi_10g_rx_pcs_fifo_stop_wr /= "n_wr_full" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_force_align_check : if hssi_10g_rx_pcs_force_align /= "force_align_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_frmsync_bypass_check : if hssi_10g_rx_pcs_frmsync_bypass /= "frmsync_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_frmsync_clken_check : if hssi_10g_rx_pcs_frmsync_clken /= "frmsync_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_frmsync_enum_scrm_check : if hssi_10g_rx_pcs_frmsync_enum_scrm /= "enum_scrm_default" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_frmsync_enum_sync_check : if hssi_10g_rx_pcs_frmsync_enum_sync /= "enum_sync_default" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_frmsync_flag_type_check : if hssi_10g_rx_pcs_frmsync_flag_type /= "location_only" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_frmsync_knum_sync_check : if hssi_10g_rx_pcs_frmsync_knum_sync /= "knum_sync_default" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_frmsync_mfrm_length_check : if hssi_10g_rx_pcs_frmsync_mfrm_length /= 2048 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_frmsync_pipeln_check : if hssi_10g_rx_pcs_frmsync_pipeln /= "frmsync_pipeln_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_full_flag_type_check : if hssi_10g_rx_pcs_full_flag_type /= "full_wr_side" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_gb_rx_idwidth_check : if hssi_10g_rx_pcs_gb_rx_idwidth /= "width_64" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_gb_rx_odwidth_check : if hssi_10g_rx_pcs_gb_rx_odwidth /= "width_64" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_gbexp_clken_check : if hssi_10g_rx_pcs_gbexp_clken /= "gbexp_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_low_latency_en_check : if hssi_10g_rx_pcs_low_latency_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_lpbk_mode_check : if hssi_10g_rx_pcs_lpbk_mode /= "lpbk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_master_clk_sel_check : if hssi_10g_rx_pcs_master_clk_sel /= "master_rx_pma_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_pempty_flag_type_check : if hssi_10g_rx_pcs_pempty_flag_type /= "pempty_rd_side" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_pfull_flag_type_check : if hssi_10g_rx_pcs_pfull_flag_type /= "pfull_wr_side" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_phcomp_rd_del_check : if hssi_10g_rx_pcs_phcomp_rd_del /= "phcomp_rd_del2" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_pld_if_type_check : if hssi_10g_rx_pcs_pld_if_type /= "fifo" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_prot_mode_check : if hssi_10g_rx_pcs_prot_mode /= "disable_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rand_clken_check : if hssi_10g_rx_pcs_rand_clken /= "rand_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rd_clk_sel_check : if hssi_10g_rx_pcs_rd_clk_sel /= "rd_rx_pld_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rdfifo_clken_check : if hssi_10g_rx_pcs_rdfifo_clken /= "rdfifo_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rx_fifo_write_ctrl_check : if hssi_10g_rx_pcs_rx_fifo_write_ctrl /= "blklock_stops" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rx_scrm_width_check : if hssi_10g_rx_pcs_rx_scrm_width /= "bit64" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rx_sh_location_check : if hssi_10g_rx_pcs_rx_sh_location /= "msb" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rx_signal_ok_sel_check : if hssi_10g_rx_pcs_rx_signal_ok_sel /= "synchronized_ver" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rx_sm_bypass_check : if hssi_10g_rx_pcs_rx_sm_bypass /= "rx_sm_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rx_sm_hiber_check : if hssi_10g_rx_pcs_rx_sm_hiber /= "rx_sm_hiber_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rx_sm_pipeln_check : if hssi_10g_rx_pcs_rx_sm_pipeln /= "rx_sm_pipeln_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rx_testbus_sel_check : if hssi_10g_rx_pcs_rx_testbus_sel /= "rx_fifo_testbus1" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rx_true_b2b_check : if hssi_10g_rx_pcs_rx_true_b2b /= "b2b" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rxfifo_empty_check : if hssi_10g_rx_pcs_rxfifo_empty /= "empty_default" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rxfifo_full_check : if hssi_10g_rx_pcs_rxfifo_full /= "full_default" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rxfifo_mode_check : if hssi_10g_rx_pcs_rxfifo_mode /= "phase_comp" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rxfifo_pempty_check : if hssi_10g_rx_pcs_rxfifo_pempty /= 2 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_rxfifo_pfull_check : if hssi_10g_rx_pcs_rxfifo_pfull /= 23 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_stretch_num_stages_check : if hssi_10g_rx_pcs_stretch_num_stages /= "zero_stage" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_sup_mode_check : if hssi_10g_rx_pcs_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_test_mode_check : if hssi_10g_rx_pcs_test_mode /= "test_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_wrfifo_clken_check : if hssi_10g_rx_pcs_wrfifo_clken /= "wrfifo_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_rx_pcs_advanced_user_mode_check : if hssi_10g_rx_pcs_advanced_user_mode /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_bitslip_en_check : if hssi_10g_tx_pcs_bitslip_en /= "bitslip_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_bonding_dft_en_check : if hssi_10g_tx_pcs_bonding_dft_en /= "dft_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_bonding_dft_val_check : if hssi_10g_tx_pcs_bonding_dft_val /= "dft_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_crcgen_bypass_check : if hssi_10g_tx_pcs_crcgen_bypass /= "crcgen_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_crcgen_clken_check : if hssi_10g_tx_pcs_crcgen_clken /= "crcgen_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_crcgen_err_check : if hssi_10g_tx_pcs_crcgen_err /= "crcgen_err_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_crcgen_inv_check : if hssi_10g_tx_pcs_crcgen_inv /= "crcgen_inv_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_ctrl_bit_reverse_check : if hssi_10g_tx_pcs_ctrl_bit_reverse /= "ctrl_bit_reverse_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_data_bit_reverse_check : if hssi_10g_tx_pcs_data_bit_reverse /= "data_bit_reverse_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_dft_clk_out_sel_check : if hssi_10g_tx_pcs_dft_clk_out_sel /= "tx_master_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_dispgen_bypass_check : if hssi_10g_tx_pcs_dispgen_bypass /= "dispgen_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_dispgen_clken_check : if hssi_10g_tx_pcs_dispgen_clken /= "dispgen_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_dispgen_err_check : if hssi_10g_tx_pcs_dispgen_err /= "dispgen_err_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_dispgen_pipeln_check : if hssi_10g_tx_pcs_dispgen_pipeln /= "dispgen_pipeln_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_empty_flag_type_check : if hssi_10g_tx_pcs_empty_flag_type /= "empty_rd_side" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_enc_64b66b_txsm_bypass_check : if hssi_10g_tx_pcs_enc_64b66b_txsm_bypass /= "enc_64b66b_txsm_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_enc64b66b_txsm_clken_check : if hssi_10g_tx_pcs_enc64b66b_txsm_clken /= "enc64b66b_txsm_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_fastpath_check : if hssi_10g_tx_pcs_fastpath /= "fastpath_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_fec_clken_check : if hssi_10g_tx_pcs_fec_clken /= "fec_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_fec_enable_check : if hssi_10g_tx_pcs_fec_enable /= "fec_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_fifo_double_write_check : if hssi_10g_tx_pcs_fifo_double_write /= "fifo_double_write_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_fifo_reg_fast_check : if hssi_10g_tx_pcs_fifo_reg_fast /= "fifo_reg_fast_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_fifo_stop_rd_check : if hssi_10g_tx_pcs_fifo_stop_rd /= "rd_empty" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_fifo_stop_wr_check : if hssi_10g_tx_pcs_fifo_stop_wr /= "n_wr_full" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_frmgen_burst_check : if hssi_10g_tx_pcs_frmgen_burst /= "frmgen_burst_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_frmgen_bypass_check : if hssi_10g_tx_pcs_frmgen_bypass /= "frmgen_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_frmgen_clken_check : if hssi_10g_tx_pcs_frmgen_clken /= "frmgen_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_frmgen_mfrm_length_check : if hssi_10g_tx_pcs_frmgen_mfrm_length /= 2048 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_frmgen_pipeln_check : if hssi_10g_tx_pcs_frmgen_pipeln /= "frmgen_pipeln_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_frmgen_pyld_ins_check : if hssi_10g_tx_pcs_frmgen_pyld_ins /= "frmgen_pyld_ins_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_frmgen_wordslip_check : if hssi_10g_tx_pcs_frmgen_wordslip /= "frmgen_wordslip_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_full_flag_type_check : if hssi_10g_tx_pcs_full_flag_type /= "full_wr_side" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_gb_pipeln_bypass_check : if hssi_10g_tx_pcs_gb_pipeln_bypass /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_gb_tx_idwidth_check : if hssi_10g_tx_pcs_gb_tx_idwidth /= "width_64" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_gb_tx_odwidth_check : if hssi_10g_tx_pcs_gb_tx_odwidth /= "width_64" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_gbred_clken_check : if hssi_10g_tx_pcs_gbred_clken /= "gbred_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_low_latency_en_check : if hssi_10g_tx_pcs_low_latency_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_master_clk_sel_check : if hssi_10g_tx_pcs_master_clk_sel /= "master_tx_pma_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_pempty_flag_type_check : if hssi_10g_tx_pcs_pempty_flag_type /= "pempty_rd_side" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_pfull_flag_type_check : if hssi_10g_tx_pcs_pfull_flag_type /= "pfull_wr_side" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_phcomp_rd_del_check : if hssi_10g_tx_pcs_phcomp_rd_del /= "phcomp_rd_del2" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_pld_if_type_check : if hssi_10g_tx_pcs_pld_if_type /= "fifo" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_prot_mode_check : if hssi_10g_tx_pcs_prot_mode /= "disable_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_pseudo_random_check : if hssi_10g_tx_pcs_pseudo_random /= "all_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_pseudo_seed_a_check : if hssi_10g_tx_pcs_pseudo_seed_a /= "288230376151711743" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_pseudo_seed_b_check : if hssi_10g_tx_pcs_pseudo_seed_b /= "288230376151711743" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_random_disp_check : if hssi_10g_tx_pcs_random_disp /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_rdfifo_clken_check : if hssi_10g_tx_pcs_rdfifo_clken /= "rdfifo_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_scrm_bypass_check : if hssi_10g_tx_pcs_scrm_bypass /= "scrm_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_scrm_clken_check : if hssi_10g_tx_pcs_scrm_clken /= "scrm_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_scrm_mode_check : if hssi_10g_tx_pcs_scrm_mode /= "async" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_scrm_pipeln_check : if hssi_10g_tx_pcs_scrm_pipeln /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_sh_err_check : if hssi_10g_tx_pcs_sh_err /= "sh_err_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_sop_mark_check : if hssi_10g_tx_pcs_sop_mark /= "sop_mark_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_stretch_num_stages_check : if hssi_10g_tx_pcs_stretch_num_stages /= "zero_stage" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_sup_mode_check : if hssi_10g_tx_pcs_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_test_mode_check : if hssi_10g_tx_pcs_test_mode /= "test_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_tx_scrm_err_check : if hssi_10g_tx_pcs_tx_scrm_err /= "scrm_err_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_tx_scrm_width_check : if hssi_10g_tx_pcs_tx_scrm_width /= "bit64" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_tx_sh_location_check : if hssi_10g_tx_pcs_tx_sh_location /= "msb" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_tx_sm_bypass_check : if hssi_10g_tx_pcs_tx_sm_bypass /= "tx_sm_bypass_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_tx_sm_pipeln_check : if hssi_10g_tx_pcs_tx_sm_pipeln /= "tx_sm_pipeln_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_tx_testbus_sel_check : if hssi_10g_tx_pcs_tx_testbus_sel /= "tx_fifo_testbus1" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_txfifo_empty_check : if hssi_10g_tx_pcs_txfifo_empty /= "empty_default" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_txfifo_full_check : if hssi_10g_tx_pcs_txfifo_full /= "full_default" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_txfifo_mode_check : if hssi_10g_tx_pcs_txfifo_mode /= "phase_comp" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_txfifo_pempty_check : if hssi_10g_tx_pcs_txfifo_pempty /= 2 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_txfifo_pfull_check : if hssi_10g_tx_pcs_txfifo_pfull /= 11 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_wr_clk_sel_check : if hssi_10g_tx_pcs_wr_clk_sel /= "wr_tx_pld_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_wrfifo_clken_check : if hssi_10g_tx_pcs_wrfifo_clken /= "wrfifo_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_10g_tx_pcs_advanced_user_mode_check : if hssi_10g_tx_pcs_advanced_user_mode /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_auto_error_replacement_check : if hssi_8g_rx_pcs_auto_error_replacement /= "en_err_replace" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_bit_reversal_check : if hssi_8g_rx_pcs_bit_reversal /= "dis_bit_reversal" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_bonding_dft_en_check : if hssi_8g_rx_pcs_bonding_dft_en /= "dft_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_bonding_dft_val_check : if hssi_8g_rx_pcs_bonding_dft_val /= "dft_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_bypass_pipeline_reg_check : if hssi_8g_rx_pcs_bypass_pipeline_reg /= "dis_bypass_pipeline" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_byte_deserializer_check : if hssi_8g_rx_pcs_byte_deserializer /= "en_bds_by_4" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_cdr_ctrl_rxvalid_mask_check : if hssi_8g_rx_pcs_cdr_ctrl_rxvalid_mask /= "en_rxvalid_mask" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clkcmp_pattern_n_check : if hssi_8g_rx_pcs_clkcmp_pattern_n /= 192892 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clkcmp_pattern_p_check : if hssi_8g_rx_pcs_clkcmp_pattern_p /= 855683 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clock_gate_bds_dec_asn_check : if hssi_8g_rx_pcs_clock_gate_bds_dec_asn /= "dis_bds_dec_asn_clk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clock_gate_cdr_eidle_check : if hssi_8g_rx_pcs_clock_gate_cdr_eidle /= "dis_cdr_eidle_clk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clock_gate_dw_pc_wrclk_check : if hssi_8g_rx_pcs_clock_gate_dw_pc_wrclk /= "en_dw_pc_wrclk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clock_gate_dw_rm_rd_check : if hssi_8g_rx_pcs_clock_gate_dw_rm_rd /= "en_dw_rm_rdclk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clock_gate_dw_rm_wr_check : if hssi_8g_rx_pcs_clock_gate_dw_rm_wr /= "en_dw_rm_wrclk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clock_gate_dw_wa_check : if hssi_8g_rx_pcs_clock_gate_dw_wa /= "en_dw_wa_clk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clock_gate_pc_rdclk_check : if hssi_8g_rx_pcs_clock_gate_pc_rdclk /= "dis_pc_rdclk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clock_gate_sw_pc_wrclk_check : if hssi_8g_rx_pcs_clock_gate_sw_pc_wrclk /= "dis_sw_pc_wrclk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clock_gate_sw_rm_rd_check : if hssi_8g_rx_pcs_clock_gate_sw_rm_rd /= "dis_sw_rm_rdclk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clock_gate_sw_rm_wr_check : if hssi_8g_rx_pcs_clock_gate_sw_rm_wr /= "dis_sw_rm_wrclk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clock_gate_sw_wa_check : if hssi_8g_rx_pcs_clock_gate_sw_wa /= "dis_sw_wa_clk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_clock_observation_in_pld_core_check : if hssi_8g_rx_pcs_clock_observation_in_pld_core /= "internal_sw_wa_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_eidle_entry_eios_check : if hssi_8g_rx_pcs_eidle_entry_eios /= "dis_eidle_eios" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_eidle_entry_iei_check : if hssi_8g_rx_pcs_eidle_entry_iei /= "dis_eidle_iei" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_eidle_entry_sd_check : if hssi_8g_rx_pcs_eidle_entry_sd /= "en_eidle_sd" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_eightb_tenb_decoder_check : if hssi_8g_rx_pcs_eightb_tenb_decoder /= "en_8b10b_ibm" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_err_flags_sel_check : if hssi_8g_rx_pcs_err_flags_sel /= "err_flags_wa" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_fixed_pat_det_check : if hssi_8g_rx_pcs_fixed_pat_det /= "dis_fixed_patdet" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_fixed_pat_num_check : if hssi_8g_rx_pcs_fixed_pat_num /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_force_signal_detect_check : if hssi_8g_rx_pcs_force_signal_detect /= "en_force_signal_detect" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_gen3_clk_en_check : if hssi_8g_rx_pcs_gen3_clk_en /= "enable_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_gen3_rx_clk_sel_check : if hssi_8g_rx_pcs_gen3_rx_clk_sel /= "rcvd_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_gen3_tx_clk_sel_check : if hssi_8g_rx_pcs_gen3_tx_clk_sel /= "tx_pma_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_hip_mode_check : if hssi_8g_rx_pcs_hip_mode /= "en_hip" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_ibm_invalid_code_check : if hssi_8g_rx_pcs_ibm_invalid_code /= "dis_ibm_invalid_code" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_invalid_code_flag_only_check : if hssi_8g_rx_pcs_invalid_code_flag_only /= "dis_invalid_code_only" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_pad_or_edb_error_replace_check : if hssi_8g_rx_pcs_pad_or_edb_error_replace /= "replace_edb_dynamic" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_pcs_bypass_check : if hssi_8g_rx_pcs_pcs_bypass /= "dis_pcs_bypass" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_phase_comp_rdptr_check : if hssi_8g_rx_pcs_phase_comp_rdptr /= "disable_rdptr" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_phase_compensation_fifo_check : if hssi_8g_rx_pcs_phase_compensation_fifo /= "register_fifo" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_pipe_if_enable_check : if hssi_8g_rx_pcs_pipe_if_enable /= "en_pipe3_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_pma_dw_check : if hssi_8g_rx_pcs_pma_dw /= "ten_bit" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_polinv_8b10b_dec_check : if hssi_8g_rx_pcs_polinv_8b10b_dec /= "en_polinv_8b10b_dec" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_prot_mode_check : if hssi_8g_rx_pcs_prot_mode /= "pipe_g3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rate_match_check : if hssi_8g_rx_pcs_rate_match /= "pipe_rm" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rate_match_del_thres_check : if hssi_8g_rx_pcs_rate_match_del_thres /= "pipe_rm_del_thres" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rate_match_empty_thres_check : if hssi_8g_rx_pcs_rate_match_empty_thres /= "pipe_rm_empty_thres" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rate_match_full_thres_check : if hssi_8g_rx_pcs_rate_match_full_thres /= "pipe_rm_full_thres" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rate_match_ins_thres_check : if hssi_8g_rx_pcs_rate_match_ins_thres /= "pipe_rm_ins_thres" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rate_match_start_thres_check : if hssi_8g_rx_pcs_rate_match_start_thres /= "pipe_rm_start_thres" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rx_clk_free_running_check : if hssi_8g_rx_pcs_rx_clk_free_running /= "en_rx_clk_free_run" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rx_clk2_check : if hssi_8g_rx_pcs_rx_clk2 /= "tx_pma_clock_clk2" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rx_pcs_urst_check : if hssi_8g_rx_pcs_rx_pcs_urst /= "en_rx_pcs_urst" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rx_rcvd_clk_check : if hssi_8g_rx_pcs_rx_rcvd_clk /= "rcvd_clk_rcvd_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rx_rd_clk_check : if hssi_8g_rx_pcs_rx_rd_clk /= "rx_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rx_refclk_check : if hssi_8g_rx_pcs_rx_refclk /= "dis_refclk_sel" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_rx_wr_clk_check : if hssi_8g_rx_pcs_rx_wr_clk /= "txfifo_rd_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_sup_mode_check : if hssi_8g_rx_pcs_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_symbol_swap_check : if hssi_8g_rx_pcs_symbol_swap /= "dis_symbol_swap" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_sync_sm_idle_eios_check : if hssi_8g_rx_pcs_sync_sm_idle_eios /= "en_syncsm_idle" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_test_bus_sel_check : if hssi_8g_rx_pcs_test_bus_sel /= "tx_testbus" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_tx_rx_parallel_loopback_check : if hssi_8g_rx_pcs_tx_rx_parallel_loopback /= "dis_plpbk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_boundary_lock_ctrl_check : if hssi_8g_rx_pcs_wa_boundary_lock_ctrl /= "sync_sm" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_clk_slip_spacing_check : if hssi_8g_rx_pcs_wa_clk_slip_spacing /= 16 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_det_latency_sync_status_beh_check : if hssi_8g_rx_pcs_wa_det_latency_sync_status_beh /= "dont_care_assert_sync" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_disp_err_flag_check : if hssi_8g_rx_pcs_wa_disp_err_flag /= "en_disp_err_flag" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_kchar_check : if hssi_8g_rx_pcs_wa_kchar /= "dis_kchar" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_pd_check : if hssi_8g_rx_pcs_wa_pd /= "wa_pd_10" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_pd_data_check : if hssi_8g_rx_pcs_wa_pd_data /= "380" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_pd_polarity_check : if hssi_8g_rx_pcs_wa_pd_polarity /= "dont_care_both_pol" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_pld_controlled_check : if hssi_8g_rx_pcs_wa_pld_controlled /= "dis_pld_ctrl" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_renumber_data_check : if hssi_8g_rx_pcs_wa_renumber_data /= 16 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_rgnumber_data_check : if hssi_8g_rx_pcs_wa_rgnumber_data /= 15 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_rknumber_data_check : if hssi_8g_rx_pcs_wa_rknumber_data /= 3 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_rosnumber_data_check : if hssi_8g_rx_pcs_wa_rosnumber_data /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_rvnumber_data_check : if hssi_8g_rx_pcs_wa_rvnumber_data /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wa_sync_sm_ctrl_check : if hssi_8g_rx_pcs_wa_sync_sm_ctrl /= "pipe_sync_sm" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_rx_pcs_wait_cnt_check : if hssi_8g_rx_pcs_wait_cnt /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_bit_reversal_check : if hssi_8g_tx_pcs_bit_reversal /= "dis_bit_reversal" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_bonding_dft_en_check : if hssi_8g_tx_pcs_bonding_dft_en /= "dft_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_bonding_dft_val_check : if hssi_8g_tx_pcs_bonding_dft_val /= "dft_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_bypass_pipeline_reg_check : if hssi_8g_tx_pcs_bypass_pipeline_reg /= "dis_bypass_pipeline" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_byte_serializer_check : if hssi_8g_tx_pcs_byte_serializer /= "en_bs_by_4" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_clock_gate_bs_enc_check : if hssi_8g_tx_pcs_clock_gate_bs_enc /= "dis_bs_enc_clk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_clock_gate_dw_fifowr_check : if hssi_8g_tx_pcs_clock_gate_dw_fifowr /= "en_dw_fifowr_clk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_clock_gate_fiford_check : if hssi_8g_tx_pcs_clock_gate_fiford /= "dis_fiford_clk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_clock_gate_sw_fifowr_check : if hssi_8g_tx_pcs_clock_gate_sw_fifowr /= "dis_sw_fifowr_clk_gating" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_clock_observation_in_pld_core_check : if hssi_8g_tx_pcs_clock_observation_in_pld_core /= "internal_refclk_b" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_data_selection_8b10b_encoder_input_check : if hssi_8g_tx_pcs_data_selection_8b10b_encoder_input /= "normal_data_path" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_dynamic_clk_switch_check : if hssi_8g_tx_pcs_dynamic_clk_switch /= "en_dyn_clk_switch" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_eightb_tenb_disp_ctrl_check : if hssi_8g_tx_pcs_eightb_tenb_disp_ctrl /= "en_disp_ctrl" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_eightb_tenb_encoder_check : if hssi_8g_tx_pcs_eightb_tenb_encoder /= "en_8b10b_ibm" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_force_echar_check : if hssi_8g_tx_pcs_force_echar /= "dis_force_echar" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_force_kchar_check : if hssi_8g_tx_pcs_force_kchar /= "dis_force_kchar" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_gen3_tx_clk_sel_check : if hssi_8g_tx_pcs_gen3_tx_clk_sel /= "tx_pma_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_gen3_tx_pipe_clk_sel_check : if hssi_8g_tx_pcs_gen3_tx_pipe_clk_sel /= "func_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_hip_mode_check : if hssi_8g_tx_pcs_hip_mode /= "en_hip" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_pcs_bypass_check : if hssi_8g_tx_pcs_pcs_bypass /= "dis_pcs_bypass" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_phase_comp_rdptr_check : if hssi_8g_tx_pcs_phase_comp_rdptr /= "disable_rdptr" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_phase_compensation_fifo_check : if hssi_8g_tx_pcs_phase_compensation_fifo /= "register_fifo" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_phfifo_write_clk_sel_check : if hssi_8g_tx_pcs_phfifo_write_clk_sel /= "tx_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_pma_dw_check : if hssi_8g_tx_pcs_pma_dw /= "ten_bit" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_prot_mode_check : if hssi_8g_tx_pcs_prot_mode /= "pipe_g3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_refclk_b_clk_sel_check : if hssi_8g_tx_pcs_refclk_b_clk_sel /= "tx_pma_clock" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_revloop_back_rm_check : if hssi_8g_tx_pcs_revloop_back_rm /= "en_rev_loopback_rx_rm" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_sup_mode_check : if hssi_8g_tx_pcs_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_symbol_swap_check : if hssi_8g_tx_pcs_symbol_swap /= "dis_symbol_swap" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_tx_bitslip_check : if hssi_8g_tx_pcs_tx_bitslip /= "dis_tx_bitslip" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_tx_compliance_controlled_disparity_check : if hssi_8g_tx_pcs_tx_compliance_controlled_disparity /= "en_txcompliance_pipe3p0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_tx_fast_pld_reg_check : if hssi_8g_tx_pcs_tx_fast_pld_reg /= "dis_tx_fast_pld_reg" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_txclk_freerun_check : if hssi_8g_tx_pcs_txclk_freerun /= "en_freerun_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_8g_tx_pcs_txpcs_urst_check : if hssi_8g_tx_pcs_txpcs_urst /= "en_txpcs_urst" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_hip_en_check : if hssi_tx_pld_pcs_interface_hd_chnl_hip_en /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_hrdrstctl_en_check : if hssi_tx_pld_pcs_interface_hd_chnl_hrdrstctl_en /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_prot_mode_tx_check : if hssi_tx_pld_pcs_interface_hd_chnl_prot_mode_tx /= "pcie_g3_capable_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_ctrl_plane_bonding_tx_check : if hssi_tx_pld_pcs_interface_hd_chnl_ctrl_plane_bonding_tx /= "ctrl_master_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_pma_dw_tx_check : if hssi_tx_pld_pcs_interface_hd_chnl_pma_dw_tx /= "pcie_g3_dyn_dw_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_pld_fifo_mode_tx_check : if hssi_tx_pld_pcs_interface_hd_chnl_pld_fifo_mode_tx /= "reg_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_shared_fifo_width_tx_check : if hssi_tx_pld_pcs_interface_hd_chnl_shared_fifo_width_tx /= "single_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_low_latency_en_tx_check : if hssi_tx_pld_pcs_interface_hd_chnl_low_latency_en_tx /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_func_mode_check : if hssi_tx_pld_pcs_interface_hd_chnl_func_mode /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_channel_operation_mode_check : if hssi_tx_pld_pcs_interface_hd_chnl_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_lpbk_en_check : if hssi_tx_pld_pcs_interface_hd_chnl_lpbk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_frequency_rules_en_check : if hssi_tx_pld_pcs_interface_hd_chnl_frequency_rules_en /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_pma_tx_clk_hz_check : if hssi_tx_pld_pcs_interface_hd_chnl_pma_tx_clk_hz /= 500000000 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_pld_tx_clk_hz_check : if hssi_tx_pld_pcs_interface_hd_chnl_pld_tx_clk_hz /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_chnl_pld_uhsif_tx_clk_hz_check : if hssi_tx_pld_pcs_interface_hd_chnl_pld_uhsif_tx_clk_hz /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_fifo_channel_operation_mode_check : if hssi_tx_pld_pcs_interface_hd_fifo_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_fifo_prot_mode_tx_check : if hssi_tx_pld_pcs_interface_hd_fifo_prot_mode_tx /= "non_teng_mode_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_fifo_shared_fifo_width_tx_check : if hssi_tx_pld_pcs_interface_hd_fifo_shared_fifo_width_tx /= "single_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_10g_channel_operation_mode_check : if hssi_tx_pld_pcs_interface_hd_10g_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_10g_lpbk_en_check : if hssi_tx_pld_pcs_interface_hd_10g_lpbk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_10g_advanced_user_mode_tx_check : if hssi_tx_pld_pcs_interface_hd_10g_advanced_user_mode_tx /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_10g_pma_dw_tx_check : if hssi_tx_pld_pcs_interface_hd_10g_pma_dw_tx /= "pma_64b_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_10g_fifo_mode_tx_check : if hssi_tx_pld_pcs_interface_hd_10g_fifo_mode_tx /= "fifo_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_10g_prot_mode_tx_check : if hssi_tx_pld_pcs_interface_hd_10g_prot_mode_tx /= "disabled_prot_mode_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_10g_low_latency_en_tx_check : if hssi_tx_pld_pcs_interface_hd_10g_low_latency_en_tx /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_10g_shared_fifo_width_tx_check : if hssi_tx_pld_pcs_interface_hd_10g_shared_fifo_width_tx /= "single_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_8g_channel_operation_mode_check : if hssi_tx_pld_pcs_interface_hd_8g_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_8g_lpbk_en_check : if hssi_tx_pld_pcs_interface_hd_8g_lpbk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_8g_prot_mode_tx_check : if hssi_tx_pld_pcs_interface_hd_8g_prot_mode_tx /= "pipe_g3_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_8g_hip_mode_check : if hssi_tx_pld_pcs_interface_hd_8g_hip_mode /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_8g_pma_dw_tx_check : if hssi_tx_pld_pcs_interface_hd_8g_pma_dw_tx /= "pma_10b_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_8g_fifo_mode_tx_check : if hssi_tx_pld_pcs_interface_hd_8g_fifo_mode_tx /= "reg_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_g3_prot_mode_check : if hssi_tx_pld_pcs_interface_hd_g3_prot_mode /= "pipe_g3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_krfec_channel_operation_mode_check : if hssi_tx_pld_pcs_interface_hd_krfec_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_krfec_lpbk_en_check : if hssi_tx_pld_pcs_interface_hd_krfec_lpbk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_krfec_prot_mode_tx_check : if hssi_tx_pld_pcs_interface_hd_krfec_prot_mode_tx /= "disabled_prot_mode_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_krfec_low_latency_en_tx_check : if hssi_tx_pld_pcs_interface_hd_krfec_low_latency_en_tx /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_pmaif_lpbk_en_check : if hssi_tx_pld_pcs_interface_hd_pmaif_lpbk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_pmaif_channel_operation_mode_check : if hssi_tx_pld_pcs_interface_hd_pmaif_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_pmaif_sim_mode_check : if hssi_tx_pld_pcs_interface_hd_pmaif_sim_mode /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_pmaif_prot_mode_tx_check : if hssi_tx_pld_pcs_interface_hd_pmaif_prot_mode_tx /= "eightg_g3_pcie_g3_hip_mode_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_pmaif_pma_dw_tx_check : if hssi_tx_pld_pcs_interface_hd_pmaif_pma_dw_tx /= "pcie_g3_dyn_dw_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_pldif_prot_mode_tx_check : if hssi_tx_pld_pcs_interface_hd_pldif_prot_mode_tx /= "eightg_and_g3_reg_mode_hip_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_hd_pldif_hrdrstctl_en_check : if hssi_tx_pld_pcs_interface_hd_pldif_hrdrstctl_en /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_pcs_tx_clk_source_check : if hssi_tx_pld_pcs_interface_pcs_tx_clk_source /= "eightg" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_pcs_tx_data_source_check : if hssi_tx_pld_pcs_interface_pcs_tx_data_source /= "hip_enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_pcs_tx_delay1_clk_en_check : if hssi_tx_pld_pcs_interface_pcs_tx_delay1_clk_en /= "delay1_clk_disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_pcs_tx_delay1_clk_sel_check : if hssi_tx_pld_pcs_interface_pcs_tx_delay1_clk_sel /= "pcs_tx_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_pcs_tx_delay1_ctrl_check : if hssi_tx_pld_pcs_interface_pcs_tx_delay1_ctrl /= "delay1_path0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_pcs_tx_delay1_data_sel_check : if hssi_tx_pld_pcs_interface_pcs_tx_delay1_data_sel /= "one_ff_delay" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_pcs_tx_delay2_clk_en_check : if hssi_tx_pld_pcs_interface_pcs_tx_delay2_clk_en /= "delay2_clk_disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_pcs_tx_delay2_ctrl_check : if hssi_tx_pld_pcs_interface_pcs_tx_delay2_ctrl /= "delay2_path0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_pcs_tx_output_sel_check : if hssi_tx_pld_pcs_interface_pcs_tx_output_sel /= "teng_output" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pld_pcs_interface_pcs_tx_clk_out_sel_check : if hssi_tx_pld_pcs_interface_pcs_tx_clk_out_sel /= "eightg_clk_out" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_hip_en_check : if hssi_rx_pld_pcs_interface_hd_chnl_hip_en /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_transparent_pcs_rx_check : if hssi_rx_pld_pcs_interface_hd_chnl_transparent_pcs_rx /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_hrdrstctl_en_check : if hssi_rx_pld_pcs_interface_hd_chnl_hrdrstctl_en /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_prot_mode_rx_check : if hssi_rx_pld_pcs_interface_hd_chnl_prot_mode_rx /= "pcie_g3_capable_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_ctrl_plane_bonding_rx_check : if hssi_rx_pld_pcs_interface_hd_chnl_ctrl_plane_bonding_rx /= "ctrl_master_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_pma_dw_rx_check : if hssi_rx_pld_pcs_interface_hd_chnl_pma_dw_rx /= "pcie_g3_dyn_dw_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_pld_fifo_mode_rx_check : if hssi_rx_pld_pcs_interface_hd_chnl_pld_fifo_mode_rx /= "reg_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_shared_fifo_width_rx_check : if hssi_rx_pld_pcs_interface_hd_chnl_shared_fifo_width_rx /= "single_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_low_latency_en_rx_check : if hssi_rx_pld_pcs_interface_hd_chnl_low_latency_en_rx /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_func_mode_check : if hssi_rx_pld_pcs_interface_hd_chnl_func_mode /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_channel_operation_mode_check : if hssi_rx_pld_pcs_interface_hd_chnl_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_lpbk_en_check : if hssi_rx_pld_pcs_interface_hd_chnl_lpbk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_10g_advanced_user_mode_rx_check : if hssi_rx_pld_pcs_interface_hd_10g_advanced_user_mode_rx /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_frequency_rules_en_check : if hssi_rx_pld_pcs_interface_hd_chnl_frequency_rules_en /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_pma_rx_clk_hz_check : if hssi_rx_pld_pcs_interface_hd_chnl_pma_rx_clk_hz /= 500000000 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_pld_rx_clk_hz_check : if hssi_rx_pld_pcs_interface_hd_chnl_pld_rx_clk_hz /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_fref_clk_hz_check : if hssi_rx_pld_pcs_interface_hd_chnl_fref_clk_hz /= 100000000 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_chnl_clklow_clk_hz_check : if hssi_rx_pld_pcs_interface_hd_chnl_clklow_clk_hz /= 100000000 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_fifo_channel_operation_mode_check : if hssi_rx_pld_pcs_interface_hd_fifo_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_fifo_prot_mode_rx_check : if hssi_rx_pld_pcs_interface_hd_fifo_prot_mode_rx /= "non_teng_mode_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_fifo_shared_fifo_width_rx_check : if hssi_rx_pld_pcs_interface_hd_fifo_shared_fifo_width_rx /= "single_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_10g_channel_operation_mode_check : if hssi_rx_pld_pcs_interface_hd_10g_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_10g_lpbk_en_check : if hssi_rx_pld_pcs_interface_hd_10g_lpbk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_10g_pma_dw_rx_check : if hssi_rx_pld_pcs_interface_hd_10g_pma_dw_rx /= "pma_64b_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_10g_fifo_mode_rx_check : if hssi_rx_pld_pcs_interface_hd_10g_fifo_mode_rx /= "fifo_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_10g_prot_mode_rx_check : if hssi_rx_pld_pcs_interface_hd_10g_prot_mode_rx /= "disabled_prot_mode_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_10g_low_latency_en_rx_check : if hssi_rx_pld_pcs_interface_hd_10g_low_latency_en_rx /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_10g_shared_fifo_width_rx_check : if hssi_rx_pld_pcs_interface_hd_10g_shared_fifo_width_rx /= "single_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_10g_test_bus_mode_check : if hssi_rx_pld_pcs_interface_hd_10g_test_bus_mode /= "rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_8g_channel_operation_mode_check : if hssi_rx_pld_pcs_interface_hd_8g_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_8g_lpbk_en_check : if hssi_rx_pld_pcs_interface_hd_8g_lpbk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_8g_prot_mode_rx_check : if hssi_rx_pld_pcs_interface_hd_8g_prot_mode_rx /= "pipe_g3_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_8g_hip_mode_check : if hssi_rx_pld_pcs_interface_hd_8g_hip_mode /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_8g_pma_dw_rx_check : if hssi_rx_pld_pcs_interface_hd_8g_pma_dw_rx /= "pma_10b_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_8g_fifo_mode_rx_check : if hssi_rx_pld_pcs_interface_hd_8g_fifo_mode_rx /= "reg_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_g3_prot_mode_check : if hssi_rx_pld_pcs_interface_hd_g3_prot_mode /= "pipe_g3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_krfec_channel_operation_mode_check : if hssi_rx_pld_pcs_interface_hd_krfec_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_krfec_lpbk_en_check : if hssi_rx_pld_pcs_interface_hd_krfec_lpbk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_krfec_prot_mode_rx_check : if hssi_rx_pld_pcs_interface_hd_krfec_prot_mode_rx /= "disabled_prot_mode_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_krfec_low_latency_en_rx_check : if hssi_rx_pld_pcs_interface_hd_krfec_low_latency_en_rx /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_krfec_test_bus_mode_check : if hssi_rx_pld_pcs_interface_hd_krfec_test_bus_mode /= "tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_pmaif_lpbk_en_check : if hssi_rx_pld_pcs_interface_hd_pmaif_lpbk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_pmaif_channel_operation_mode_check : if hssi_rx_pld_pcs_interface_hd_pmaif_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_pmaif_sim_mode_check : if hssi_rx_pld_pcs_interface_hd_pmaif_sim_mode /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_pmaif_prot_mode_rx_check : if hssi_rx_pld_pcs_interface_hd_pmaif_prot_mode_rx /= "eightg_g3_pcie_g3_hip_mode_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_pmaif_pma_dw_rx_check : if hssi_rx_pld_pcs_interface_hd_pmaif_pma_dw_rx /= "pcie_g3_dyn_dw_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_pldif_prot_mode_rx_check : if hssi_rx_pld_pcs_interface_hd_pldif_prot_mode_rx /= "eightg_and_g3_reg_mode_hip_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_hd_pldif_hrdrstctl_en_check : if hssi_rx_pld_pcs_interface_hd_pldif_hrdrstctl_en /= "enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_pcs_rx_block_sel_check : if hssi_rx_pld_pcs_interface_pcs_rx_block_sel /= "eightg" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_pcs_rx_clk_sel_check : if hssi_rx_pld_pcs_interface_pcs_rx_clk_sel /= "pcs_rx_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_pcs_rx_hip_clk_en_check : if hssi_rx_pld_pcs_interface_pcs_rx_hip_clk_en /= "hip_rx_enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_pcs_rx_output_sel_check : if hssi_rx_pld_pcs_interface_pcs_rx_output_sel /= "teng_output" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pld_pcs_interface_pcs_rx_clk_out_sel_check : if hssi_rx_pld_pcs_interface_pcs_rx_clk_out_sel /= "eightg_clk_out" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pld_pcs_interface_dft_clk_out_en_check : if hssi_common_pld_pcs_interface_dft_clk_out_en /= "dft_clk_out_disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pld_pcs_interface_dft_clk_out_sel_check : if hssi_common_pld_pcs_interface_dft_clk_out_sel /= "teng_rx_dft_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pld_pcs_interface_hrdrstctrl_en_check : if hssi_common_pld_pcs_interface_hrdrstctrl_en /= "hrst_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pld_pcs_interface_pcs_testbus_block_sel_check : if hssi_common_pld_pcs_interface_pcs_testbus_block_sel /= "pma_if" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_block_sel_check : if hssi_rx_pcs_pma_interface_block_sel /= "eight_g_pcs" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_channel_operation_mode_check : if hssi_rx_pcs_pma_interface_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_clkslip_sel_check : if hssi_rx_pcs_pma_interface_clkslip_sel /= "pld" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_lpbk_en_check : if hssi_rx_pcs_pma_interface_lpbk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_master_clk_sel_check : if hssi_rx_pcs_pma_interface_master_clk_sel /= "master_rx_pma_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_pldif_datawidth_mode_check : if hssi_rx_pcs_pma_interface_pldif_datawidth_mode /= "pldif_data_10bit" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_pma_dw_rx_check : if hssi_rx_pcs_pma_interface_pma_dw_rx /= "pcie_g3_dyn_dw_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_pma_if_dft_en_check : if hssi_rx_pcs_pma_interface_pma_if_dft_en /= "dft_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_pma_if_dft_val_check : if hssi_rx_pcs_pma_interface_pma_if_dft_val /= "dft_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_prbs_clken_check : if hssi_rx_pcs_pma_interface_prbs_clken /= "prbs_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_prbs_ver_check : if hssi_rx_pcs_pma_interface_prbs_ver /= "prbs_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_prbs9_dwidth_check : if hssi_rx_pcs_pma_interface_prbs9_dwidth /= "prbs9_64b" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_prot_mode_rx_check : if hssi_rx_pcs_pma_interface_prot_mode_rx /= "eightg_g3_pcie_g3_hip_mode_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_rx_dyn_polarity_inversion_check : if hssi_rx_pcs_pma_interface_rx_dyn_polarity_inversion /= "rx_dyn_polinv_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_rx_lpbk_en_check : if hssi_rx_pcs_pma_interface_rx_lpbk_en /= "lpbk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_rx_prbs_force_signal_ok_check : if hssi_rx_pcs_pma_interface_rx_prbs_force_signal_ok /= "force_sig_ok" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_rx_prbs_mask_check : if hssi_rx_pcs_pma_interface_rx_prbs_mask /= "prbsmask128" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_rx_prbs_mode_check : if hssi_rx_pcs_pma_interface_rx_prbs_mode /= "teng_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_rx_signalok_signaldet_sel_check : if hssi_rx_pcs_pma_interface_rx_signalok_signaldet_sel /= "sel_sig_det" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_rx_static_polarity_inversion_check : if hssi_rx_pcs_pma_interface_rx_static_polarity_inversion /= "rx_stat_polinv_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_rx_uhsif_lpbk_en_check : if hssi_rx_pcs_pma_interface_rx_uhsif_lpbk_en /= "uhsif_lpbk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_rx_pcs_pma_interface_sup_mode_check : if hssi_rx_pcs_pma_interface_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_bypass_pma_txelecidle_check : if hssi_tx_pcs_pma_interface_bypass_pma_txelecidle /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_channel_operation_mode_check : if hssi_tx_pcs_pma_interface_channel_operation_mode /= "tx_rx_pair_enabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_lpbk_en_check : if hssi_tx_pcs_pma_interface_lpbk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_master_clk_sel_check : if hssi_tx_pcs_pma_interface_master_clk_sel /= "master_tx_pma_clk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_pcie_sub_prot_mode_tx_check : if hssi_tx_pcs_pma_interface_pcie_sub_prot_mode_tx /= "pipe_g3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_pldif_datawidth_mode_check : if hssi_tx_pcs_pma_interface_pldif_datawidth_mode /= "pldif_data_10bit" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_pma_dw_tx_check : if hssi_tx_pcs_pma_interface_pma_dw_tx /= "pcie_g3_dyn_dw_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_pma_if_dft_en_check : if hssi_tx_pcs_pma_interface_pma_if_dft_en /= "dft_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_pmagate_en_check : if hssi_tx_pcs_pma_interface_pmagate_en /= "pmagate_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_prbs_clken_check : if hssi_tx_pcs_pma_interface_prbs_clken /= "prbs_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_prbs_gen_pat_check : if hssi_tx_pcs_pma_interface_prbs_gen_pat /= "prbs_gen_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_prbs9_dwidth_check : if hssi_tx_pcs_pma_interface_prbs9_dwidth /= "prbs9_64b" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_prot_mode_tx_check : if hssi_tx_pcs_pma_interface_prot_mode_tx /= "eightg_g3_pcie_g3_hip_mode_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_sq_wave_num_check : if hssi_tx_pcs_pma_interface_sq_wave_num /= "sq_wave_default" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_sqwgen_clken_check : if hssi_tx_pcs_pma_interface_sqwgen_clken /= "sqwgen_clk_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_sup_mode_check : if hssi_tx_pcs_pma_interface_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_tx_dyn_polarity_inversion_check : if hssi_tx_pcs_pma_interface_tx_dyn_polarity_inversion /= "tx_dyn_polinv_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_tx_pma_data_sel_check : if hssi_tx_pcs_pma_interface_tx_pma_data_sel /= "pcie_gen3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_tx_static_polarity_inversion_check : if hssi_tx_pcs_pma_interface_tx_static_polarity_inversion /= "tx_stat_polinv_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_cnt_step_filt_before_lock_check : if hssi_tx_pcs_pma_interface_uhsif_cnt_step_filt_before_lock /= "uhsif_filt_stepsz_b4lock_2" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_cnt_thresh_filt_after_lock_value_check : if hssi_tx_pcs_pma_interface_uhsif_cnt_thresh_filt_after_lock_value /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_cnt_thresh_filt_before_lock_check : if hssi_tx_pcs_pma_interface_uhsif_cnt_thresh_filt_before_lock /= "uhsif_filt_cntthr_b4lock_8" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_dcn_test_update_period_check : if hssi_tx_pcs_pma_interface_uhsif_dcn_test_update_period /= "uhsif_dcn_test_period_4" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_dcn_testmode_enable_check : if hssi_tx_pcs_pma_interface_uhsif_dcn_testmode_enable /= "uhsif_dcn_test_mode_disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_dead_zone_count_thresh_check : if hssi_tx_pcs_pma_interface_uhsif_dead_zone_count_thresh /= "uhsif_dzt_cnt_thr_2" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_dead_zone_detection_enable_check : if hssi_tx_pcs_pma_interface_uhsif_dead_zone_detection_enable /= "uhsif_dzt_disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_dead_zone_obser_window_check : if hssi_tx_pcs_pma_interface_uhsif_dead_zone_obser_window /= "uhsif_dzt_obr_win_16" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_dead_zone_skip_size_check : if hssi_tx_pcs_pma_interface_uhsif_dead_zone_skip_size /= "uhsif_dzt_skipsz_4" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_delay_cell_index_sel_check : if hssi_tx_pcs_pma_interface_uhsif_delay_cell_index_sel /= "uhsif_index_cram" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_delay_cell_margin_check : if hssi_tx_pcs_pma_interface_uhsif_delay_cell_margin /= "uhsif_dcn_margin_2" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_delay_cell_static_index_value_check : if hssi_tx_pcs_pma_interface_uhsif_delay_cell_static_index_value /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_dft_dead_zone_control_check : if hssi_tx_pcs_pma_interface_uhsif_dft_dead_zone_control /= "uhsif_dft_dz_det_val_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_dft_up_filt_control_check : if hssi_tx_pcs_pma_interface_uhsif_dft_up_filt_control /= "uhsif_dft_up_val_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_enable_check : if hssi_tx_pcs_pma_interface_uhsif_enable /= "uhsif_disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_lock_det_segsz_after_lock_check : if hssi_tx_pcs_pma_interface_uhsif_lock_det_segsz_after_lock /= "uhsif_lkd_segsz_aflock_512" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_lock_det_segsz_before_lock_check : if hssi_tx_pcs_pma_interface_uhsif_lock_det_segsz_before_lock /= "uhsif_lkd_segsz_b4lock_16" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_cnt_after_lock_value_check : if hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_cnt_after_lock_value /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_cnt_before_lock_value_check : if hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_cnt_before_lock_value /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_diff_after_lock_value_check : if hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_diff_after_lock_value /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_diff_before_lock_value_check : if hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_diff_before_lock_value /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_asn_clk_enable_check : if hssi_common_pcs_pma_interface_asn_clk_enable /= "true" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_asn_enable_check : if hssi_common_pcs_pma_interface_asn_enable /= "en_asn" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_block_sel_check : if hssi_common_pcs_pma_interface_block_sel /= "pcie_gen3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_bypass_early_eios_check : if hssi_common_pcs_pma_interface_bypass_early_eios /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_bypass_pcie_switch_check : if hssi_common_pcs_pma_interface_bypass_pcie_switch /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_bypass_pma_ltr_check : if hssi_common_pcs_pma_interface_bypass_pma_ltr /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_bypass_pma_sw_done_check : if hssi_common_pcs_pma_interface_bypass_pma_sw_done /= "true" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_bypass_ppm_lock_check : if hssi_common_pcs_pma_interface_bypass_ppm_lock /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_bypass_send_syncp_fbkp_check : if hssi_common_pcs_pma_interface_bypass_send_syncp_fbkp /= "true" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_bypass_txdetectrx_check : if hssi_common_pcs_pma_interface_bypass_txdetectrx /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_cdr_control_check : if hssi_common_pcs_pma_interface_cdr_control /= "en_cdr_ctrl" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_cid_enable_check : if hssi_common_pcs_pma_interface_cid_enable /= "en_cid_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_data_mask_count_check : if hssi_common_pcs_pma_interface_data_mask_count /= 2500 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_data_mask_count_multi_check : if hssi_common_pcs_pma_interface_data_mask_count_multi /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_dft_observation_clock_selection_check : if hssi_common_pcs_pma_interface_dft_observation_clock_selection /= "dft_clk_obsrv_tx0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_early_eios_counter_check : if hssi_common_pcs_pma_interface_early_eios_counter /= 50 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_force_freqdet_check : if hssi_common_pcs_pma_interface_force_freqdet /= "force_freqdet_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_free_run_clk_enable_check : if hssi_common_pcs_pma_interface_free_run_clk_enable /= "true" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_ignore_sigdet_g23_check : if hssi_common_pcs_pma_interface_ignore_sigdet_g23 /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_pc_en_counter_check : if hssi_common_pcs_pma_interface_pc_en_counter /= 55 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_pc_rst_counter_check : if hssi_common_pcs_pma_interface_pc_rst_counter /= 23 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_pcie_hip_mode_check : if hssi_common_pcs_pma_interface_pcie_hip_mode /= "hip_enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_ph_fifo_reg_mode_check : if hssi_common_pcs_pma_interface_ph_fifo_reg_mode /= "phfifo_reg_mode_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_phfifo_flush_wait_check : if hssi_common_pcs_pma_interface_phfifo_flush_wait /= 36 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_pipe_if_g3pcs_check : if hssi_common_pcs_pma_interface_pipe_if_g3pcs /= "pipe_if_g3pcs" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_pma_done_counter_check : if hssi_common_pcs_pma_interface_pma_done_counter /= 175000 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_pma_if_dft_en_check : if hssi_common_pcs_pma_interface_pma_if_dft_en /= "dft_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_pma_if_dft_val_check : if hssi_common_pcs_pma_interface_pma_if_dft_val /= "dft_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_ppm_cnt_rst_check : if hssi_common_pcs_pma_interface_ppm_cnt_rst /= "ppm_cnt_rst_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_ppm_deassert_early_check : if hssi_common_pcs_pma_interface_ppm_deassert_early /= "deassert_early_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_ppm_gen1_2_cnt_check : if hssi_common_pcs_pma_interface_ppm_gen1_2_cnt /= "cnt_32k" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_ppm_post_eidle_delay_check : if hssi_common_pcs_pma_interface_ppm_post_eidle_delay /= "cnt_200_cycles" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_ppmsel_check : if hssi_common_pcs_pma_interface_ppmsel /= "ppmsel_300" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_prot_mode_check : if hssi_common_pcs_pma_interface_prot_mode /= "pipe_g3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_rxvalid_mask_check : if hssi_common_pcs_pma_interface_rxvalid_mask /= "rxvalid_mask_en" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_sigdet_wait_counter_check : if hssi_common_pcs_pma_interface_sigdet_wait_counter /= 2500 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_sigdet_wait_counter_multi_check : if hssi_common_pcs_pma_interface_sigdet_wait_counter_multi /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_sim_mode_check : if hssi_common_pcs_pma_interface_sim_mode /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_spd_chg_rst_wait_cnt_en_check : if hssi_common_pcs_pma_interface_spd_chg_rst_wait_cnt_en /= "true" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_sup_mode_check : if hssi_common_pcs_pma_interface_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_testout_sel_check : if hssi_common_pcs_pma_interface_testout_sel /= "asn_test" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_wait_clk_on_off_timer_check : if hssi_common_pcs_pma_interface_wait_clk_on_off_timer /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_wait_pipe_synchronizing_check : if hssi_common_pcs_pma_interface_wait_pipe_synchronizing /= 23 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_wait_send_syncp_fbkp_check : if hssi_common_pcs_pma_interface_wait_send_syncp_fbkp /= 250 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_common_pcs_pma_interface_ppm_det_buckets_check : if hssi_common_pcs_pma_interface_ppm_det_buckets /= "ppm_300_bucket" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_fifo_rx_pcs_double_read_mode_check : if hssi_fifo_rx_pcs_double_read_mode /= "double_read_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_fifo_rx_pcs_prot_mode_check : if hssi_fifo_rx_pcs_prot_mode /= "non_teng_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_fifo_tx_pcs_double_write_mode_check : if hssi_fifo_tx_pcs_double_write_mode /= "double_write_dis" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_fifo_tx_pcs_prot_mode_check : if hssi_fifo_tx_pcs_prot_mode /= "non_teng_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_bypass_rx_detection_enable_check : if hssi_pipe_gen3_bypass_rx_detection_enable /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_bypass_rx_preset_check : if hssi_pipe_gen3_bypass_rx_preset /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_bypass_rx_preset_enable_check : if hssi_pipe_gen3_bypass_rx_preset_enable /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_bypass_tx_coefficent_check : if hssi_pipe_gen3_bypass_tx_coefficent /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_bypass_tx_coefficent_enable_check : if hssi_pipe_gen3_bypass_tx_coefficent_enable /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_elecidle_delay_g3_check : if hssi_pipe_gen3_elecidle_delay_g3 /= 6 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_ind_error_reporting_check : if hssi_pipe_gen3_ind_error_reporting /= "dis_ind_error_reporting" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_mode_check : if hssi_pipe_gen3_mode /= "pipe_g3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_phy_status_delay_g12_check : if hssi_pipe_gen3_phy_status_delay_g12 /= 5 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_phy_status_delay_g3_check : if hssi_pipe_gen3_phy_status_delay_g3 /= 5 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_phystatus_rst_toggle_g12_check : if hssi_pipe_gen3_phystatus_rst_toggle_g12 /= "dis_phystatus_rst_toggle" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_phystatus_rst_toggle_g3_check : if hssi_pipe_gen3_phystatus_rst_toggle_g3 /= "dis_phystatus_rst_toggle_g3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_rate_match_pad_insertion_check : if hssi_pipe_gen3_rate_match_pad_insertion /= "dis_rm_fifo_pad_ins" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_sup_mode_check : if hssi_pipe_gen3_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen3_test_out_sel_check : if hssi_pipe_gen3_test_out_sel /= "disable_test_out" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_elec_idle_delay_val_check : if hssi_pipe_gen1_2_elec_idle_delay_val /= 3 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_error_replace_pad_check : if hssi_pipe_gen1_2_error_replace_pad /= "replace_edb" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_hip_mode_check : if hssi_pipe_gen1_2_hip_mode /= "en_hip" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_ind_error_reporting_check : if hssi_pipe_gen1_2_ind_error_reporting /= "dis_ind_error_reporting" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_phystatus_delay_val_check : if hssi_pipe_gen1_2_phystatus_delay_val /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_phystatus_rst_toggle_check : if hssi_pipe_gen1_2_phystatus_rst_toggle /= "dis_phystatus_rst_toggle" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_pipe_byte_de_serializer_en_check : if hssi_pipe_gen1_2_pipe_byte_de_serializer_en /= "dont_care_bds" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_prot_mode_check : if hssi_pipe_gen1_2_prot_mode /= "pipe_g3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_rx_pipe_enable_check : if hssi_pipe_gen1_2_rx_pipe_enable /= "en_pipe3_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_rxdetect_bypass_check : if hssi_pipe_gen1_2_rxdetect_bypass /= "dis_rxdetect_bypass" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_sup_mode_check : if hssi_pipe_gen1_2_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_tx_pipe_enable_check : if hssi_pipe_gen1_2_tx_pipe_enable /= "en_pipe3_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	hssi_pipe_gen1_2_txswing_check : if hssi_pipe_gen1_2_txswing /= "dis_txswing" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_1s_ctle_bypass_check : if pma_adapt_adp_1s_ctle_bypass /= "radp_1s_ctle_bypass_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_4s_ctle_bypass_check : if pma_adapt_adp_4s_ctle_bypass /= "radp_4s_ctle_bypass_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_ctle_en_check : if pma_adapt_adp_ctle_en /= "radp_ctle_enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_dfe_fltap_bypass_check : if pma_adapt_adp_dfe_fltap_bypass /= "radp_dfe_fltap_bypass_1" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_dfe_fltap_en_check : if pma_adapt_adp_dfe_fltap_en /= "radp_dfe_fltap_disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_dfe_fxtap_bypass_check : if pma_adapt_adp_dfe_fxtap_bypass /= "radp_dfe_fxtap_bypass_1" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_dfe_fxtap_en_check : if pma_adapt_adp_dfe_fxtap_en /= "radp_dfe_fxtap_disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_dfe_fxtap_hold_en_check : if pma_adapt_adp_dfe_fxtap_hold_en /= "radp_dfe_fxtap_hold" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_dfe_mode_check : if pma_adapt_adp_dfe_mode /= "radp_dfe_mode_4" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_vga_bypass_check : if pma_adapt_adp_vga_bypass /= "radp_vga_bypass_1" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_vga_en_check : if pma_adapt_adp_vga_en /= "radp_vga_enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_vref_bypass_check : if pma_adapt_adp_vref_bypass /= "radp_vref_bypass_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_vref_en_check : if pma_adapt_adp_vref_en /= "radp_vref_enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_datarate_check : if pma_adapt_datarate /= "5000000000 bps" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_prot_mode_check : if pma_adapt_prot_mode /= "pcie_gen3_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_sup_mode_check : if pma_adapt_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_ctle_adapt_cycle_window_check : if pma_adapt_adp_ctle_adapt_cycle_window /= "radp_ctle_adapt_cycle_window_7" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_odi_dfe_spec_en_check : if pma_adapt_odi_dfe_spec_en /= "rodi_dfe_spec_en_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adapt_mode_check : if pma_adapt_adapt_mode /= "ctle" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_onetime_dfe_check : if pma_adapt_adp_onetime_dfe /= "radp_onetime_dfe_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_adapt_adp_mode_check : if pma_adapt_adp_mode /= "radp_mode_8" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cdr_refclk_powerdown_mode_check : if pma_cdr_refclk_powerdown_mode /= "powerup" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cdr_refclk_refclk_select_check : if pma_cdr_refclk_refclk_select /= "ref_iqclk0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cgb_bitslip_enable_check : if pma_cgb_bitslip_enable /= "disable_bitslip" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cgb_bonding_reset_enable_check : if pma_cgb_bonding_reset_enable /= "disallow_bonding_reset" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cgb_datarate_check : if pma_cgb_datarate /= "5000000000 bps" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cgb_pcie_gen3_bitwidth_check : if pma_cgb_pcie_gen3_bitwidth /= "pciegen3_wide" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cgb_prot_mode_check : if pma_cgb_prot_mode /= "pcie_gen3_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cgb_ser_mode_check : if pma_cgb_ser_mode /= "ten_bit" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cgb_sup_mode_check : if pma_cgb_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cgb_x1_div_m_sel_check : if pma_cgb_x1_div_m_sel /= "divbypass" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cgb_input_select_x1_check : if pma_cgb_input_select_x1 /= "unused" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cgb_input_select_gen3_check : if pma_cgb_input_select_gen3 /= "unused" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cgb_input_select_xn_check : if pma_cgb_input_select_xn /= "sel_x6_dn" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_cgb_tx_ucontrol_en_check : if pma_cgb_tx_ucontrol_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_dfe_datarate_check : if pma_rx_dfe_datarate /= "5000000000 bps" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_dfe_dft_en_check : if pma_rx_dfe_dft_en /= "dft_enalbe" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_dfe_pdb_check : if pma_rx_dfe_pdb /= "dfe_enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_dfe_pdb_fixedtap_check : if pma_rx_dfe_pdb_fixedtap /= "fixtap_dfe_enable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_dfe_pdb_floattap_check : if pma_rx_dfe_pdb_floattap /= "floattap_dfe_powerdown" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_dfe_pdb_fxtap4t7_check : if pma_rx_dfe_pdb_fxtap4t7 /= "fxtap4t7_powerdown" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_dfe_sup_mode_check : if pma_rx_dfe_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_dfe_prot_mode_check : if pma_rx_dfe_prot_mode /= "pcie_gen3_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_odi_datarate_check : if pma_rx_odi_datarate /= "5000000000 bps" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_odi_sup_mode_check : if pma_rx_odi_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_odi_step_ctrl_sel_check : if pma_rx_odi_step_ctrl_sel /= "dprio_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_odi_prot_mode_check : if pma_rx_odi_prot_mode /= "pcie_gen3_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_bypass_eqz_stages_234_check : if pma_rx_buf_bypass_eqz_stages_234 /= "bypass_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_datarate_check : if pma_rx_buf_datarate /= "5000000000 bps" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_diag_lp_en_check : if pma_rx_buf_diag_lp_en /= "dlp_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_prot_mode_check : if pma_rx_buf_prot_mode /= "pcie_gen3_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_qpi_enable_check : if pma_rx_buf_qpi_enable /= "non_qpi_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_rx_refclk_divider_check : if pma_rx_buf_rx_refclk_divider /= "bypass_divider" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_sup_mode_check : if pma_rx_buf_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_loopback_modes_check : if pma_rx_buf_loopback_modes /= "lpbk_disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_refclk_en_check : if pma_rx_buf_refclk_en /= "disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_pm_tx_rx_pcie_gen_check : if pma_rx_buf_pm_tx_rx_pcie_gen /= "non_pcie" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_pm_tx_rx_pcie_gen_bitwidth_check : if pma_rx_buf_pm_tx_rx_pcie_gen_bitwidth /= "pcie_gen3_32b" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_pm_tx_rx_cvp_mode_check : if pma_rx_buf_pm_tx_rx_cvp_mode /= "cvp_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_xrx_path_uc_cal_enable_check : if pma_rx_buf_xrx_path_uc_cal_enable /= "rx_cal_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_xrx_path_sup_mode_check : if pma_rx_buf_xrx_path_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_xrx_path_prot_mode_check : if pma_rx_buf_xrx_path_prot_mode /= "pcie_gen3_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_xrx_path_datarate_check : if pma_rx_buf_xrx_path_datarate /= "5000000000 bps" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_xrx_path_datawidth_check : if pma_rx_buf_xrx_path_datawidth /= 10 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_buf_xrx_path_pma_rx_divclk_hz_check : if pma_rx_buf_xrx_path_pma_rx_divclk_hz /= "500000000" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_sd_prot_mode_check : if pma_rx_sd_prot_mode /= "pcie_gen3_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_sd_sd_output_off_check : if pma_rx_sd_sd_output_off /= 13 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_sd_sd_output_on_check : if pma_rx_sd_sd_output_on /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_sd_sd_pdb_check : if pma_rx_sd_sd_pdb /= "sd_on" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_sd_sup_mode_check : if pma_rx_sd_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_ser_ser_clk_divtx_user_sel_check : if pma_tx_ser_ser_clk_divtx_user_sel /= "divtx_user_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_ser_sup_mode_check : if pma_tx_ser_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_ser_prot_mode_check : if pma_tx_ser_prot_mode /= "pcie_gen3_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_datarate_check : if pma_tx_buf_datarate /= "5000000000 bps" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_prot_mode_check : if pma_tx_buf_prot_mode /= "pcie_gen3_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_rx_det_check : if pma_tx_buf_rx_det /= "mode_0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_rx_det_output_sel_check : if pma_tx_buf_rx_det_output_sel /= "rx_det_pcie_out" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_rx_det_pdb_check : if pma_tx_buf_rx_det_pdb /= "rx_det_on" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_sup_mode_check : if pma_tx_buf_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_user_fir_coeff_ctrl_sel_check : if pma_tx_buf_user_fir_coeff_ctrl_sel /= "dynamic_ctl" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_xtx_path_prot_mode_check : if pma_tx_buf_xtx_path_prot_mode /= "pcie_gen3_tx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_xtx_path_datarate_check : if pma_tx_buf_xtx_path_datarate /= "5000000000 bps" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_xtx_path_datawidth_check : if pma_tx_buf_xtx_path_datawidth /= 10 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_xtx_path_clock_divider_ratio_check : if pma_tx_buf_xtx_path_clock_divider_ratio /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_xtx_path_pma_tx_divclk_hz_check : if pma_tx_buf_xtx_path_pma_tx_divclk_hz /= "500000000" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_xtx_path_tx_pll_clk_hz_check : if pma_tx_buf_xtx_path_tx_pll_clk_hz /= "2500000000" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_tx_buf_xtx_path_sup_mode_check : if pma_tx_buf_xtx_path_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_pma_width_check : if cdr_pll_pma_width /= 10 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_cgb_div_check : if cdr_pll_cgb_div /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_is_cascaded_pll_check : if cdr_pll_is_cascaded_pll /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_datarate_check : if cdr_pll_datarate /= "5000000000 bps" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_lpd_counter_check : if cdr_pll_lpd_counter /= 2 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_lpfd_counter_check : if cdr_pll_lpfd_counter /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_n_counter_scratch_check : if cdr_pll_n_counter_scratch /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_output_clock_frequency_check : if cdr_pll_output_clock_frequency /= "2500000000 Hz" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_reference_clock_frequency_check : if cdr_pll_reference_clock_frequency /= "100000000 hz" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_set_cdr_vco_speed_check : if cdr_pll_set_cdr_vco_speed /= 2 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_set_cdr_vco_speed_fix_check : if cdr_pll_set_cdr_vco_speed_fix /= 117 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_vco_freq_check : if cdr_pll_vco_freq /= "5000000000 Hz" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_atb_select_control_check : if cdr_pll_atb_select_control /= "atb_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_auto_reset_on_check : if cdr_pll_auto_reset_on /= "auto_reset_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_bbpd_data_pattern_filter_select_check : if cdr_pll_bbpd_data_pattern_filter_select /= "bbpd_data_pat_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_bw_sel_check : if cdr_pll_bw_sel /= "medium" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_cdr_odi_select_check : if cdr_pll_cdr_odi_select /= "sel_cdr" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_cdr_phaselock_mode_check : if cdr_pll_cdr_phaselock_mode /= "no_ignore_lock" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_cdr_powerdown_mode_check : if cdr_pll_cdr_powerdown_mode /= "power_up" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_chgpmp_current_pd_check : if cdr_pll_chgpmp_current_pd /= "cp_current_pd_setting0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_chgpmp_current_pfd_check : if cdr_pll_chgpmp_current_pfd /= "cp_current_pfd_setting1" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_chgpmp_replicate_check : if cdr_pll_chgpmp_replicate /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_chgpmp_testmode_check : if cdr_pll_chgpmp_testmode /= "cp_test_disable" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_clklow_mux_select_check : if cdr_pll_clklow_mux_select /= "clklow_mux_cdr_fbclk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_diag_loopback_enable_check : if cdr_pll_diag_loopback_enable /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_disable_up_dn_check : if cdr_pll_disable_up_dn /= "true" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_fref_clklow_div_check : if cdr_pll_fref_clklow_div /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_fref_mux_select_check : if cdr_pll_fref_mux_select /= "fref_mux_cdr_refclk" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_gpon_lck2ref_control_check : if cdr_pll_gpon_lck2ref_control /= "gpon_lck2ref_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_initial_settings_check : if cdr_pll_initial_settings /= "true" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_lck2ref_delay_control_check : if cdr_pll_lck2ref_delay_control /= "lck2ref_delay_2" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_lf_resistor_pd_check : if cdr_pll_lf_resistor_pd /= "lf_pd_setting3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_lf_resistor_pfd_check : if cdr_pll_lf_resistor_pfd /= "lf_pfd_setting3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_lf_ripple_cap_check : if cdr_pll_lf_ripple_cap /= "lf_no_ripple" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_loop_filter_bias_select_check : if cdr_pll_loop_filter_bias_select /= "lpflt_bias_7" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_loopback_mode_check : if cdr_pll_loopback_mode /= "loopback_disabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_ltd_ltr_micro_controller_select_check : if cdr_pll_ltd_ltr_micro_controller_select /= "ltd_ltr_pcs" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_m_counter_check : if cdr_pll_m_counter /= 50 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_n_counter_check : if cdr_pll_n_counter /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_pd_fastlock_mode_check : if cdr_pll_pd_fastlock_mode /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_pd_l_counter_check : if cdr_pll_pd_l_counter /= 2 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_pfd_l_counter_check : if cdr_pll_pfd_l_counter /= 1 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_primary_use_check : if cdr_pll_primary_use /= "cdr" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_prot_mode_check : if cdr_pll_prot_mode /= "pcie_gen3_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_reverse_serial_loopback_check : if cdr_pll_reverse_serial_loopback /= "no_loopback" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_set_cdr_v2i_enable_check : if cdr_pll_set_cdr_v2i_enable /= "true" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_set_cdr_vco_reset_check : if cdr_pll_set_cdr_vco_reset /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_set_cdr_vco_speed_pciegen3_check : if cdr_pll_set_cdr_vco_speed_pciegen3 /= "cdr_vco_max_speedbin_pciegen3" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_sup_mode_check : if cdr_pll_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_tx_pll_prot_mode_check : if cdr_pll_tx_pll_prot_mode /= "txpll_unused" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_txpll_hclk_driver_enable_check : if cdr_pll_txpll_hclk_driver_enable /= "false" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_vco_overrange_voltage_check : if cdr_pll_vco_overrange_voltage /= "vco_overrange_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_vco_underrange_voltage_check : if cdr_pll_vco_underrange_voltage /= "vco_underange_off" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_fb_select_check : if cdr_pll_fb_select /= "direct_fb" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_uc_ro_cal_check : if cdr_pll_uc_ro_cal /= "uc_ro_cal_on" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_iqclk_mux_sel_check : if cdr_pll_iqclk_mux_sel /= "power_down" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_pcie_gen_check : if cdr_pll_pcie_gen /= "pcie_gen3_100mhzref" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_set_cdr_input_freq_range_check : if cdr_pll_set_cdr_input_freq_range /= 0 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_chgpmp_current_dn_trim_check : if cdr_pll_chgpmp_current_dn_trim /= "cp_current_trimming_dn_setting0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_chgpmp_up_pd_trim_double_check : if cdr_pll_chgpmp_up_pd_trim_double /= "normal_up_trim_current" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_chgpmp_current_up_pd_check : if cdr_pll_chgpmp_current_up_pd /= "cp_current_pd_up_setting4" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_chgpmp_current_up_trim_check : if cdr_pll_chgpmp_current_up_trim /= "cp_current_trimming_up_setting0" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_chgpmp_dn_pd_trim_double_check : if cdr_pll_chgpmp_dn_pd_trim_double /= "normal_dn_trim_current" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_cal_vco_count_length_check : if cdr_pll_cal_vco_count_length /= "sel_8b_count" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	cdr_pll_chgpmp_current_dn_pd_check : if cdr_pll_chgpmp_current_dn_pd /= "cp_current_pd_dn_setting4" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_deser_clkdiv_source_check : if pma_rx_deser_clkdiv_source /= "vco_bypass_normal" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_deser_clkdivrx_user_mode_check : if pma_rx_deser_clkdivrx_user_mode /= "clkdivrx_user_disabled" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_deser_datarate_check : if pma_rx_deser_datarate /= "5000000000 bps" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_deser_deser_factor_check : if pma_rx_deser_deser_factor /= 10 generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_deser_force_clkdiv_for_testing_check : if pma_rx_deser_force_clkdiv_for_testing /= "normal_clkdiv" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_deser_sdclk_enable_check : if pma_rx_deser_sdclk_enable /= "true" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_deser_sup_mode_check : if pma_rx_deser_sup_mode /= "user_mode" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_deser_rst_n_adapt_odi_check : if pma_rx_deser_rst_n_adapt_odi /= "no_rst_adapt_odi" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_deser_bitslip_bypass_check : if pma_rx_deser_bitslip_bypass /= "bs_bypass_yes" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_deser_prot_mode_check : if pma_rx_deser_prot_mode /= "pcie_gen3_rx" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_deser_pcie_gen_check : if pma_rx_deser_pcie_gen /= "pcie_gen3_100mhzref" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	pma_rx_deser_pcie_gen_bitwidth_check : if pma_rx_deser_pcie_gen_bitwidth /= "pcie_gen3_32b" generate
		assert false report "Supplied generics do not match expected generics" severity Failure;
	end generate;

	phy_g3x8 : component gidel_hawkeye_pcie_altera_xcvr_native_a10_181.phy_g3x8_pkg.gidel_hawkeye_pcie_altera_xcvr_native_a10_181_pl72g5a
		generic map (
			device_revision                                                        => "20nm3",
			duplex_mode                                                            => "duplex",
			channels                                                               => 8,
			enable_calibration                                                     => 1,
			enable_analog_resets                                                   => 1,
			enable_reset_sequence                                                  => 1,
			bonded_mode                                                            => "pma_pcs",
			pcs_bonding_master                                                     => 3,
			plls                                                                   => 2,
			number_physical_bonding_clocks                                         => 1,
			cdr_refclk_cnt                                                         => 1,
			enable_hip                                                             => 1,
			hip_cal_en                                                             => "enable",
			rcfg_enable                                                            => 1,
			rcfg_shared                                                            => 1,
			rcfg_jtag_enable                                                       => 0,
			rcfg_separate_avmm_busy                                                => 0,
			adme_prot_mode                                                         => "pipe_g3",
			adme_data_rate                                                         => "5000000000",
			enable_pcie_dfe_ip                                                     => false,
			sim_reduced_counters                                                   => false,
			disable_continuous_dfe                                                 => false,
			dbg_embedded_debug_enable                                              => 0,
			dbg_capability_reg_enable                                              => 0,
			dbg_user_identifier                                                    => 0,
			dbg_stat_soft_logic_enable                                             => 0,
			dbg_ctrl_soft_logic_enable                                             => 0,
			dbg_prbs_soft_logic_enable                                             => 0,
			dbg_odi_soft_logic_enable                                              => 0,
			rcfg_emb_strm_enable                                                   => 0,
			rcfg_profile_cnt                                                       => 2,
			hssi_gen3_rx_pcs_block_sync                                            => "enable_block_sync",
			hssi_gen3_rx_pcs_block_sync_sm                                         => "enable_blk_sync_sm",
			hssi_gen3_rx_pcs_cdr_ctrl_force_unalgn                                 => "enable",
			hssi_gen3_rx_pcs_lpbk_force                                            => "lpbk_frce_en",
			hssi_gen3_rx_pcs_mode                                                  => "gen3_func",
			hssi_gen3_rx_pcs_rate_match_fifo                                       => "enable_rm_fifo_600ppm",
			hssi_gen3_rx_pcs_rate_match_fifo_latency                               => "regular_latency",
			hssi_gen3_rx_pcs_reverse_lpbk                                          => "rev_lpbk_en",
			hssi_gen3_rx_pcs_rx_b4gb_par_lpbk                                      => "b4gb_par_lpbk_dis",
			hssi_gen3_rx_pcs_rx_force_balign                                       => "en_force_balign",
			hssi_gen3_rx_pcs_rx_ins_del_one_skip                                   => "ins_del_one_skip_en",
			hssi_gen3_rx_pcs_rx_num_fixed_pat                                      => 8,
			hssi_gen3_rx_pcs_rx_test_out_sel                                       => "rx_test_out0",
			hssi_gen3_rx_pcs_sup_mode                                              => "user_mode",
			hssi_gen3_tx_pcs_mode                                                  => "gen3_func",
			hssi_gen3_tx_pcs_reverse_lpbk                                          => "rev_lpbk_en",
			hssi_gen3_tx_pcs_sup_mode                                              => "user_mode",
			hssi_gen3_tx_pcs_tx_bitslip                                            => 0,
			hssi_gen3_tx_pcs_tx_gbox_byp                                           => "enable_gbox",
			hssi_krfec_rx_pcs_blksync_cor_en                                       => "detect",
			hssi_krfec_rx_pcs_bypass_gb                                            => "bypass_dis",
			hssi_krfec_rx_pcs_clr_ctrl                                             => "both_enabled",
			hssi_krfec_rx_pcs_ctrl_bit_reverse                                     => "ctrl_bit_reverse_en",
			hssi_krfec_rx_pcs_data_bit_reverse                                     => "data_bit_reverse_dis",
			hssi_krfec_rx_pcs_dv_start                                             => "with_blklock",
			hssi_krfec_rx_pcs_err_mark_type                                        => "err_mark_10g",
			hssi_krfec_rx_pcs_error_marking_en                                     => "err_mark_dis",
			hssi_krfec_rx_pcs_low_latency_en                                       => "disable",
			hssi_krfec_rx_pcs_lpbk_mode                                            => "lpbk_dis",
			hssi_krfec_rx_pcs_parity_invalid_enum                                  => 8,
			hssi_krfec_rx_pcs_parity_valid_num                                     => 4,
			hssi_krfec_rx_pcs_pipeln_blksync                                       => "enable",
			hssi_krfec_rx_pcs_pipeln_descrm                                        => "disable",
			hssi_krfec_rx_pcs_pipeln_errcorrect                                    => "disable",
			hssi_krfec_rx_pcs_pipeln_errtrap_ind                                   => "enable",
			hssi_krfec_rx_pcs_pipeln_errtrap_lfsr                                  => "disable",
			hssi_krfec_rx_pcs_pipeln_errtrap_loc                                   => "disable",
			hssi_krfec_rx_pcs_pipeln_errtrap_pat                                   => "disable",
			hssi_krfec_rx_pcs_pipeln_gearbox                                       => "enable",
			hssi_krfec_rx_pcs_pipeln_syndrm                                        => "enable",
			hssi_krfec_rx_pcs_pipeln_trans_dec                                     => "disable",
			hssi_krfec_rx_pcs_prot_mode                                            => "disable_mode",
			hssi_krfec_rx_pcs_receive_order                                        => "receive_lsb",
			hssi_krfec_rx_pcs_rx_testbus_sel                                       => "overall",
			hssi_krfec_rx_pcs_signal_ok_en                                         => "sig_ok_en",
			hssi_krfec_rx_pcs_sup_mode                                             => "user_mode",
			hssi_krfec_tx_pcs_burst_err                                            => "burst_err_dis",
			hssi_krfec_tx_pcs_burst_err_len                                        => "burst_err_len1",
			hssi_krfec_tx_pcs_ctrl_bit_reverse                                     => "ctrl_bit_reverse_en",
			hssi_krfec_tx_pcs_data_bit_reverse                                     => "data_bit_reverse_dis",
			hssi_krfec_tx_pcs_enc_frame_query                                      => "enc_query_dis",
			hssi_krfec_tx_pcs_low_latency_en                                       => "disable",
			hssi_krfec_tx_pcs_pipeln_encoder                                       => "enable",
			hssi_krfec_tx_pcs_pipeln_scrambler                                     => "enable",
			hssi_krfec_tx_pcs_prot_mode                                            => "disable_mode",
			hssi_krfec_tx_pcs_sup_mode                                             => "user_mode",
			hssi_krfec_tx_pcs_transcode_err                                        => "trans_err_dis",
			hssi_krfec_tx_pcs_transmit_order                                       => "transmit_lsb",
			hssi_krfec_tx_pcs_tx_testbus_sel                                       => "overall",
			hssi_10g_rx_pcs_align_del                                              => "align_del_dis",
			hssi_10g_rx_pcs_ber_bit_err_total_cnt                                  => "bit_err_total_cnt_10g",
			hssi_10g_rx_pcs_ber_clken                                              => "ber_clk_dis",
			hssi_10g_rx_pcs_ber_xus_timer_window                                   => 19530,
			hssi_10g_rx_pcs_bitslip_mode                                           => "bitslip_dis",
			hssi_10g_rx_pcs_blksync_bitslip_type                                   => "bitslip_comb",
			hssi_10g_rx_pcs_blksync_bitslip_wait_cnt                               => 1,
			hssi_10g_rx_pcs_blksync_bitslip_wait_type                              => "bitslip_cnt",
			hssi_10g_rx_pcs_blksync_bypass                                         => "blksync_bypass_en",
			hssi_10g_rx_pcs_blksync_clken                                          => "blksync_clk_dis",
			hssi_10g_rx_pcs_blksync_enum_invalid_sh_cnt                            => "enum_invalid_sh_cnt_10g",
			hssi_10g_rx_pcs_blksync_knum_sh_cnt_postlock                           => "knum_sh_cnt_postlock_10g",
			hssi_10g_rx_pcs_blksync_knum_sh_cnt_prelock                            => "knum_sh_cnt_prelock_10g",
			hssi_10g_rx_pcs_blksync_pipeln                                         => "blksync_pipeln_dis",
			hssi_10g_rx_pcs_clr_errblk_cnt_en                                      => "disable",
			hssi_10g_rx_pcs_control_del                                            => "control_del_none",
			hssi_10g_rx_pcs_crcchk_bypass                                          => "crcchk_bypass_en",
			hssi_10g_rx_pcs_crcchk_clken                                           => "crcchk_clk_dis",
			hssi_10g_rx_pcs_crcchk_inv                                             => "crcchk_inv_en",
			hssi_10g_rx_pcs_crcchk_pipeln                                          => "crcchk_pipeln_en",
			hssi_10g_rx_pcs_crcflag_pipeln                                         => "crcflag_pipeln_en",
			hssi_10g_rx_pcs_ctrl_bit_reverse                                       => "ctrl_bit_reverse_dis",
			hssi_10g_rx_pcs_data_bit_reverse                                       => "data_bit_reverse_dis",
			hssi_10g_rx_pcs_dec_64b66b_rxsm_bypass                                 => "dec_64b66b_rxsm_bypass_en",
			hssi_10g_rx_pcs_dec64b66b_clken                                        => "dec64b66b_clk_dis",
			hssi_10g_rx_pcs_descrm_bypass                                          => "descrm_bypass_en",
			hssi_10g_rx_pcs_descrm_clken                                           => "descrm_clk_dis",
			hssi_10g_rx_pcs_descrm_mode                                            => "async",
			hssi_10g_rx_pcs_descrm_pipeln                                          => "enable",
			hssi_10g_rx_pcs_dft_clk_out_sel                                        => "rx_master_clk",
			hssi_10g_rx_pcs_dis_signal_ok                                          => "dis_signal_ok_en",
			hssi_10g_rx_pcs_dispchk_bypass                                         => "dispchk_bypass_en",
			hssi_10g_rx_pcs_empty_flag_type                                        => "empty_rd_side",
			hssi_10g_rx_pcs_fast_path                                              => "fast_path_en",
			hssi_10g_rx_pcs_fec_clken                                              => "fec_clk_dis",
			hssi_10g_rx_pcs_fec_enable                                             => "fec_dis",
			hssi_10g_rx_pcs_fifo_double_read                                       => "fifo_double_read_dis",
			hssi_10g_rx_pcs_fifo_stop_rd                                           => "n_rd_empty",
			hssi_10g_rx_pcs_fifo_stop_wr                                           => "n_wr_full",
			hssi_10g_rx_pcs_force_align                                            => "force_align_dis",
			hssi_10g_rx_pcs_frmsync_bypass                                         => "frmsync_bypass_en",
			hssi_10g_rx_pcs_frmsync_clken                                          => "frmsync_clk_dis",
			hssi_10g_rx_pcs_frmsync_enum_scrm                                      => "enum_scrm_default",
			hssi_10g_rx_pcs_frmsync_enum_sync                                      => "enum_sync_default",
			hssi_10g_rx_pcs_frmsync_flag_type                                      => "location_only",
			hssi_10g_rx_pcs_frmsync_knum_sync                                      => "knum_sync_default",
			hssi_10g_rx_pcs_frmsync_mfrm_length                                    => 2048,
			hssi_10g_rx_pcs_frmsync_pipeln                                         => "frmsync_pipeln_en",
			hssi_10g_rx_pcs_full_flag_type                                         => "full_wr_side",
			hssi_10g_rx_pcs_gb_rx_idwidth                                          => "width_64",
			hssi_10g_rx_pcs_gb_rx_odwidth                                          => "width_64",
			hssi_10g_rx_pcs_gbexp_clken                                            => "gbexp_clk_dis",
			hssi_10g_rx_pcs_low_latency_en                                         => "disable",
			hssi_10g_rx_pcs_lpbk_mode                                              => "lpbk_dis",
			hssi_10g_rx_pcs_master_clk_sel                                         => "master_rx_pma_clk",
			hssi_10g_rx_pcs_pempty_flag_type                                       => "pempty_rd_side",
			hssi_10g_rx_pcs_pfull_flag_type                                        => "pfull_wr_side",
			hssi_10g_rx_pcs_phcomp_rd_del                                          => "phcomp_rd_del2",
			hssi_10g_rx_pcs_pld_if_type                                            => "fifo",
			hssi_10g_rx_pcs_prot_mode                                              => "disable_mode",
			hssi_10g_rx_pcs_rand_clken                                             => "rand_clk_dis",
			hssi_10g_rx_pcs_rd_clk_sel                                             => "rd_rx_pld_clk",
			hssi_10g_rx_pcs_rdfifo_clken                                           => "rdfifo_clk_dis",
			hssi_10g_rx_pcs_rx_fifo_write_ctrl                                     => "blklock_stops",
			hssi_10g_rx_pcs_rx_scrm_width                                          => "bit64",
			hssi_10g_rx_pcs_rx_sh_location                                         => "msb",
			hssi_10g_rx_pcs_rx_signal_ok_sel                                       => "synchronized_ver",
			hssi_10g_rx_pcs_rx_sm_bypass                                           => "rx_sm_bypass_en",
			hssi_10g_rx_pcs_rx_sm_hiber                                            => "rx_sm_hiber_en",
			hssi_10g_rx_pcs_rx_sm_pipeln                                           => "rx_sm_pipeln_en",
			hssi_10g_rx_pcs_rx_testbus_sel                                         => "rx_fifo_testbus1",
			hssi_10g_rx_pcs_rx_true_b2b                                            => "b2b",
			hssi_10g_rx_pcs_rxfifo_empty                                           => "empty_default",
			hssi_10g_rx_pcs_rxfifo_full                                            => "full_default",
			hssi_10g_rx_pcs_rxfifo_mode                                            => "phase_comp",
			hssi_10g_rx_pcs_rxfifo_pempty                                          => 2,
			hssi_10g_rx_pcs_rxfifo_pfull                                           => 23,
			hssi_10g_rx_pcs_stretch_num_stages                                     => "zero_stage",
			hssi_10g_rx_pcs_sup_mode                                               => "user_mode",
			hssi_10g_rx_pcs_test_mode                                              => "test_off",
			hssi_10g_rx_pcs_wrfifo_clken                                           => "wrfifo_clk_dis",
			hssi_10g_rx_pcs_advanced_user_mode                                     => "disable",
			hssi_10g_tx_pcs_bitslip_en                                             => "bitslip_dis",
			hssi_10g_tx_pcs_bonding_dft_en                                         => "dft_dis",
			hssi_10g_tx_pcs_bonding_dft_val                                        => "dft_0",
			hssi_10g_tx_pcs_crcgen_bypass                                          => "crcgen_bypass_en",
			hssi_10g_tx_pcs_crcgen_clken                                           => "crcgen_clk_dis",
			hssi_10g_tx_pcs_crcgen_err                                             => "crcgen_err_dis",
			hssi_10g_tx_pcs_crcgen_inv                                             => "crcgen_inv_en",
			hssi_10g_tx_pcs_ctrl_bit_reverse                                       => "ctrl_bit_reverse_dis",
			hssi_10g_tx_pcs_data_bit_reverse                                       => "data_bit_reverse_dis",
			hssi_10g_tx_pcs_dft_clk_out_sel                                        => "tx_master_clk",
			hssi_10g_tx_pcs_dispgen_bypass                                         => "dispgen_bypass_en",
			hssi_10g_tx_pcs_dispgen_clken                                          => "dispgen_clk_dis",
			hssi_10g_tx_pcs_dispgen_err                                            => "dispgen_err_dis",
			hssi_10g_tx_pcs_dispgen_pipeln                                         => "dispgen_pipeln_dis",
			hssi_10g_tx_pcs_empty_flag_type                                        => "empty_rd_side",
			hssi_10g_tx_pcs_enc_64b66b_txsm_bypass                                 => "enc_64b66b_txsm_bypass_en",
			hssi_10g_tx_pcs_enc64b66b_txsm_clken                                   => "enc64b66b_txsm_clk_dis",
			hssi_10g_tx_pcs_fastpath                                               => "fastpath_en",
			hssi_10g_tx_pcs_fec_clken                                              => "fec_clk_dis",
			hssi_10g_tx_pcs_fec_enable                                             => "fec_dis",
			hssi_10g_tx_pcs_fifo_double_write                                      => "fifo_double_write_dis",
			hssi_10g_tx_pcs_fifo_reg_fast                                          => "fifo_reg_fast_dis",
			hssi_10g_tx_pcs_fifo_stop_rd                                           => "rd_empty",
			hssi_10g_tx_pcs_fifo_stop_wr                                           => "n_wr_full",
			hssi_10g_tx_pcs_frmgen_burst                                           => "frmgen_burst_dis",
			hssi_10g_tx_pcs_frmgen_bypass                                          => "frmgen_bypass_en",
			hssi_10g_tx_pcs_frmgen_clken                                           => "frmgen_clk_dis",
			hssi_10g_tx_pcs_frmgen_mfrm_length                                     => 2048,
			hssi_10g_tx_pcs_frmgen_pipeln                                          => "frmgen_pipeln_en",
			hssi_10g_tx_pcs_frmgen_pyld_ins                                        => "frmgen_pyld_ins_dis",
			hssi_10g_tx_pcs_frmgen_wordslip                                        => "frmgen_wordslip_dis",
			hssi_10g_tx_pcs_full_flag_type                                         => "full_wr_side",
			hssi_10g_tx_pcs_gb_pipeln_bypass                                       => "disable",
			hssi_10g_tx_pcs_gb_tx_idwidth                                          => "width_64",
			hssi_10g_tx_pcs_gb_tx_odwidth                                          => "width_64",
			hssi_10g_tx_pcs_gbred_clken                                            => "gbred_clk_dis",
			hssi_10g_tx_pcs_low_latency_en                                         => "disable",
			hssi_10g_tx_pcs_master_clk_sel                                         => "master_tx_pma_clk",
			hssi_10g_tx_pcs_pempty_flag_type                                       => "pempty_rd_side",
			hssi_10g_tx_pcs_pfull_flag_type                                        => "pfull_wr_side",
			hssi_10g_tx_pcs_phcomp_rd_del                                          => "phcomp_rd_del2",
			hssi_10g_tx_pcs_pld_if_type                                            => "fifo",
			hssi_10g_tx_pcs_prot_mode                                              => "disable_mode",
			hssi_10g_tx_pcs_pseudo_random                                          => "all_0",
			hssi_10g_tx_pcs_pseudo_seed_a                                          => "288230376151711743",
			hssi_10g_tx_pcs_pseudo_seed_b                                          => "288230376151711743",
			hssi_10g_tx_pcs_random_disp                                            => "disable",
			hssi_10g_tx_pcs_rdfifo_clken                                           => "rdfifo_clk_dis",
			hssi_10g_tx_pcs_scrm_bypass                                            => "scrm_bypass_en",
			hssi_10g_tx_pcs_scrm_clken                                             => "scrm_clk_dis",
			hssi_10g_tx_pcs_scrm_mode                                              => "async",
			hssi_10g_tx_pcs_scrm_pipeln                                            => "enable",
			hssi_10g_tx_pcs_sh_err                                                 => "sh_err_dis",
			hssi_10g_tx_pcs_sop_mark                                               => "sop_mark_dis",
			hssi_10g_tx_pcs_stretch_num_stages                                     => "zero_stage",
			hssi_10g_tx_pcs_sup_mode                                               => "user_mode",
			hssi_10g_tx_pcs_test_mode                                              => "test_off",
			hssi_10g_tx_pcs_tx_scrm_err                                            => "scrm_err_dis",
			hssi_10g_tx_pcs_tx_scrm_width                                          => "bit64",
			hssi_10g_tx_pcs_tx_sh_location                                         => "msb",
			hssi_10g_tx_pcs_tx_sm_bypass                                           => "tx_sm_bypass_en",
			hssi_10g_tx_pcs_tx_sm_pipeln                                           => "tx_sm_pipeln_en",
			hssi_10g_tx_pcs_tx_testbus_sel                                         => "tx_fifo_testbus1",
			hssi_10g_tx_pcs_txfifo_empty                                           => "empty_default",
			hssi_10g_tx_pcs_txfifo_full                                            => "full_default",
			hssi_10g_tx_pcs_txfifo_mode                                            => "phase_comp",
			hssi_10g_tx_pcs_txfifo_pempty                                          => 2,
			hssi_10g_tx_pcs_txfifo_pfull                                           => 11,
			hssi_10g_tx_pcs_wr_clk_sel                                             => "wr_tx_pld_clk",
			hssi_10g_tx_pcs_wrfifo_clken                                           => "wrfifo_clk_dis",
			hssi_10g_tx_pcs_advanced_user_mode                                     => "disable",
			hssi_8g_rx_pcs_auto_error_replacement                                  => "en_err_replace",
			hssi_8g_rx_pcs_bit_reversal                                            => "dis_bit_reversal",
			hssi_8g_rx_pcs_bonding_dft_en                                          => "dft_dis",
			hssi_8g_rx_pcs_bonding_dft_val                                         => "dft_0",
			hssi_8g_rx_pcs_bypass_pipeline_reg                                     => "dis_bypass_pipeline",
			hssi_8g_rx_pcs_byte_deserializer                                       => "en_bds_by_4",
			hssi_8g_rx_pcs_cdr_ctrl_rxvalid_mask                                   => "en_rxvalid_mask",
			hssi_8g_rx_pcs_clkcmp_pattern_n                                        => 192892,
			hssi_8g_rx_pcs_clkcmp_pattern_p                                        => 855683,
			hssi_8g_rx_pcs_clock_gate_bds_dec_asn                                  => "dis_bds_dec_asn_clk_gating",
			hssi_8g_rx_pcs_clock_gate_cdr_eidle                                    => "dis_cdr_eidle_clk_gating",
			hssi_8g_rx_pcs_clock_gate_dw_pc_wrclk                                  => "en_dw_pc_wrclk_gating",
			hssi_8g_rx_pcs_clock_gate_dw_rm_rd                                     => "en_dw_rm_rdclk_gating",
			hssi_8g_rx_pcs_clock_gate_dw_rm_wr                                     => "en_dw_rm_wrclk_gating",
			hssi_8g_rx_pcs_clock_gate_dw_wa                                        => "en_dw_wa_clk_gating",
			hssi_8g_rx_pcs_clock_gate_pc_rdclk                                     => "dis_pc_rdclk_gating",
			hssi_8g_rx_pcs_clock_gate_sw_pc_wrclk                                  => "dis_sw_pc_wrclk_gating",
			hssi_8g_rx_pcs_clock_gate_sw_rm_rd                                     => "dis_sw_rm_rdclk_gating",
			hssi_8g_rx_pcs_clock_gate_sw_rm_wr                                     => "dis_sw_rm_wrclk_gating",
			hssi_8g_rx_pcs_clock_gate_sw_wa                                        => "dis_sw_wa_clk_gating",
			hssi_8g_rx_pcs_clock_observation_in_pld_core                           => "internal_sw_wa_clk",
			hssi_8g_rx_pcs_eidle_entry_eios                                        => "dis_eidle_eios",
			hssi_8g_rx_pcs_eidle_entry_iei                                         => "dis_eidle_iei",
			hssi_8g_rx_pcs_eidle_entry_sd                                          => "en_eidle_sd",
			hssi_8g_rx_pcs_eightb_tenb_decoder                                     => "en_8b10b_ibm",
			hssi_8g_rx_pcs_err_flags_sel                                           => "err_flags_wa",
			hssi_8g_rx_pcs_fixed_pat_det                                           => "dis_fixed_patdet",
			hssi_8g_rx_pcs_fixed_pat_num                                           => 0,
			hssi_8g_rx_pcs_force_signal_detect                                     => "en_force_signal_detect",
			hssi_8g_rx_pcs_gen3_clk_en                                             => "enable_clk",
			hssi_8g_rx_pcs_gen3_rx_clk_sel                                         => "rcvd_clk",
			hssi_8g_rx_pcs_gen3_tx_clk_sel                                         => "tx_pma_clk",
			hssi_8g_rx_pcs_hip_mode                                                => "en_hip",
			hssi_8g_rx_pcs_ibm_invalid_code                                        => "dis_ibm_invalid_code",
			hssi_8g_rx_pcs_invalid_code_flag_only                                  => "dis_invalid_code_only",
			hssi_8g_rx_pcs_pad_or_edb_error_replace                                => "replace_edb_dynamic",
			hssi_8g_rx_pcs_pcs_bypass                                              => "dis_pcs_bypass",
			hssi_8g_rx_pcs_phase_comp_rdptr                                        => "disable_rdptr",
			hssi_8g_rx_pcs_phase_compensation_fifo                                 => "register_fifo",
			hssi_8g_rx_pcs_pipe_if_enable                                          => "en_pipe3_rx",
			hssi_8g_rx_pcs_pma_dw                                                  => "ten_bit",
			hssi_8g_rx_pcs_polinv_8b10b_dec                                        => "en_polinv_8b10b_dec",
			hssi_8g_rx_pcs_prot_mode                                               => "pipe_g3",
			hssi_8g_rx_pcs_rate_match                                              => "pipe_rm",
			hssi_8g_rx_pcs_rate_match_del_thres                                    => "pipe_rm_del_thres",
			hssi_8g_rx_pcs_rate_match_empty_thres                                  => "pipe_rm_empty_thres",
			hssi_8g_rx_pcs_rate_match_full_thres                                   => "pipe_rm_full_thres",
			hssi_8g_rx_pcs_rate_match_ins_thres                                    => "pipe_rm_ins_thres",
			hssi_8g_rx_pcs_rate_match_start_thres                                  => "pipe_rm_start_thres",
			hssi_8g_rx_pcs_rx_clk_free_running                                     => "en_rx_clk_free_run",
			hssi_8g_rx_pcs_rx_clk2                                                 => "tx_pma_clock_clk2",
			hssi_8g_rx_pcs_rx_pcs_urst                                             => "en_rx_pcs_urst",
			hssi_8g_rx_pcs_rx_rcvd_clk                                             => "rcvd_clk_rcvd_clk",
			hssi_8g_rx_pcs_rx_rd_clk                                               => "rx_clk",
			hssi_8g_rx_pcs_rx_refclk                                               => "dis_refclk_sel",
			hssi_8g_rx_pcs_rx_wr_clk                                               => "txfifo_rd_clk",
			hssi_8g_rx_pcs_sup_mode                                                => "user_mode",
			hssi_8g_rx_pcs_symbol_swap                                             => "dis_symbol_swap",
			hssi_8g_rx_pcs_sync_sm_idle_eios                                       => "en_syncsm_idle",
			hssi_8g_rx_pcs_test_bus_sel                                            => "tx_testbus",
			hssi_8g_rx_pcs_tx_rx_parallel_loopback                                 => "dis_plpbk",
			hssi_8g_rx_pcs_wa_boundary_lock_ctrl                                   => "sync_sm",
			hssi_8g_rx_pcs_wa_clk_slip_spacing                                     => 16,
			hssi_8g_rx_pcs_wa_det_latency_sync_status_beh                          => "dont_care_assert_sync",
			hssi_8g_rx_pcs_wa_disp_err_flag                                        => "en_disp_err_flag",
			hssi_8g_rx_pcs_wa_kchar                                                => "dis_kchar",
			hssi_8g_rx_pcs_wa_pd                                                   => "wa_pd_10",
			hssi_8g_rx_pcs_wa_pd_data                                              => "380",
			hssi_8g_rx_pcs_wa_pd_polarity                                          => "dont_care_both_pol",
			hssi_8g_rx_pcs_wa_pld_controlled                                       => "dis_pld_ctrl",
			hssi_8g_rx_pcs_wa_renumber_data                                        => 16,
			hssi_8g_rx_pcs_wa_rgnumber_data                                        => 15,
			hssi_8g_rx_pcs_wa_rknumber_data                                        => 3,
			hssi_8g_rx_pcs_wa_rosnumber_data                                       => 0,
			hssi_8g_rx_pcs_wa_rvnumber_data                                        => 0,
			hssi_8g_rx_pcs_wa_sync_sm_ctrl                                         => "pipe_sync_sm",
			hssi_8g_rx_pcs_wait_cnt                                                => 0,
			hssi_8g_tx_pcs_bit_reversal                                            => "dis_bit_reversal",
			hssi_8g_tx_pcs_bonding_dft_en                                          => "dft_dis",
			hssi_8g_tx_pcs_bonding_dft_val                                         => "dft_0",
			hssi_8g_tx_pcs_bypass_pipeline_reg                                     => "dis_bypass_pipeline",
			hssi_8g_tx_pcs_byte_serializer                                         => "en_bs_by_4",
			hssi_8g_tx_pcs_clock_gate_bs_enc                                       => "dis_bs_enc_clk_gating",
			hssi_8g_tx_pcs_clock_gate_dw_fifowr                                    => "en_dw_fifowr_clk_gating",
			hssi_8g_tx_pcs_clock_gate_fiford                                       => "dis_fiford_clk_gating",
			hssi_8g_tx_pcs_clock_gate_sw_fifowr                                    => "dis_sw_fifowr_clk_gating",
			hssi_8g_tx_pcs_clock_observation_in_pld_core                           => "internal_refclk_b",
			hssi_8g_tx_pcs_data_selection_8b10b_encoder_input                      => "normal_data_path",
			hssi_8g_tx_pcs_dynamic_clk_switch                                      => "en_dyn_clk_switch",
			hssi_8g_tx_pcs_eightb_tenb_disp_ctrl                                   => "en_disp_ctrl",
			hssi_8g_tx_pcs_eightb_tenb_encoder                                     => "en_8b10b_ibm",
			hssi_8g_tx_pcs_force_echar                                             => "dis_force_echar",
			hssi_8g_tx_pcs_force_kchar                                             => "dis_force_kchar",
			hssi_8g_tx_pcs_gen3_tx_clk_sel                                         => "tx_pma_clk",
			hssi_8g_tx_pcs_gen3_tx_pipe_clk_sel                                    => "func_clk",
			hssi_8g_tx_pcs_hip_mode                                                => "en_hip",
			hssi_8g_tx_pcs_pcs_bypass                                              => "dis_pcs_bypass",
			hssi_8g_tx_pcs_phase_comp_rdptr                                        => "disable_rdptr",
			hssi_8g_tx_pcs_phase_compensation_fifo                                 => "register_fifo",
			hssi_8g_tx_pcs_phfifo_write_clk_sel                                    => "tx_clk",
			hssi_8g_tx_pcs_pma_dw                                                  => "ten_bit",
			hssi_8g_tx_pcs_prot_mode                                               => "pipe_g3",
			hssi_8g_tx_pcs_refclk_b_clk_sel                                        => "tx_pma_clock",
			hssi_8g_tx_pcs_revloop_back_rm                                         => "en_rev_loopback_rx_rm",
			hssi_8g_tx_pcs_sup_mode                                                => "user_mode",
			hssi_8g_tx_pcs_symbol_swap                                             => "dis_symbol_swap",
			hssi_8g_tx_pcs_tx_bitslip                                              => "dis_tx_bitslip",
			hssi_8g_tx_pcs_tx_compliance_controlled_disparity                      => "en_txcompliance_pipe3p0",
			hssi_8g_tx_pcs_tx_fast_pld_reg                                         => "dis_tx_fast_pld_reg",
			hssi_8g_tx_pcs_txclk_freerun                                           => "en_freerun_tx",
			hssi_8g_tx_pcs_txpcs_urst                                              => "en_txpcs_urst",
			hssi_tx_pld_pcs_interface_hd_chnl_hip_en                               => "enable",
			hssi_tx_pld_pcs_interface_hd_chnl_hrdrstctl_en                         => "enable",
			hssi_tx_pld_pcs_interface_hd_chnl_prot_mode_tx                         => "pcie_g3_capable_tx",
			hssi_tx_pld_pcs_interface_hd_chnl_ctrl_plane_bonding_tx                => "ctrl_master_tx",
			hssi_tx_pld_pcs_interface_hd_chnl_pma_dw_tx                            => "pcie_g3_dyn_dw_tx",
			hssi_tx_pld_pcs_interface_hd_chnl_pld_fifo_mode_tx                     => "reg_tx",
			hssi_tx_pld_pcs_interface_hd_chnl_shared_fifo_width_tx                 => "single_tx",
			hssi_tx_pld_pcs_interface_hd_chnl_low_latency_en_tx                    => "disable",
			hssi_tx_pld_pcs_interface_hd_chnl_func_mode                            => "enable",
			hssi_tx_pld_pcs_interface_hd_chnl_channel_operation_mode               => "tx_rx_pair_enabled",
			hssi_tx_pld_pcs_interface_hd_chnl_lpbk_en                              => "disable",
			hssi_tx_pld_pcs_interface_hd_chnl_frequency_rules_en                   => "enable",
			hssi_tx_pld_pcs_interface_hd_chnl_pma_tx_clk_hz                        => 500000000,
			hssi_tx_pld_pcs_interface_hd_chnl_pld_tx_clk_hz                        => 0,
			hssi_tx_pld_pcs_interface_hd_chnl_pld_uhsif_tx_clk_hz                  => 0,
			hssi_tx_pld_pcs_interface_hd_fifo_channel_operation_mode               => "tx_rx_pair_enabled",
			hssi_tx_pld_pcs_interface_hd_fifo_prot_mode_tx                         => "non_teng_mode_tx",
			hssi_tx_pld_pcs_interface_hd_fifo_shared_fifo_width_tx                 => "single_tx",
			hssi_tx_pld_pcs_interface_hd_10g_channel_operation_mode                => "tx_rx_pair_enabled",
			hssi_tx_pld_pcs_interface_hd_10g_lpbk_en                               => "disable",
			hssi_tx_pld_pcs_interface_hd_10g_advanced_user_mode_tx                 => "disable",
			hssi_tx_pld_pcs_interface_hd_10g_pma_dw_tx                             => "pma_64b_tx",
			hssi_tx_pld_pcs_interface_hd_10g_fifo_mode_tx                          => "fifo_tx",
			hssi_tx_pld_pcs_interface_hd_10g_prot_mode_tx                          => "disabled_prot_mode_tx",
			hssi_tx_pld_pcs_interface_hd_10g_low_latency_en_tx                     => "disable",
			hssi_tx_pld_pcs_interface_hd_10g_shared_fifo_width_tx                  => "single_tx",
			hssi_tx_pld_pcs_interface_hd_8g_channel_operation_mode                 => "tx_rx_pair_enabled",
			hssi_tx_pld_pcs_interface_hd_8g_lpbk_en                                => "disable",
			hssi_tx_pld_pcs_interface_hd_8g_prot_mode_tx                           => "pipe_g3_tx",
			hssi_tx_pld_pcs_interface_hd_8g_hip_mode                               => "enable",
			hssi_tx_pld_pcs_interface_hd_8g_pma_dw_tx                              => "pma_10b_tx",
			hssi_tx_pld_pcs_interface_hd_8g_fifo_mode_tx                           => "reg_tx",
			hssi_tx_pld_pcs_interface_hd_g3_prot_mode                              => "pipe_g3",
			hssi_tx_pld_pcs_interface_hd_krfec_channel_operation_mode              => "tx_rx_pair_enabled",
			hssi_tx_pld_pcs_interface_hd_krfec_lpbk_en                             => "disable",
			hssi_tx_pld_pcs_interface_hd_krfec_prot_mode_tx                        => "disabled_prot_mode_tx",
			hssi_tx_pld_pcs_interface_hd_krfec_low_latency_en_tx                   => "disable",
			hssi_tx_pld_pcs_interface_hd_pmaif_lpbk_en                             => "disable",
			hssi_tx_pld_pcs_interface_hd_pmaif_channel_operation_mode              => "tx_rx_pair_enabled",
			hssi_tx_pld_pcs_interface_hd_pmaif_sim_mode                            => "disable",
			hssi_tx_pld_pcs_interface_hd_pmaif_prot_mode_tx                        => "eightg_g3_pcie_g3_hip_mode_tx",
			hssi_tx_pld_pcs_interface_hd_pmaif_pma_dw_tx                           => "pcie_g3_dyn_dw_tx",
			hssi_tx_pld_pcs_interface_hd_pldif_prot_mode_tx                        => "eightg_and_g3_reg_mode_hip_tx",
			hssi_tx_pld_pcs_interface_hd_pldif_hrdrstctl_en                        => "enable",
			hssi_tx_pld_pcs_interface_pcs_tx_clk_source                            => "eightg",
			hssi_tx_pld_pcs_interface_pcs_tx_data_source                           => "hip_enable",
			hssi_tx_pld_pcs_interface_pcs_tx_delay1_clk_en                         => "delay1_clk_disable",
			hssi_tx_pld_pcs_interface_pcs_tx_delay1_clk_sel                        => "pcs_tx_clk",
			hssi_tx_pld_pcs_interface_pcs_tx_delay1_ctrl                           => "delay1_path0",
			hssi_tx_pld_pcs_interface_pcs_tx_delay1_data_sel                       => "one_ff_delay",
			hssi_tx_pld_pcs_interface_pcs_tx_delay2_clk_en                         => "delay2_clk_disable",
			hssi_tx_pld_pcs_interface_pcs_tx_delay2_ctrl                           => "delay2_path0",
			hssi_tx_pld_pcs_interface_pcs_tx_output_sel                            => "teng_output",
			hssi_tx_pld_pcs_interface_pcs_tx_clk_out_sel                           => "eightg_clk_out",
			hssi_rx_pld_pcs_interface_hd_chnl_hip_en                               => "enable",
			hssi_rx_pld_pcs_interface_hd_chnl_transparent_pcs_rx                   => "disable",
			hssi_rx_pld_pcs_interface_hd_chnl_hrdrstctl_en                         => "enable",
			hssi_rx_pld_pcs_interface_hd_chnl_prot_mode_rx                         => "pcie_g3_capable_rx",
			hssi_rx_pld_pcs_interface_hd_chnl_ctrl_plane_bonding_rx                => "ctrl_master_rx",
			hssi_rx_pld_pcs_interface_hd_chnl_pma_dw_rx                            => "pcie_g3_dyn_dw_rx",
			hssi_rx_pld_pcs_interface_hd_chnl_pld_fifo_mode_rx                     => "reg_rx",
			hssi_rx_pld_pcs_interface_hd_chnl_shared_fifo_width_rx                 => "single_rx",
			hssi_rx_pld_pcs_interface_hd_chnl_low_latency_en_rx                    => "disable",
			hssi_rx_pld_pcs_interface_hd_chnl_func_mode                            => "enable",
			hssi_rx_pld_pcs_interface_hd_chnl_channel_operation_mode               => "tx_rx_pair_enabled",
			hssi_rx_pld_pcs_interface_hd_chnl_lpbk_en                              => "disable",
			hssi_rx_pld_pcs_interface_hd_10g_advanced_user_mode_rx                 => "disable",
			hssi_rx_pld_pcs_interface_hd_chnl_frequency_rules_en                   => "enable",
			hssi_rx_pld_pcs_interface_hd_chnl_pma_rx_clk_hz                        => 500000000,
			hssi_rx_pld_pcs_interface_hd_chnl_pld_rx_clk_hz                        => 0,
			hssi_rx_pld_pcs_interface_hd_chnl_fref_clk_hz                          => 100000000,
			hssi_rx_pld_pcs_interface_hd_chnl_clklow_clk_hz                        => 100000000,
			hssi_rx_pld_pcs_interface_hd_fifo_channel_operation_mode               => "tx_rx_pair_enabled",
			hssi_rx_pld_pcs_interface_hd_fifo_prot_mode_rx                         => "non_teng_mode_rx",
			hssi_rx_pld_pcs_interface_hd_fifo_shared_fifo_width_rx                 => "single_rx",
			hssi_rx_pld_pcs_interface_hd_10g_channel_operation_mode                => "tx_rx_pair_enabled",
			hssi_rx_pld_pcs_interface_hd_10g_lpbk_en                               => "disable",
			hssi_rx_pld_pcs_interface_hd_10g_pma_dw_rx                             => "pma_64b_rx",
			hssi_rx_pld_pcs_interface_hd_10g_fifo_mode_rx                          => "fifo_rx",
			hssi_rx_pld_pcs_interface_hd_10g_prot_mode_rx                          => "disabled_prot_mode_rx",
			hssi_rx_pld_pcs_interface_hd_10g_low_latency_en_rx                     => "disable",
			hssi_rx_pld_pcs_interface_hd_10g_shared_fifo_width_rx                  => "single_rx",
			hssi_rx_pld_pcs_interface_hd_10g_test_bus_mode                         => "rx",
			hssi_rx_pld_pcs_interface_hd_8g_channel_operation_mode                 => "tx_rx_pair_enabled",
			hssi_rx_pld_pcs_interface_hd_8g_lpbk_en                                => "disable",
			hssi_rx_pld_pcs_interface_hd_8g_prot_mode_rx                           => "pipe_g3_rx",
			hssi_rx_pld_pcs_interface_hd_8g_hip_mode                               => "enable",
			hssi_rx_pld_pcs_interface_hd_8g_pma_dw_rx                              => "pma_10b_rx",
			hssi_rx_pld_pcs_interface_hd_8g_fifo_mode_rx                           => "reg_rx",
			hssi_rx_pld_pcs_interface_hd_g3_prot_mode                              => "pipe_g3",
			hssi_rx_pld_pcs_interface_hd_krfec_channel_operation_mode              => "tx_rx_pair_enabled",
			hssi_rx_pld_pcs_interface_hd_krfec_lpbk_en                             => "disable",
			hssi_rx_pld_pcs_interface_hd_krfec_prot_mode_rx                        => "disabled_prot_mode_rx",
			hssi_rx_pld_pcs_interface_hd_krfec_low_latency_en_rx                   => "disable",
			hssi_rx_pld_pcs_interface_hd_krfec_test_bus_mode                       => "tx",
			hssi_rx_pld_pcs_interface_hd_pmaif_lpbk_en                             => "disable",
			hssi_rx_pld_pcs_interface_hd_pmaif_channel_operation_mode              => "tx_rx_pair_enabled",
			hssi_rx_pld_pcs_interface_hd_pmaif_sim_mode                            => "disable",
			hssi_rx_pld_pcs_interface_hd_pmaif_prot_mode_rx                        => "eightg_g3_pcie_g3_hip_mode_rx",
			hssi_rx_pld_pcs_interface_hd_pmaif_pma_dw_rx                           => "pcie_g3_dyn_dw_rx",
			hssi_rx_pld_pcs_interface_hd_pldif_prot_mode_rx                        => "eightg_and_g3_reg_mode_hip_rx",
			hssi_rx_pld_pcs_interface_hd_pldif_hrdrstctl_en                        => "enable",
			hssi_rx_pld_pcs_interface_pcs_rx_block_sel                             => "eightg",
			hssi_rx_pld_pcs_interface_pcs_rx_clk_sel                               => "pcs_rx_clk",
			hssi_rx_pld_pcs_interface_pcs_rx_hip_clk_en                            => "hip_rx_enable",
			hssi_rx_pld_pcs_interface_pcs_rx_output_sel                            => "teng_output",
			hssi_rx_pld_pcs_interface_pcs_rx_clk_out_sel                           => "eightg_clk_out",
			hssi_common_pld_pcs_interface_dft_clk_out_en                           => "dft_clk_out_disable",
			hssi_common_pld_pcs_interface_dft_clk_out_sel                          => "teng_rx_dft_clk",
			hssi_common_pld_pcs_interface_hrdrstctrl_en                            => "hrst_en",
			hssi_common_pld_pcs_interface_pcs_testbus_block_sel                    => "pma_if",
			hssi_rx_pcs_pma_interface_block_sel                                    => "eight_g_pcs",
			hssi_rx_pcs_pma_interface_channel_operation_mode                       => "tx_rx_pair_enabled",
			hssi_rx_pcs_pma_interface_clkslip_sel                                  => "pld",
			hssi_rx_pcs_pma_interface_lpbk_en                                      => "disable",
			hssi_rx_pcs_pma_interface_master_clk_sel                               => "master_rx_pma_clk",
			hssi_rx_pcs_pma_interface_pldif_datawidth_mode                         => "pldif_data_10bit",
			hssi_rx_pcs_pma_interface_pma_dw_rx                                    => "pcie_g3_dyn_dw_rx",
			hssi_rx_pcs_pma_interface_pma_if_dft_en                                => "dft_dis",
			hssi_rx_pcs_pma_interface_pma_if_dft_val                               => "dft_0",
			hssi_rx_pcs_pma_interface_prbs_clken                                   => "prbs_clk_dis",
			hssi_rx_pcs_pma_interface_prbs_ver                                     => "prbs_off",
			hssi_rx_pcs_pma_interface_prbs9_dwidth                                 => "prbs9_64b",
			hssi_rx_pcs_pma_interface_prot_mode_rx                                 => "eightg_g3_pcie_g3_hip_mode_rx",
			hssi_rx_pcs_pma_interface_rx_dyn_polarity_inversion                    => "rx_dyn_polinv_dis",
			hssi_rx_pcs_pma_interface_rx_lpbk_en                                   => "lpbk_dis",
			hssi_rx_pcs_pma_interface_rx_prbs_force_signal_ok                      => "force_sig_ok",
			hssi_rx_pcs_pma_interface_rx_prbs_mask                                 => "prbsmask128",
			hssi_rx_pcs_pma_interface_rx_prbs_mode                                 => "teng_mode",
			hssi_rx_pcs_pma_interface_rx_signalok_signaldet_sel                    => "sel_sig_det",
			hssi_rx_pcs_pma_interface_rx_static_polarity_inversion                 => "rx_stat_polinv_dis",
			hssi_rx_pcs_pma_interface_rx_uhsif_lpbk_en                             => "uhsif_lpbk_dis",
			hssi_rx_pcs_pma_interface_sup_mode                                     => "user_mode",
			hssi_tx_pcs_pma_interface_bypass_pma_txelecidle                        => "false",
			hssi_tx_pcs_pma_interface_channel_operation_mode                       => "tx_rx_pair_enabled",
			hssi_tx_pcs_pma_interface_lpbk_en                                      => "disable",
			hssi_tx_pcs_pma_interface_master_clk_sel                               => "master_tx_pma_clk",
			hssi_tx_pcs_pma_interface_pcie_sub_prot_mode_tx                        => "pipe_g3",
			hssi_tx_pcs_pma_interface_pldif_datawidth_mode                         => "pldif_data_10bit",
			hssi_tx_pcs_pma_interface_pma_dw_tx                                    => "pcie_g3_dyn_dw_tx",
			hssi_tx_pcs_pma_interface_pma_if_dft_en                                => "dft_dis",
			hssi_tx_pcs_pma_interface_pmagate_en                                   => "pmagate_dis",
			hssi_tx_pcs_pma_interface_prbs_clken                                   => "prbs_clk_dis",
			hssi_tx_pcs_pma_interface_prbs_gen_pat                                 => "prbs_gen_dis",
			hssi_tx_pcs_pma_interface_prbs9_dwidth                                 => "prbs9_64b",
			hssi_tx_pcs_pma_interface_prot_mode_tx                                 => "eightg_g3_pcie_g3_hip_mode_tx",
			hssi_tx_pcs_pma_interface_sq_wave_num                                  => "sq_wave_default",
			hssi_tx_pcs_pma_interface_sqwgen_clken                                 => "sqwgen_clk_dis",
			hssi_tx_pcs_pma_interface_sup_mode                                     => "user_mode",
			hssi_tx_pcs_pma_interface_tx_dyn_polarity_inversion                    => "tx_dyn_polinv_dis",
			hssi_tx_pcs_pma_interface_tx_pma_data_sel                              => "pcie_gen3",
			hssi_tx_pcs_pma_interface_tx_static_polarity_inversion                 => "tx_stat_polinv_dis",
			hssi_tx_pcs_pma_interface_uhsif_cnt_step_filt_before_lock              => "uhsif_filt_stepsz_b4lock_2",
			hssi_tx_pcs_pma_interface_uhsif_cnt_thresh_filt_after_lock_value       => 0,
			hssi_tx_pcs_pma_interface_uhsif_cnt_thresh_filt_before_lock            => "uhsif_filt_cntthr_b4lock_8",
			hssi_tx_pcs_pma_interface_uhsif_dcn_test_update_period                 => "uhsif_dcn_test_period_4",
			hssi_tx_pcs_pma_interface_uhsif_dcn_testmode_enable                    => "uhsif_dcn_test_mode_disable",
			hssi_tx_pcs_pma_interface_uhsif_dead_zone_count_thresh                 => "uhsif_dzt_cnt_thr_2",
			hssi_tx_pcs_pma_interface_uhsif_dead_zone_detection_enable             => "uhsif_dzt_disable",
			hssi_tx_pcs_pma_interface_uhsif_dead_zone_obser_window                 => "uhsif_dzt_obr_win_16",
			hssi_tx_pcs_pma_interface_uhsif_dead_zone_skip_size                    => "uhsif_dzt_skipsz_4",
			hssi_tx_pcs_pma_interface_uhsif_delay_cell_index_sel                   => "uhsif_index_cram",
			hssi_tx_pcs_pma_interface_uhsif_delay_cell_margin                      => "uhsif_dcn_margin_2",
			hssi_tx_pcs_pma_interface_uhsif_delay_cell_static_index_value          => 0,
			hssi_tx_pcs_pma_interface_uhsif_dft_dead_zone_control                  => "uhsif_dft_dz_det_val_0",
			hssi_tx_pcs_pma_interface_uhsif_dft_up_filt_control                    => "uhsif_dft_up_val_0",
			hssi_tx_pcs_pma_interface_uhsif_enable                                 => "uhsif_disable",
			hssi_tx_pcs_pma_interface_uhsif_lock_det_segsz_after_lock              => "uhsif_lkd_segsz_aflock_512",
			hssi_tx_pcs_pma_interface_uhsif_lock_det_segsz_before_lock             => "uhsif_lkd_segsz_b4lock_16",
			hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_cnt_after_lock_value   => 0,
			hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_cnt_before_lock_value  => 0,
			hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_diff_after_lock_value  => 0,
			hssi_tx_pcs_pma_interface_uhsif_lock_det_thresh_diff_before_lock_value => 0,
			hssi_common_pcs_pma_interface_asn_clk_enable                           => "true",
			hssi_common_pcs_pma_interface_asn_enable                               => "en_asn",
			hssi_common_pcs_pma_interface_block_sel                                => "pcie_gen3",
			hssi_common_pcs_pma_interface_bypass_early_eios                        => "false",
			hssi_common_pcs_pma_interface_bypass_pcie_switch                       => "false",
			hssi_common_pcs_pma_interface_bypass_pma_ltr                           => "false",
			hssi_common_pcs_pma_interface_bypass_pma_sw_done                       => "true",
			hssi_common_pcs_pma_interface_bypass_ppm_lock                          => "false",
			hssi_common_pcs_pma_interface_bypass_send_syncp_fbkp                   => "true",
			hssi_common_pcs_pma_interface_bypass_txdetectrx                        => "false",
			hssi_common_pcs_pma_interface_cdr_control                              => "en_cdr_ctrl",
			hssi_common_pcs_pma_interface_cid_enable                               => "en_cid_mode",
			hssi_common_pcs_pma_interface_data_mask_count                          => 2500,
			hssi_common_pcs_pma_interface_data_mask_count_multi                    => 1,
			hssi_common_pcs_pma_interface_dft_observation_clock_selection          => "dft_clk_obsrv_tx0",
			hssi_common_pcs_pma_interface_early_eios_counter                       => 50,
			hssi_common_pcs_pma_interface_force_freqdet                            => "force_freqdet_dis",
			hssi_common_pcs_pma_interface_free_run_clk_enable                      => "true",
			hssi_common_pcs_pma_interface_ignore_sigdet_g23                        => "false",
			hssi_common_pcs_pma_interface_pc_en_counter                            => 55,
			hssi_common_pcs_pma_interface_pc_rst_counter                           => 23,
			hssi_common_pcs_pma_interface_pcie_hip_mode                            => "hip_enable",
			hssi_common_pcs_pma_interface_ph_fifo_reg_mode                         => "phfifo_reg_mode_en",
			hssi_common_pcs_pma_interface_phfifo_flush_wait                        => 36,
			hssi_common_pcs_pma_interface_pipe_if_g3pcs                            => "pipe_if_g3pcs",
			hssi_common_pcs_pma_interface_pma_done_counter                         => 175000,
			hssi_common_pcs_pma_interface_pma_if_dft_en                            => "dft_dis",
			hssi_common_pcs_pma_interface_pma_if_dft_val                           => "dft_0",
			hssi_common_pcs_pma_interface_ppm_cnt_rst                              => "ppm_cnt_rst_dis",
			hssi_common_pcs_pma_interface_ppm_deassert_early                       => "deassert_early_en",
			hssi_common_pcs_pma_interface_ppm_gen1_2_cnt                           => "cnt_32k",
			hssi_common_pcs_pma_interface_ppm_post_eidle_delay                     => "cnt_200_cycles",
			hssi_common_pcs_pma_interface_ppmsel                                   => "ppmsel_300",
			hssi_common_pcs_pma_interface_prot_mode                                => "pipe_g3",
			hssi_common_pcs_pma_interface_rxvalid_mask                             => "rxvalid_mask_en",
			hssi_common_pcs_pma_interface_sigdet_wait_counter                      => 2500,
			hssi_common_pcs_pma_interface_sigdet_wait_counter_multi                => 1,
			hssi_common_pcs_pma_interface_sim_mode                                 => "disable",
			hssi_common_pcs_pma_interface_spd_chg_rst_wait_cnt_en                  => "true",
			hssi_common_pcs_pma_interface_sup_mode                                 => "user_mode",
			hssi_common_pcs_pma_interface_testout_sel                              => "asn_test",
			hssi_common_pcs_pma_interface_wait_clk_on_off_timer                    => 0,
			hssi_common_pcs_pma_interface_wait_pipe_synchronizing                  => 23,
			hssi_common_pcs_pma_interface_wait_send_syncp_fbkp                     => 250,
			hssi_common_pcs_pma_interface_ppm_det_buckets                          => "ppm_300_bucket",
			hssi_fifo_rx_pcs_double_read_mode                                      => "double_read_dis",
			hssi_fifo_rx_pcs_prot_mode                                             => "non_teng_mode",
			hssi_fifo_tx_pcs_double_write_mode                                     => "double_write_dis",
			hssi_fifo_tx_pcs_prot_mode                                             => "non_teng_mode",
			hssi_pipe_gen3_bypass_rx_detection_enable                              => "false",
			hssi_pipe_gen3_bypass_rx_preset                                        => 0,
			hssi_pipe_gen3_bypass_rx_preset_enable                                 => "false",
			hssi_pipe_gen3_bypass_tx_coefficent                                    => 0,
			hssi_pipe_gen3_bypass_tx_coefficent_enable                             => "false",
			hssi_pipe_gen3_elecidle_delay_g3                                       => 6,
			hssi_pipe_gen3_ind_error_reporting                                     => "dis_ind_error_reporting",
			hssi_pipe_gen3_mode                                                    => "pipe_g3",
			hssi_pipe_gen3_phy_status_delay_g12                                    => 5,
			hssi_pipe_gen3_phy_status_delay_g3                                     => 5,
			hssi_pipe_gen3_phystatus_rst_toggle_g12                                => "dis_phystatus_rst_toggle",
			hssi_pipe_gen3_phystatus_rst_toggle_g3                                 => "dis_phystatus_rst_toggle_g3",
			hssi_pipe_gen3_rate_match_pad_insertion                                => "dis_rm_fifo_pad_ins",
			hssi_pipe_gen3_sup_mode                                                => "user_mode",
			hssi_pipe_gen3_test_out_sel                                            => "disable_test_out",
			hssi_pipe_gen1_2_elec_idle_delay_val                                   => 3,
			hssi_pipe_gen1_2_error_replace_pad                                     => "replace_edb",
			hssi_pipe_gen1_2_hip_mode                                              => "en_hip",
			hssi_pipe_gen1_2_ind_error_reporting                                   => "dis_ind_error_reporting",
			hssi_pipe_gen1_2_phystatus_delay_val                                   => 0,
			hssi_pipe_gen1_2_phystatus_rst_toggle                                  => "dis_phystatus_rst_toggle",
			hssi_pipe_gen1_2_pipe_byte_de_serializer_en                            => "dont_care_bds",
			hssi_pipe_gen1_2_prot_mode                                             => "pipe_g3",
			hssi_pipe_gen1_2_rx_pipe_enable                                        => "en_pipe3_rx",
			hssi_pipe_gen1_2_rxdetect_bypass                                       => "dis_rxdetect_bypass",
			hssi_pipe_gen1_2_sup_mode                                              => "user_mode",
			hssi_pipe_gen1_2_tx_pipe_enable                                        => "en_pipe3_tx",
			hssi_pipe_gen1_2_txswing                                               => "dis_txswing",
			pma_adapt_adp_1s_ctle_bypass                                           => "radp_1s_ctle_bypass_0",
			pma_adapt_adp_4s_ctle_bypass                                           => "radp_4s_ctle_bypass_0",
			pma_adapt_adp_ctle_en                                                  => "radp_ctle_enable",
			pma_adapt_adp_dfe_fltap_bypass                                         => "radp_dfe_fltap_bypass_1",
			pma_adapt_adp_dfe_fltap_en                                             => "radp_dfe_fltap_disable",
			pma_adapt_adp_dfe_fxtap_bypass                                         => "radp_dfe_fxtap_bypass_1",
			pma_adapt_adp_dfe_fxtap_en                                             => "radp_dfe_fxtap_disable",
			pma_adapt_adp_dfe_fxtap_hold_en                                        => "radp_dfe_fxtap_hold",
			pma_adapt_adp_dfe_mode                                                 => "radp_dfe_mode_4",
			pma_adapt_adp_vga_bypass                                               => "radp_vga_bypass_1",
			pma_adapt_adp_vga_en                                                   => "radp_vga_enable",
			pma_adapt_adp_vref_bypass                                              => "radp_vref_bypass_0",
			pma_adapt_adp_vref_en                                                  => "radp_vref_enable",
			pma_adapt_datarate                                                     => "5000000000 bps",
			pma_adapt_prot_mode                                                    => "pcie_gen3_rx",
			pma_adapt_sup_mode                                                     => "user_mode",
			pma_adapt_adp_ctle_adapt_cycle_window                                  => "radp_ctle_adapt_cycle_window_7",
			pma_adapt_odi_dfe_spec_en                                              => "rodi_dfe_spec_en_0",
			pma_adapt_adapt_mode                                                   => "ctle",
			pma_adapt_adp_onetime_dfe                                              => "radp_onetime_dfe_0",
			pma_adapt_adp_mode                                                     => "radp_mode_8",
			pma_cdr_refclk_powerdown_mode                                          => "powerup",
			pma_cdr_refclk_refclk_select                                           => "ref_iqclk0",
			pma_cgb_bitslip_enable                                                 => "disable_bitslip",
			pma_cgb_bonding_reset_enable                                           => "disallow_bonding_reset",
			pma_cgb_datarate                                                       => "5000000000 bps",
			pma_cgb_pcie_gen3_bitwidth                                             => "pciegen3_wide",
			pma_cgb_prot_mode                                                      => "pcie_gen3_tx",
			pma_cgb_ser_mode                                                       => "ten_bit",
			pma_cgb_sup_mode                                                       => "user_mode",
			pma_cgb_x1_div_m_sel                                                   => "divbypass",
			pma_cgb_input_select_x1                                                => "unused",
			pma_cgb_input_select_gen3                                              => "unused",
			pma_cgb_input_select_xn                                                => "sel_x6_dn",
			pma_cgb_tx_ucontrol_en                                                 => "disable",
			pma_rx_dfe_datarate                                                    => "5000000000 bps",
			pma_rx_dfe_dft_en                                                      => "dft_enalbe",
			pma_rx_dfe_pdb                                                         => "dfe_enable",
			pma_rx_dfe_pdb_fixedtap                                                => "fixtap_dfe_enable",
			pma_rx_dfe_pdb_floattap                                                => "floattap_dfe_powerdown",
			pma_rx_dfe_pdb_fxtap4t7                                                => "fxtap4t7_powerdown",
			pma_rx_dfe_sup_mode                                                    => "user_mode",
			pma_rx_dfe_prot_mode                                                   => "pcie_gen3_rx",
			pma_rx_odi_datarate                                                    => "5000000000 bps",
			pma_rx_odi_sup_mode                                                    => "user_mode",
			pma_rx_odi_step_ctrl_sel                                               => "dprio_mode",
			pma_rx_odi_prot_mode                                                   => "pcie_gen3_rx",
			pma_rx_buf_bypass_eqz_stages_234                                       => "bypass_off",
			pma_rx_buf_datarate                                                    => "5000000000 bps",
			pma_rx_buf_diag_lp_en                                                  => "dlp_off",
			pma_rx_buf_prot_mode                                                   => "pcie_gen3_rx",
			pma_rx_buf_qpi_enable                                                  => "non_qpi_mode",
			pma_rx_buf_rx_refclk_divider                                           => "bypass_divider",
			pma_rx_buf_sup_mode                                                    => "user_mode",
			pma_rx_buf_loopback_modes                                              => "lpbk_disable",
			pma_rx_buf_refclk_en                                                   => "disable",
			pma_rx_buf_pm_tx_rx_pcie_gen                                           => "non_pcie",
			pma_rx_buf_pm_tx_rx_pcie_gen_bitwidth                                  => "pcie_gen3_32b",
			pma_rx_buf_pm_tx_rx_cvp_mode                                           => "cvp_off",
			pma_rx_buf_xrx_path_uc_cal_enable                                      => "rx_cal_off",
			pma_rx_buf_xrx_path_sup_mode                                           => "user_mode",
			pma_rx_buf_xrx_path_prot_mode                                          => "pcie_gen3_rx",
			pma_rx_buf_xrx_path_datarate                                           => "5000000000 bps",
			pma_rx_buf_xrx_path_datawidth                                          => 10,
			pma_rx_buf_xrx_path_pma_rx_divclk_hz                                   => "500000000",
			pma_rx_sd_prot_mode                                                    => "pcie_gen3_rx",
			pma_rx_sd_sd_output_off                                                => 13,
			pma_rx_sd_sd_output_on                                                 => 1,
			pma_rx_sd_sd_pdb                                                       => "sd_on",
			pma_rx_sd_sup_mode                                                     => "user_mode",
			pma_tx_ser_ser_clk_divtx_user_sel                                      => "divtx_user_off",
			pma_tx_ser_sup_mode                                                    => "user_mode",
			pma_tx_ser_prot_mode                                                   => "pcie_gen3_tx",
			pma_tx_buf_datarate                                                    => "5000000000 bps",
			pma_tx_buf_prot_mode                                                   => "pcie_gen3_tx",
			pma_tx_buf_rx_det                                                      => "mode_0",
			pma_tx_buf_rx_det_output_sel                                           => "rx_det_pcie_out",
			pma_tx_buf_rx_det_pdb                                                  => "rx_det_on",
			pma_tx_buf_sup_mode                                                    => "user_mode",
			pma_tx_buf_user_fir_coeff_ctrl_sel                                     => "dynamic_ctl",
			pma_tx_buf_xtx_path_prot_mode                                          => "pcie_gen3_tx",
			pma_tx_buf_xtx_path_datarate                                           => "5000000000 bps",
			pma_tx_buf_xtx_path_datawidth                                          => 10,
			pma_tx_buf_xtx_path_clock_divider_ratio                                => 1,
			pma_tx_buf_xtx_path_pma_tx_divclk_hz                                   => "500000000",
			pma_tx_buf_xtx_path_tx_pll_clk_hz                                      => "2500000000",
			pma_tx_buf_xtx_path_sup_mode                                           => "user_mode",
			cdr_pll_pma_width                                                      => 10,
			cdr_pll_cgb_div                                                        => 1,
			cdr_pll_is_cascaded_pll                                                => "false",
			cdr_pll_datarate                                                       => "5000000000 bps",
			cdr_pll_lpd_counter                                                    => 2,
			cdr_pll_lpfd_counter                                                   => 1,
			cdr_pll_n_counter_scratch                                              => 1,
			cdr_pll_output_clock_frequency                                         => "2500000000 Hz",
			cdr_pll_reference_clock_frequency                                      => "100000000 hz",
			cdr_pll_set_cdr_vco_speed                                              => 2,
			cdr_pll_set_cdr_vco_speed_fix                                          => 117,
			cdr_pll_vco_freq                                                       => "5000000000 Hz",
			cdr_pll_atb_select_control                                             => "atb_off",
			cdr_pll_auto_reset_on                                                  => "auto_reset_off",
			cdr_pll_bbpd_data_pattern_filter_select                                => "bbpd_data_pat_off",
			cdr_pll_bw_sel                                                         => "medium",
			cdr_pll_cdr_odi_select                                                 => "sel_cdr",
			cdr_pll_cdr_phaselock_mode                                             => "no_ignore_lock",
			cdr_pll_cdr_powerdown_mode                                             => "power_up",
			cdr_pll_chgpmp_current_pd                                              => "cp_current_pd_setting0",
			cdr_pll_chgpmp_current_pfd                                             => "cp_current_pfd_setting1",
			cdr_pll_chgpmp_replicate                                               => "false",
			cdr_pll_chgpmp_testmode                                                => "cp_test_disable",
			cdr_pll_clklow_mux_select                                              => "clklow_mux_cdr_fbclk",
			cdr_pll_diag_loopback_enable                                           => "false",
			cdr_pll_disable_up_dn                                                  => "true",
			cdr_pll_fref_clklow_div                                                => 1,
			cdr_pll_fref_mux_select                                                => "fref_mux_cdr_refclk",
			cdr_pll_gpon_lck2ref_control                                           => "gpon_lck2ref_off",
			cdr_pll_initial_settings                                               => "true",
			cdr_pll_lck2ref_delay_control                                          => "lck2ref_delay_2",
			cdr_pll_lf_resistor_pd                                                 => "lf_pd_setting3",
			cdr_pll_lf_resistor_pfd                                                => "lf_pfd_setting3",
			cdr_pll_lf_ripple_cap                                                  => "lf_no_ripple",
			cdr_pll_loop_filter_bias_select                                        => "lpflt_bias_7",
			cdr_pll_loopback_mode                                                  => "loopback_disabled",
			cdr_pll_ltd_ltr_micro_controller_select                                => "ltd_ltr_pcs",
			cdr_pll_m_counter                                                      => 50,
			cdr_pll_n_counter                                                      => 1,
			cdr_pll_pd_fastlock_mode                                               => "false",
			cdr_pll_pd_l_counter                                                   => 2,
			cdr_pll_pfd_l_counter                                                  => 1,
			cdr_pll_primary_use                                                    => "cdr",
			cdr_pll_prot_mode                                                      => "pcie_gen3_rx",
			cdr_pll_reverse_serial_loopback                                        => "no_loopback",
			cdr_pll_set_cdr_v2i_enable                                             => "true",
			cdr_pll_set_cdr_vco_reset                                              => "false",
			cdr_pll_set_cdr_vco_speed_pciegen3                                     => "cdr_vco_max_speedbin_pciegen3",
			cdr_pll_sup_mode                                                       => "user_mode",
			cdr_pll_tx_pll_prot_mode                                               => "txpll_unused",
			cdr_pll_txpll_hclk_driver_enable                                       => "false",
			cdr_pll_vco_overrange_voltage                                          => "vco_overrange_off",
			cdr_pll_vco_underrange_voltage                                         => "vco_underange_off",
			cdr_pll_fb_select                                                      => "direct_fb",
			cdr_pll_uc_ro_cal                                                      => "uc_ro_cal_on",
			cdr_pll_iqclk_mux_sel                                                  => "power_down",
			cdr_pll_pcie_gen                                                       => "pcie_gen3_100mhzref",
			cdr_pll_set_cdr_input_freq_range                                       => 0,
			cdr_pll_chgpmp_current_dn_trim                                         => "cp_current_trimming_dn_setting0",
			cdr_pll_chgpmp_up_pd_trim_double                                       => "normal_up_trim_current",
			cdr_pll_chgpmp_current_up_pd                                           => "cp_current_pd_up_setting4",
			cdr_pll_chgpmp_current_up_trim                                         => "cp_current_trimming_up_setting0",
			cdr_pll_chgpmp_dn_pd_trim_double                                       => "normal_dn_trim_current",
			cdr_pll_cal_vco_count_length                                           => "sel_8b_count",
			cdr_pll_chgpmp_current_dn_pd                                           => "cp_current_pd_dn_setting4",
			pma_rx_deser_clkdiv_source                                             => "vco_bypass_normal",
			pma_rx_deser_clkdivrx_user_mode                                        => "clkdivrx_user_disabled",
			pma_rx_deser_datarate                                                  => "5000000000 bps",
			pma_rx_deser_deser_factor                                              => 10,
			pma_rx_deser_force_clkdiv_for_testing                                  => "normal_clkdiv",
			pma_rx_deser_sdclk_enable                                              => "true",
			pma_rx_deser_sup_mode                                                  => "user_mode",
			pma_rx_deser_rst_n_adapt_odi                                           => "no_rst_adapt_odi",
			pma_rx_deser_bitslip_bypass                                            => "bs_bypass_yes",
			pma_rx_deser_prot_mode                                                 => "pcie_gen3_rx",
			pma_rx_deser_pcie_gen                                                  => "pcie_gen3_100mhzref",
			pma_rx_deser_pcie_gen_bitwidth                                         => "pcie_gen3_32b"
		)
		port map (
			hip_pipe_pclk             => hip_pipe_pclkhip_pipe_pclk.hip_pipe_pclk
			hip_fixedclk              => hip_fixedclkhip_fixedclk.hip_fixedclk
			ltssm_detect_quiet        => ltssm_detect_quietltssm_detect_quiet.ltssm_detect_quiet
			ltssm_detect_active       => ltssm_detect_active,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                --   ltssm_detect_active.ltssm_detect_active
			ltssm_rcvr_phase_two      => ltssm_rcvr_phase_twoltssm_rcvr_phase_two.ltssm_rcvr_phase_two
			hip_reduce_counters       => hip_reduce_countership_reduce_counters.hip_reduce_counters
			pcie_rate                 => pcie_ratepcie_rate.pcie_rate
			pipe_rate                 => pipe_ratepipe_rate.pipe_rate
			pipe_sw_done              => pipe_sw_donepipe_sw_done.pipe_sw_done
			pipe_sw                   => pipe_swpipe_sw.pipe_sw
			tx_analogreset            => tx_analogresettx_analogreset.tx_analogreset
			tx_digitalreset           => tx_digitalresettx_digitalreset.tx_digitalreset
			rx_analogreset            => rx_analogreset,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     --        rx_analogreset.rx_analogreset
			rx_digitalreset           => rx_digitalresetrx_digitalreset.rx_digitalreset
			tx_cal_busy               => tx_cal_busytx_cal_busy.tx_cal_busy
			rx_cal_busy               => rx_cal_busyrx_cal_busy.rx_cal_busy
			tx_bonding_clocks         => tx_bonding_clockstx_bonding_clocks.clk
			rx_cdr_refclk0            => rx_cdr_refclkrx_cdr_refclk0.clk
			tx_serial_data            => tx_serial_datatx_serial_data.tx_serial_data
			rx_serial_data            => rx_serial_datarx_serial_data.rx_serial_data
			rx_set_locktodata         => rx_set_locktodatarx_set_locktodata.rx_set_locktodata
			rx_set_locktoref          => rx_set_locktorefrx_set_locktoref.rx_set_locktoref
			rx_is_lockedtoref         => rx_is_lockedtorefrx_is_lockedtoref.rx_is_lockedtoref
			rx_is_lockedtodata        => rx_is_lockedtodatarx_is_lockedtodata.rx_is_lockedtodata
			rx_clkout                 => rx_clkoutrx_clkout.clk
			rx_parallel_data          => rx_parallel_data,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   --      rx_parallel_data.rx_parallel_data
			rx_polinv                 => rx_polinvrx_polinv.rx_polinv
			tx_hip_data               => tx_hip_datatx_hip_data.tx_hip_data
			rx_hip_data               => rx_hip_datarx_hip_data.rx_hip_data
			hip_frefclk               => hip_frefclkhip_frefclk.hip_frefclk
			hip_ctrl                  => hip_ctrlhip_ctrl.hip_ctrl
			hip_cal_done              => hip_cal_donehip_cal_done.hip_cal_done
			pipe_hclk_in              => pipe_hclk_inpipe_hclk_in.clk
			pipe_g3_txdeemph          => pipe_g3_txdeemphpipe_g3_txdeemph.pipe_g3_txdeemph
			pipe_g3_rxpresethint      => pipe_g3_rxpresethintpipe_g3_rxpresethint.pipe_g3_rxpresethint
			pipe_rx_eidleinfersel     => pipe_rx_eidleinfersel,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              -- pipe_rx_eidleinfersel.pipe_rx_eidleinfersel
			pipe_rx_elecidle          => pipe_rx_elecidle,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   --      pipe_rx_elecidle.pipe_rx_elecidle
			pipe_rx_polarity          => pipe_rx_polaritypipe_rx_polarity.pipe_rx_polarity
			reconfig_clk              => reconfig_clkreconfig_clk.clk
			reconfig_reset            => reconfig_resetreconfig_reset.reset
			reconfig_write            => reconfig_writereconfig_avmm.write
			reconfig_read             => reconfig_read,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      --                      .read
			reconfig_address          => reconfig_addressaddress
			reconfig_writedata        => reconfig_writedatawritedata
			reconfig_readdata         => reconfig_readdatareaddata
			reconfig_waitrequest      => reconfig_waitrequestwaitrequest
			tx_analogreset_ack        => openterminated)
			rx_analogreset_ack        => openterminated)
			tx_serial_clkterminated)
			tx_serial_clk1            => "00000000",                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         --           (terminated)
			tx_serial_clkterminated)
			tx_serial_clkterminated)
			tx_bonding_clocksterminated)
			tx_bonding_clocksterminated)
			tx_bonding_clocksterminated)
			rx_cdr_refclkterminated)
			rx_cdr_refclkterminated)
			rx_cdr_refclkterminated)
			rx_cdr_refclkterminated)
			rx_pma_clkslipterminated)
			rx_seriallpbkenterminated)
			rx_pma_qpipulldnterminated)
			tx_pma_qpipulldnterminated)
			tx_pma_qpipullupterminated)
			tx_pma_txdetectrxterminated)
			tx_pma_elecidleterminated)
			tx_pma_rxfound            => openterminated)
			rx_clklow                 => openterminated)
			rx_fref                   => openterminated)
			tx_coreclkinterminated)
			rx_coreclkinterminated)
			tx_clkout                 => openterminated)
			tx_pma_clkout             => open,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               --           (terminated)
			tx_pma_div_clkout         => openterminated)
			tx_pma_iqtxrx_clkout      => openterminated)
			rx_pma_clkout             => openterminated)
			rx_pma_div_clkout         => openterminated)
			rx_pma_iqtxrx_clkout      => openterminated)
			tx_parallel_dataterminated)
			tx_controlterminated)
			rx_control                => openterminated)
			rx_bitslipterminated)
			rx_adapt_resetterminated)
			rx_adapt_startterminated)
			rx_prbs_err_clrterminated)
			rx_prbs_done              => open,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               --           (terminated)
			rx_prbs_err               => openterminated)
			tx_uhsif_clkterminated)
			tx_uhsif_clkout           => openterminated)
			tx_uhsif_lock             => openterminated)
			tx_std_pcfifo_full        => openterminated)
			tx_std_pcfifo_empty       => openterminated)
			rx_std_pcfifo_full        => openterminated)
			rx_std_pcfifo_empty       => openterminated)
			rx_std_bitrev_enaterminated)
			rx_std_byterev_enaterminated)
			tx_polinvterminated)
			tx_std_bitslipboundaryselterminated)
			rx_std_bitslipboundarysel => openterminated)
			rx_std_wa_patternalignterminated)
			rx_std_wa_a1a2sizeterminated)
			rx_std_rmfifo_full        => openterminated)
			rx_std_rmfifo_empty       => openterminated)
			rx_std_signaldetect       => openterminated)
			tx_enh_data_validterminated)
			tx_enh_fifo_full          => openterminated)
			tx_enh_fifo_pfull         => openterminated)
			tx_enh_fifo_empty         => openterminated)
			tx_enh_fifo_pempty        => openterminated)
			tx_enh_fifo_cnt           => openterminated)
			rx_enh_fifo_rd_enterminated)
			rx_enh_data_valid         => openterminated)
			rx_enh_fifo_full          => openterminated)
			rx_enh_fifo_pfull         => openterminated)
			rx_enh_fifo_empty         => openterminated)
			rx_enh_fifo_pempty        => openterminated)
			rx_enh_fifo_del           => openterminated)
			rx_enh_fifo_insert        => openterminated)
			rx_enh_fifo_cnt           => openterminated)
			rx_enh_fifo_align_val     => openterminated)
			rx_enh_fifo_align_clrterminated)
			tx_enh_frame              => openterminated)
			tx_enh_frame_burst_enterminated)
			tx_enh_frame_diag_statusterminated)
			rx_enh_frame              => openterminated)
			rx_enh_frame_lock         => openterminated)
			rx_enh_frame_diag_status  => openterminated)
			rx_enh_crc32_err          => openterminated)
			rx_enh_highber            => openterminated)
			rx_enh_highber_clr_cntterminated)
			rx_enh_clr_errblk_countterminated)
			rx_enh_blk_lock           => openterminated)
			tx_enh_bitslipterminated)
			pipe_hclk_out             => openterminated)
			avmm_busy                 => openterminated)
		);

end architecture rtl; -- of phy_g3x8
